<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学术论文句式整理(保持更新)</title>
      <link href="/2020/10/02/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E5%8F%A5%E5%BC%8F%E6%95%B4%E7%90%86/"/>
      <url>/2020/10/02/%E5%AD%A6%E6%9C%AF%E8%AE%BA%E6%96%87%E5%8F%A5%E5%BC%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="批判性描述"><a href="#批判性描述" class="headerlink" title="批判性描述"></a>批判性描述</h2><h3 id="突出以往研究的不足（Highlighting-inadequacies-of-previous-studies）"><a href="#突出以往研究的不足（Highlighting-inadequacies-of-previous-studies）" class="headerlink" title="突出以往研究的不足（Highlighting inadequacies of previous studies）"></a>突出以往研究的不足（Highlighting inadequacies of previous studies）</h3><p>Previous studies of X have not dealt with …<br>Researchers have not treated X in much detail.<br>Such expositions are unsatisfactory because they …<br>Most studies in the field of X have only focused on …<br>Such approaches, however, have failed to address …<br>Previous published studies are limited to local surveys.<br>Half of the studies evaluated failed to specify whether …<br>The research to date has tended to focus on X rather than Y.<br>Previously published studies on the effect of X are not consistent.<br>Smith’s analysis does not take account of …, nor does she examine …<br>The existing accounts fail to resolve the contradiction between X and Y.<br>Most studies of X have only been carried out in a small number of areas.<br>However, much of the research up to now has been descriptive in nature …<br>The generalisability of much published research on this issue is problematic.<br>Research on the subject has been mostly restricted to limited comparisons of …<br>However, few writers have been able to draw on any systematic research into …<br>Short-term studies such as these do not necessarily show subtle changes over time …<br>Although extensive research has been carried out on X, no single study exists which …<br>However, these results were based upon data from over 30 years ago and it is unclear if …<br>The experimental data are rather controversial, and there is no general agreement about …<br>以前对X的研究还没有涉及……<br>研究人员并未对X进行详细的处理。<br>这样的论述是不令人满意的，因为它们……<br>X领域的大多数研究仅集中于……<br>但是，这种方法却没有解决……<br>以前发表的研究仅限于本地调查。<br>评估的研究中有一半未能说明是否……<br>迄今为止，研究倾向于将重点放在X而不是Y上。<br>先前发表的关于X影响的研究不一致。<br>Smith的分析没有考虑…，也没有进行调查…<br>现有的说明无法解决X和Y之间的矛盾。X的<br>大多数研究仅在少数领域进行。<br>但是，到目前为止，许多研究本质上都是描述性的……<br>关于这一问题的许多已发表研究的普遍性是有问题的。<br>关于该主题的研究主要限于对…的有限比较。<br>但是，很少有作家能够对…进行任何系统的研究。<br>诸如此类的短期研究不一定会随着时间的流逝而发生细微的变化……<br>尽管已经进行了广泛的研究。在X上，没有一项单独的研究……<br>但是，这些结果是基于30年前的数据而来的，目前尚不清楚……<br>实验数据是否颇具争议，并且关于……还没有普遍的共识。</p><h3 id="识别单个研究或论文中的弱点-Identifying-a-weakness-in-a-single-study-or-paper-close"><a href="#识别单个研究或论文中的弱点-Identifying-a-weakness-in-a-single-study-or-paper-close" class="headerlink" title="识别单个研究或论文中的弱点(Identifying a weakness in a single study or paper - close)"></a>识别单个研究或论文中的弱点(Identifying a weakness in a single study or paper - close)</h3><p> (However,)Smith fails to fully define what …<br>Jones fails to acknowledge the significance of …<br>the author overlooks the fact that X contributes to Y.<br>what Smith fails to do is to draw a distinction between …<br>the paper would appear to be over-ambitious in its claims.<br>another weakness is that we are given no explanation of how …<br>no attempt was made to quantify the association between X and Y.<br>the main weakness of the study is the failure to address how …<br>the study fails to consider the differing categories of damage that …<br>the research does not take into account pre-existing … such as …<br>the author offers no explanation for the distinction between X and Y.<br>Smith makes no attempt to differentiate between different types of X. | </p><p>（然而，）史密斯未能完全定义……<br>琼斯未能承认……的意义……<br>作者忽视了X对Y作出贡献的事实。<br>史密斯未能做的是在两者之间做出区分……<br>论文似乎在主张上过于雄心勃勃 。<br>另一个弱点是我们没有解释如何……<br>没有尝试量化X和Y之间的关联<br>该研究的主要弱点是无法解决……<br>该研究没有考虑到不同的损害类别……<br>该研究没有考虑诸如……之类的先前存在的内容。<br>作者没有对X和Y之间的区别进行解释。<br>Smith并未尝试区分不同类型的X。 </p><p>Smith，The paper，The book、fails to；does not<br>makes no attempt to<br>specify …<br>quantify …<br>compare …<br>separate …<br>account for …<br>suggest why …<br>analyse how …<br>ascertain whether …<br>distinguish between …<br>explain the meaning of …<br>provide information on …<br>address the question of …<br>assess the effectiveness of …<br>use a standardised method of …<br>give sufficient consideration to …<br>consider the long term impact of …<br>offer an adequate explanation for …<br>engage with current discourses on …<br>determine the underlying causes of …<br>systematically review all the relevant literature. </p><p>史密斯、论文、书失败地；没有<br>没有尝试<br>指定…<br>量化……<br>比较……<br>分离开……<br>证明…<br>说明为什么……<br>分析如何…<br>确定是否……<br>在之间…区分<br>解释词义的…<br>提供…信息<br>地址的问题…<br>评估的有效性……<br>用……的标准化方法<br>给予足够的考虑…<br>考虑…的长期影响…<br>为…从事有关…的当前论述提供适当的解释…<br>确定…的根本原因…<br>系统地审查所有相关文献。</p><h3 id="提供建设性建议"><a href="#提供建设性建议" class="headerlink" title="提供建设性建议"></a>提供建设性建议</h3><p>The study would have been more interesting<br>The study would have been more interesting if it had included …<br>These studies would have been more useful if they had focused on …<br>The study would have been more relevant if the researchers had asked …<br>The questionnaire would have been more useful if it had asked participants about …<br>The research would have been more relevant if a wider range of X had been explored<br>A more comprehensive study would include all the groups of …<br>A better study would examine a large, randomly selected sample of societies with …<br>A much more systematic approach would identify how X interacts with other variables that are believed to be linked to …<br>如果包含以下内容，则该研究会更有趣… …<br>如果专注于这些研究，这些研究将更为有用…<br>如果研究人员提出..要求，则该研究将更加相关…<br>如果询问参与者，该问卷将更加有用。关于…<br>如果探索更广泛的X，则该研究将更有意义。<br>一项更全面的研究将包括…的所有群体。<br>一项更好的研究将通过…研究一个随机选择的大型社会样本。<br>一种更为系统的方法将确定X如何与被认为与…关联的其他变量相互作用。</p><h3 id="介绍问题和局限性：理论或论点"><a href="#介绍问题和局限性：理论或论点" class="headerlink" title="介绍问题和局限性：理论或论点"></a>介绍问题和局限性：理论或论点</h3><p>The main weakness with this theory is that …<br>The key problem with this explanation is that …<br>However, this theory does not fully explain why …<br>One criticism of much of the literature on X is that …<br>However, there is an inconsistency with this argument.<br>A serious weakness with this argument, however, is that …<br>One question that needs to be asked, however, is whether …<br>Smith’s argument relies too heavily on qualitative analysis of …<br>Smith’s interpretation overlooks much of the historical research …<br>Many writers have challenged Smith’s claim on the grounds that …<br>Smith’s analysis does not take account of X, nor does he examine …<br>It seems that Jones’ understanding of the X framework is questionable.<br>The existing accounts fail to resolve the contradiction between X and Y.<br>One of the limitations with this explanation is that it does not explain why…</p><p>该理论的主要弱点是：…<br>这种解释的关键问题是…<br>但是，该理论不能完全解释原因…<br>对X上许多文献的一种批评是…<br>但是，该论点存在矛盾之处。<br>但是，该论点的一个严重缺陷是……但是，<br>需要提出的一个问题是……<br>史密斯的论点是否过于依赖定性分析……<br>史密斯的解释忽视了<br>许多历史研究……许多作家对史密斯的主张提出了质疑。理由是……<br>史密斯的分析没有考虑X，也没有审查……<br>似乎琼斯对X框架的理解是有问题的。<br>现有帐户无法解决X和Y之间的矛盾。<br>这种解释的局限性之一是它不能解释为什么……</p><h3 id="问题和局限性介绍：方法或实践（drawbacks，limitations，weaknesses，shortcomings，disadvantages-）"><a href="#问题和局限性介绍：方法或实践（drawbacks，limitations，weaknesses，shortcomings，disadvantages-）" class="headerlink" title="问题和局限性介绍：方法或实践（drawbacks，limitations，weaknesses，shortcomings，disadvantages.）"></a>问题和局限性介绍：方法或实践（drawbacks，limitations，weaknesses，shortcomings，disadvantages.）</h3><p>One major drawback of this approach is that …<br>Selection bias is another potential concern because …<br>Perhaps the most serious disadvantage of this method is that …<br>The main limitation of biosynthetic incorporation, however, is …<br>Non-government agencies are also very critical of the new policies.<br>All the studies reviewed so far, however, suffer from the fact that …<br>Critics of laboratory-based experiments contend that such studies …<br>Another problem with this approach is that it fails to take X into account.<br>Difficulties arise, however, when an attempt is made to implement the policy.<br>Critics have also argued that not only do surveys provide an inaccurate measure of X, but the …<br>Nevertheless, the strategy has not escaped criticism from governments, agencies and academics.</p><p>这种方法的主要缺点是…<br>选择偏见是另一个潜在的问题，因为…<br>该方法最严重的缺点是…<br>但是，生物合成掺入的主要局限性是…<br>非政府机构对新方法也非常批评政策。<br>但是，到目前为止，所有复习的研究都受到以下事实的困扰<br>：基于实验室的实验的批评者认为，此类研究……<br>这种方法的另一个问题是，它没有考虑X。<br>但是，当尝试执行该策略时会遇到困难。<br>评论家们还指出，不仅调查提供的X值不准确，而且…<br>然而，该策略并未逃脱政府，机构和学者的批评。</p><h3 id="使用评估形容词评论研究"><a href="#使用评估形容词评论研究" class="headerlink" title="使用评估形容词评论研究"></a>使用评估形容词评论研究</h3><p>useful，timely，seminal，detailed，thorough，excellent，influential，important，innovative，pioneering，impressive，wide-ranging，comprehensive，ground-breaking </p><p>study (of X), survey (of X), analysis (of X), examination (of X), investigation (into X), </p><p>Smith (2012) showed that …<br>Jones (2013) concluded that … </p><h3 id="介绍一般批评"><a href="#介绍一般批评" class="headerlink" title="介绍一般批评"></a>介绍一般批评</h3><p>Critics question the ability of poststructuralist theory to provide …<br>Non-government agencies are also very critical of the new policies.<br>Smith’s meta-analysis has been subjected to considerable criticism.<br>The most important of these criticisms is that Smith failed to note that …<br>The X theory has been vigorously challenged in recent years by a number of writers.<br>These claims have been strongly contested in recent years by a number of writers.<br>More recent arguments against X have been summarised by Smith and Jones (1982):<br>Critics have also argued that not only do surveys provide an inaccurate measure of X, but the …<br>Many analysts now argue that the strategy of X has not been successful. Jones (2003), for example, argues that …</p><p>批评者质疑后结构主义理论提供的能力……<br>非政府机构也非常批评新政策。<br>史密斯的荟萃分析受到了相当多的批评。<br>这些批评中最重要的是史密斯未能指出……<br>近年来，许多作家对X理论提出了严峻的挑战。<br>近年来，许多作家都强烈质疑这些主张。<br>史密斯和琼斯（Smith and Jones，1982）总结了反对X的最新观点：<br>批评者还认为，不仅调查提供的X度量不准确，而且……<br>许多分析家现在认为X的策略并未成功。例如，琼斯（Jones）（2003）认为……</p><h3 id="介绍特定作家的批评立场"><a href="#介绍特定作家的批评立场" class="headerlink" title="介绍特定作家的批评立场"></a>介绍特定作家的批评立场</h3><p>Jones (2003) has also questioned why …<br>However, Jones (2003) points out that …<br>The author challenges the widely held view that …<br>Smith (1999) takes issue with the contention that …<br>The idea that … was first challenged by Smith (1992).<br>Smith is critical of the tendency to compartmentalise X.<br>However, Smith (1967) questioned this hypothesis and …<br>Smith (1980) broke with tradition by raising the question of …<br>Jones (2003) has challenged some of Smith’s conclusions, arguing that …<br>Another major criticism of Smith’s study, made by Jones (2003), is that …<br>Jones (2003) is critical of the conclusions that Smith draws from his findings.<br>An alternative interpretation of the origins of X can be found in Smith (1976).<br>Jones (2003) is probably the best known critic of the X theory. He argues that …<br>In her discussion of X, Smith further criticises the ways in which some authors …<br>Smith’s decision to reject the classical explanation of X merits some discussion …<br>The latter point has been devastatingly critiqued by Jones (2003), who argues that …<br>In a recent article in <em>Academic Journal</em>, Smith (2014) questions the extent to which …<br>A recently published article by Smith <em>et al</em>. (2011) casts doubt on Jones’ assumption that …<br>Other authors (see Harbison, 2003; Kaplan, 2004) question the usefulness of such an approach.</p><p>琼斯（2003）也质疑为什么……<br>但是，琼斯（2003）指出…<br>作者挑战了……<br>史密斯（1999）对<br>以下观点的质疑：……最早由史密斯（1992）提出质疑的观点）。<br>史密斯（Smith）对将X划分的趋势提出了批评。<br>然而，史密斯（1967）质疑了这一假设，<br>史密斯（1980）通过提出问题来打破了传统……<br>琼斯（2003）挑战了史密斯的某些结论，认为…<br>另一个主要问题琼斯（2003）对史密斯研究的批评是……<br>琼斯（2003）批评史密斯从他的发现中得出的结论。<br>X起源的另一种解释可以在Smith（1976）中找到。<br>琼斯（2003）可能是X理论最著名的批评家。他辩称：…<br>在对X的讨论中，史密斯进一步批评了一些作者的方式…<br>史密斯拒绝接受X的经典解释的决定值得进行讨论…<br>琼斯（2003）毁灭性地批评了后者，他认为… Smith（2014）<br>在《Academic Journal》上的最新文章中质疑……<br>Smith等人最近发表的文章的程度。（2011年）对琼斯的假设产生了怀疑。<br>其他作者（见Harbison，2003年； Kaplan，2004年）质疑这种方法的有效性。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> 论文写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结与摘抄 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 保持更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>厦门&amp;鼓浪屿</title>
      <link href="/2020/07/25/%E5%8E%A6%E9%97%A8&amp;%E9%BC%93%E6%B5%AA%E5%B1%BF/"/>
      <url>/2020/07/25/%E5%8E%A6%E9%97%A8&amp;%E9%BC%93%E6%B5%AA%E5%B1%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/first.jpg"></p><p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/123.jpg"></p><p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/4.jpg"></p><p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/8.jpg"></p><p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/5.jpg"></p><p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/fdw.jpg"></p><p><img src="/2020/07/25/%E5%8E%A6%E9%97%A8&%E9%BC%93%E6%B5%AA%E5%B1%BF/6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 心情&amp;日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
            <tag> 照片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch常用代码段合集（保持更新）</title>
      <link href="/2020/06/29/PyTorch%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5%E5%90%88%E9%9B%86/"/>
      <url>/2020/06/29/PyTorch%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><p>一些Pytorch常用的代码段，会慢慢继续填充。</p><p>$$x_2$$</p><p>$$sin^2\theta + cos^2\theta &#x3D; 1$$</p><p>首先需要调用的基本包大致为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> PIL.Image<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br></code></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a><strong>基础配置</strong></h2><h3 id="检查-PyTorch-版本"><a href="#检查-PyTorch-版本" class="headerlink" title="检查 PyTorch 版本"></a><strong>检查 PyTorch 版本</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.__version__               <span class="hljs-comment"># PyTorch version</span><br>torch.version.cuda              <span class="hljs-comment"># Corresponding CUDA version</span><br>torch.backends.cudnn.version()  <span class="hljs-comment"># Corresponding cuDNN version</span><br>torch.cuda.get_device_name(<span class="hljs-number">0</span>)   <span class="hljs-comment"># GPU type</span><br></code></pre></td></tr></table></figure><h3 id="更新PyTorch"><a href="#更新PyTorch" class="headerlink" title="更新PyTorch"></a><strong>更新PyTorch</strong></h3><p>PyTorch 将被安装在 anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torch&#x2F;目录下。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vb">conda update pytorch torchvision -c pytorch<br></code></pre></td></tr></table></figure><h3 id="固定随机种子"><a href="#固定随机种子" class="headerlink" title="固定随机种子"></a><strong>固定随机种子</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.manual_seed(<span class="hljs-number">0</span>)<br>torch.cuda.manual_seed_all(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="指定程序-运行在特定GPU卡上"><a href="#指定程序-运行在特定GPU卡上" class="headerlink" title="指定程序 运行在特定GPU卡上"></a><strong>指定程序 运行在特定GPU卡上</strong></h3><p>在命令行指定环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">CUDA_VISIBLE_DEVICES=<span class="hljs-number">0</span>,<span class="hljs-number">1</span> python train.py<br></code></pre></td></tr></table></figure><p>或在代码中指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">os.environ[<span class="hljs-string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="hljs-string">&#x27;0,1&#x27;</span><br></code></pre></td></tr></table></figure><p>判断是否有 CUDA 支持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">torch.cuda.is_available()<br></code></pre></td></tr></table></figure><h3 id="设置为-cuDNN-benchmark-模式"><a href="#设置为-cuDNN-benchmark-模式" class="headerlink" title="设置为 cuDNN benchmark 模式"></a><strong>设置为 cuDNN benchmark 模式</strong></h3><p>Benchmark 模式会提升计算速度，但是由于计算中有随机性，每次网络前馈结果略有差异。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">torch.backends.cudnn.benchmark = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>如果想要避免这种结果波动，设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="清除-GPU-存储"><a href="#清除-GPU-存储" class="headerlink" title="清除 GPU 存储"></a><strong>清除 GPU 存储</strong></h3><p>有时 Control-C 中止运行后 GPU 存储没有及时释放，需要手动清空。在 PyTorch 内部可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">torch.cuda.empty_cache()<br></code></pre></td></tr></table></figure><p>或在命令行可以先使用 ps 找到程序的 PID，再使用 kill 结束该进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">ps aux | grep pythonkill -<span class="hljs-number">9</span> [pid]<br></code></pre></td></tr></table></figure><p>或者直接重置没有被清空的 GPU</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">nvidia-smi --gpu-reset -i [gpu_id]<br></code></pre></td></tr></table></figure><h2 id="张量处理"><a href="#张量处理" class="headerlink" title="张量处理"></a><strong>张量处理</strong></h2><h3 id="张量基本信息"><a href="#张量基本信息" class="headerlink" title="张量基本信息"></a><strong>张量基本信息</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">tensor.<span class="hljs-built_in">type</span>()   <span class="hljs-comment"># Data type</span><br>tensor.size()   <span class="hljs-comment"># Shape of the tensor. It is a subclass of Python tuple</span><br>tensor.dim()    <span class="hljs-comment"># Number of dimensions.</span><br></code></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a><strong>数据类型转换</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Set default tensor type. Float in PyTorch is much faster than double.</span><br>torch.set_default_tensor_type(torch.FloatTensor)<br><br><span class="hljs-comment"># Type convertions.</span><br>tensor = tensor.cuda()<br>tensor = tensor.cpu()<br>tensor = tensor.<span class="hljs-built_in">float</span>()<br>tensor = tensor.long()<br></code></pre></td></tr></table></figure><h3 id="torch-Tensor-与-np-ndarray-转换"><a href="#torch-Tensor-与-np-ndarray-转换" class="headerlink" title="torch.Tensor 与 np.ndarray 转换"></a><strong>torch.Tensor 与 np.ndarray 转换</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># torch.Tensor -&gt; np.ndarray.</span><br>ndarray = tensor.cpu().numpy()<br><br><span class="hljs-comment"># np.ndarray -&gt; torch.Tensor.</span><br>tensor = torch.from_numpy(ndarray).<span class="hljs-built_in">float</span>()<br>tensor = torch.from_numpy(ndarray.copy()).<span class="hljs-built_in">float</span>()  <span class="hljs-comment"># If ndarray has negative stride</span><br></code></pre></td></tr></table></figure><h3 id="torch-Tensor-与-PIL-Image-转换"><a href="#torch-Tensor-与-PIL-Image-转换" class="headerlink" title="torch.Tensor 与 PIL.Image 转换"></a><strong>torch.Tensor 与 PIL.Image 转换</strong></h3><p>PyTorch 中的张量默认采用 N×D×H×W 的顺序，并且数据范围在 [0, 1]，需要进行转置和规范化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># torch.Tensor -&gt; PIL.Image.</span><br>image = PIL.Image.fromarray(torch.clamp(tensor * <span class="hljs-number">255</span>, <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=<span class="hljs-number">255</span><br>    ).byte().permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu().numpy())<br>image = torchvision.transforms.functional.to_pil_image(tensor)  <span class="hljs-comment"># Equivalently way</span><br><br><span class="hljs-comment"># PIL.Image -&gt; torch.Tensor.</span><br>tensor = torch.from_numpy(np.asarray(PIL.Image.<span class="hljs-built_in">open</span>(path))<br>    ).permute(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>).<span class="hljs-built_in">float</span>() / <span class="hljs-number">255</span><br>tensor = torchvision.transforms.functional.to_tensor(PIL.Image.<span class="hljs-built_in">open</span>(path))  <span class="hljs-comment"># Equivalently way</span><br></code></pre></td></tr></table></figure><h3 id="np-ndarray-与-PIL-Image-转换"><a href="#np-ndarray-与-PIL-Image-转换" class="headerlink" title="np.ndarray 与 PIL.Image 转换"></a><strong>np.ndarray 与 PIL.Image 转换</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># np.ndarray -&gt; PIL.Image.</span><br>image = PIL.Image.fromarray(ndarray.astypde(np.uint8))<br><br><span class="hljs-comment"># PIL.Image -&gt; np.ndarray.</span><br>ndarray = np.asarray(PIL.Image.<span class="hljs-built_in">open</span>(path))<br></code></pre></td></tr></table></figure><h3 id="从只包含一个元素的张量中提取值"><a href="#从只包含一个元素的张量中提取值" class="headerlink" title="从只包含一个元素的张量中提取值"></a><strong>从只包含一个元素的张量中提取值</strong></h3><p>这在训练时统计 loss 的变化过程中特别有用。否则这将累积计算图，使 GPU 存储占用量越来越大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">value = tensor.item()<br></code></pre></td></tr></table></figure><h3 id="张量形变"><a href="#张量形变" class="headerlink" title="张量形变"></a><strong>张量形变</strong></h3><p>张量形变常常需要用于将卷积层特征输入全连接层的情形。相比 torch.view，torch.reshape 可以自动处理输入张量不连续的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">tensor = torch.reshape(tensor, shape)<br></code></pre></td></tr></table></figure><h3 id="打乱顺序"><a href="#打乱顺序" class="headerlink" title="打乱顺序"></a><strong>打乱顺序</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">tensor = tensor[torch.randperm(tensor.size(<span class="hljs-number">0</span>))]  <span class="hljs-comment"># Shuffle the first dimension</span><br></code></pre></td></tr></table></figure><h3 id="水平翻转"><a href="#水平翻转" class="headerlink" title="水平翻转"></a><strong>水平翻转</strong></h3><p>PyTorch 不支持 tensor[::-1] 这样的负步长操作，水平翻转可以用张量索引实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Assume tensor has shape N*D*H*W.tensor = tensor[:, :, :, torch.arange(tensor.size(3) - 1, -1, -1).long()]</span><br></code></pre></td></tr></table></figure><h3 id="复制张量"><a href="#复制张量" class="headerlink" title="复制张量"></a><strong>复制张量</strong></h3><p>有三种复制的方式，对应不同的需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Operation                 |  New/Shared memory | Still in computation graph |</span><br>tensor.clone()            <span class="hljs-comment"># |        New         |          Yes               |</span><br>tensor.detach()           <span class="hljs-comment"># |      Shared        |          No                |</span><br>tensor.detach.clone()()   <span class="hljs-comment"># |        New         |          No                |</span><br></code></pre></td></tr></table></figure><h3 id="拼接张量"><a href="#拼接张量" class="headerlink" title="拼接张量"></a><strong>拼接张量</strong></h3><p>注意 torch.cat 和 torch.stack 的区别在于 torch.cat 沿着给定的维度拼接，而 torch.stack 会新增一维。例如当参数是 3 个 10×5 的张量，torch.cat 的结果是 30×5 的张量，而 torch.stack 的结果是 3×10×5 的张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">tensor = torch.cat(list_of_tensors, dim=<span class="hljs-number">0</span>)<br>tensor = torch.stack(list_of_tensors, dim=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="将整数标记转换成独热（one-hot）编码"><a href="#将整数标记转换成独热（one-hot）编码" class="headerlink" title="将整数标记转换成独热（one-hot）编码"></a><strong>将整数标记转换成独热（one-hot）编码</strong></h3><p>PyTorch 中的标记默认从 0 开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">N = tensor.size(<span class="hljs-number">0</span>)<br>one_hot = torch.zeros(N, num_classes).long()<br>one_hot.scatter_(dim=<span class="hljs-number">1</span>, index=torch.unsqueeze(tensor, dim=<span class="hljs-number">1</span>), src=torch.ones(N, num_classes).long())<br></code></pre></td></tr></table></figure><h3 id="得到非零-x2F-零元素"><a href="#得到非零-x2F-零元素" class="headerlink" title="得到非零&#x2F;零元素"></a><strong>得到非零&#x2F;零元素</strong></h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">torch.nonzero<span class="hljs-params">(tensor)</span>               <span class="hljs-comment"># Index of non-zero elements</span><br>torch.nonzero<span class="hljs-params">(<span class="hljs-attr">tensor</span> == 0)</span>          <span class="hljs-comment"># Index of zero elements</span><br>torch.nonzero<span class="hljs-params">(tensor)</span><span class="hljs-string">.size</span><span class="hljs-params">(0)</span>       <span class="hljs-comment"># Number of non-zero elements</span><br>torch.nonzero<span class="hljs-params">(<span class="hljs-attr">tensor</span> == 0)</span><span class="hljs-string">.size</span><span class="hljs-params">(0)</span>  <span class="hljs-comment"># Number of zero elements</span><br></code></pre></td></tr></table></figure><h3 id="张量扩展"><a href="#张量扩展" class="headerlink" title="张量扩展"></a><strong>张量扩展</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Expand tensor of shape 64*512 to shape 64*512*7*7.</span><br>torch.reshape(tensor, (<span class="hljs-number">64</span>, <span class="hljs-number">512</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)).expand(<span class="hljs-number">64</span>, <span class="hljs-number">512</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a><strong>矩阵乘法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Matrix multiplication: (m*n) * (n*p) -&gt; (m*p).</span><br>result = torch.mm(tensor1, tensor2)<br><br><span class="hljs-comment"># Batch matrix multiplication: (b*m*n) * (b*n*p) -&gt; (b*m*p).</span><br>result = torch.bmm(tensor1, tensor2)<br><br><span class="hljs-comment"># Element-wise multiplication.</span><br>result = tensor1 * tensor2<br></code></pre></td></tr></table></figure><h3 id="计算两组数据之间的两两欧式距离"><a href="#计算两组数据之间的两两欧式距离" class="headerlink" title="计算两组数据之间的两两欧式距离"></a><strong>计算两组数据之间的两两欧式距离</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># X1 is of shape m*d.</span><br>X1 = torch.unsqueeze(X1, dim=<span class="hljs-number">1</span>).expand(m, n, d)<br><span class="hljs-comment"># X2 is of shape n*d.</span><br>X2 = torch.unsqueeze(X2, dim=<span class="hljs-number">0</span>).expand(m, n, d)<br><span class="hljs-comment"># dist is of shape m*n, where dist[i][j] = sqrt(|X1[i, :] - X[j, :]|^2)</span><br>dist = torch.sqrt(torch.<span class="hljs-built_in">sum</span>((X1 - X2) ** <span class="hljs-number">2</span>, dim=<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a><strong>模型定义</strong></h2><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a><strong>卷积层</strong></h3><p>最常用的卷积层配置是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">conv = torch.nn.Conv2d(in_channels, out_channels, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">True</span>)conv = torch.nn.Conv2d(in_channels, out_channels, kernel_size=<span class="hljs-number">1</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>, bias=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>如果卷积层配置比较复杂，不方便计算输出大小时，可以利用如下可视化工具辅助</p><p>链接：<a href="https://ezyang.github.io/convolution-visualizer/index.html">https://ezyang.github.io/convolution-visualizer/index.html</a></p><h3 id="0GAP（Global-average-pooling）层"><a href="#0GAP（Global-average-pooling）层" class="headerlink" title="0GAP（Global average pooling）层"></a><strong>0GAP（Global average pooling）层</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">gap = torch.nn.AdaptiveAvgPool2d(output_size=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="双线性汇合（bilinear-pooling）"><a href="#双线性汇合（bilinear-pooling）" class="headerlink" title="双线性汇合（bilinear pooling）"></a><strong>双线性汇合（bilinear pooling）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">X = torch.reshape(N, D, H * W)                        <span class="hljs-comment"># Assume X has shape N*D*H*W</span><br>X = torch.bmm(X, torch.transpose(X, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)) / (H * W)  <span class="hljs-comment"># Bilinear pooling</span><br><span class="hljs-keyword">assert</span> X.size() == (N, D, D)<br>X = torch.reshape(X, (N, D * D))<br>X = torch.sign(X) * torch.sqrt(torch.<span class="hljs-built_in">abs</span>(X) + <span class="hljs-number">1e-5</span>)   <span class="hljs-comment"># Signed-sqrt normalization</span><br>X = torch.nn.functional.normalize(X)                  <span class="hljs-comment"># L2 normalization</span><br></code></pre></td></tr></table></figure><h3 id="多卡同步-BN（Batch-normalization）"><a href="#多卡同步-BN（Batch-normalization）" class="headerlink" title="多卡同步 BN（Batch normalization）"></a><strong>多卡同步 BN（Batch normalization）</strong></h3><p>当使用 torch.nn.DataParallel 将代码运行在多张 GPU 卡上时，PyTorch 的 BN 层默认操作是各卡上数据独立地计算均值和标准差，同步 BN 使用所有卡上的数据一起计算 BN 层的均值和标准差，缓解了当批量大小（batch size）比较小时对均值和标准差估计不准的情况，是在目标检测等任务中一个有效的提升性能的技巧。</p><p>链接：<a href="https://github.com/vacancy/Synchronized-BatchNorm-PyTorch">https://github.com/vacancy/Synchronized-BatchNorm-PyTorch</a></p><h3 id="类似-BN-滑动平均"><a href="#类似-BN-滑动平均" class="headerlink" title="类似 BN 滑动平均"></a><strong>类似 BN 滑动平均</strong></h3><p>如果要实现类似 BN 滑动平均的操作，在 forward 函数中要使用原地（inplace）操作给滑动平均赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BN</span>(torch.nn.Module)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        ...<br>        self.register_buffer(<span class="hljs-string">&#x27;running_mean&#x27;</span>, torch.zeros(num_features))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X</span>):<br>        ...<br>        self.running_mean += momentum * (current - self.running_mean)<br></code></pre></td></tr></table></figure><h3 id="计算模型整体参数量"><a href="#计算模型整体参数量" class="headerlink" title="计算模型整体参数量"></a><strong>计算模型整体参数量</strong></h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">num_parameters = <span class="hljs-built_in">sum</span>(torch.numel(<span class="hljs-keyword">parameter</span>) for <span class="hljs-keyword">parameter</span> <span class="hljs-keyword">in</span> model.parameters())<br></code></pre></td></tr></table></figure><h3 id="类似-Keras-的-model-summary-输出模型信息"><a href="#类似-Keras-的-model-summary-输出模型信息" class="headerlink" title="类似 Keras 的 model.summary() 输出模型信息"></a><strong>类似 Keras 的 model.summary() 输出模型信息</strong></h3><p>链接：<a href="https://github.com/sksq96/pytorch-summary">https://github.com/sksq96/pytorch-summary</a></p><h3 id="模型权值初始化"><a href="#模型权值初始化" class="headerlink" title="模型权值初始化"></a><strong>模型权值初始化</strong></h3><p>注意model.modules() 和model.children() 的区别：model.modules() 会迭代地遍历模型的所有子层，而 model.children() 只会遍历模型下的一层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Common practise for initialization.</span><br><span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> model.modules():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(layer, torch.nn.Conv2d):<br>        torch.nn.init.kaiming_normal_(layer.weight, mode=<span class="hljs-string">&#x27;fan_out&#x27;</span>,<br>                                      nonlinearity=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        <span class="hljs-keyword">if</span> layer.bias <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            torch.nn.init.constant_(layer.bias, val=<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(layer, torch.nn.BatchNorm2d):<br>        torch.nn.init.constant_(layer.weight, val=<span class="hljs-number">1.0</span>)<br>        torch.nn.init.constant_(layer.bias, val=<span class="hljs-number">0.0</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(layer, torch.nn.Linear):<br>        torch.nn.init.xavier_normal_(layer.weight)<br>        <span class="hljs-keyword">if</span> layer.bias <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            torch.nn.init.constant_(layer.bias, val=<span class="hljs-number">0.0</span>)<br><br><span class="hljs-comment"># Initialization with given tensor.</span><br>layer.weight = torch.nn.Parameter(tensor)<br></code></pre></td></tr></table></figure><h3 id="部分层使用预训练模型"><a href="#部分层使用预训练模型" class="headerlink" title="部分层使用预训练模型"></a><strong>部分层使用预训练模型</strong></h3><p>注意如果保存的模型是 torch.nn.DataParallel，则当前的模型也需要是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">model.load_state_dict(torch.load(<span class="hljs-string">&#x27;model,pth&#x27;</span>), strict=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="将在-GPU-保存的模型加载到-CPU"><a href="#将在-GPU-保存的模型加载到-CPU" class="headerlink" title="将在 GPU 保存的模型加载到 CPU"></a><strong>将在 GPU 保存的模型加载到 CPU</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">model.load_state_dict(torch.load(<span class="hljs-string">&#x27;model,pth&#x27;</span>, map_location=<span class="hljs-string">&#x27;cpu&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="数据准备、特征提取与微调"><a href="#数据准备、特征提取与微调" class="headerlink" title="数据准备、特征提取与微调"></a><strong>数据准备、特征提取与微调</strong></h2><h3 id="得到视频数据基本信息"><a href="#得到视频数据基本信息" class="headerlink" title="得到视频数据基本信息"></a><strong>得到视频数据基本信息</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> cv2<br>video = cv2.VideoCapture(mp4_path)<br>height = <span class="hljs-built_in">int</span>(video.get(cv2.CAP_PROP_FRAME_HEIGHT))<br>width = <span class="hljs-built_in">int</span>(video.get(cv2.CAP_PROP_FRAME_WIDTH))<br>num_frames = <span class="hljs-built_in">int</span>(video.get(cv2.CAP_PROP_FRAME_COUNT))<br>fps = <span class="hljs-built_in">int</span>(video.get(cv2.CAP_PROP_FPS))<br>video.release()<br></code></pre></td></tr></table></figure><h3 id="TSN-每段（segment）采样一帧视频"><a href="#TSN-每段（segment）采样一帧视频" class="headerlink" title="TSN 每段（segment）采样一帧视频"></a><strong>TSN 每段（segment）采样一帧视频</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">K = self._num_segments<br><span class="hljs-keyword">if</span> is_train:<br>    <span class="hljs-keyword">if</span> num_frames &gt; K:<br>        <span class="hljs-comment"># Random index for each segment.</span><br>        frame_indices = torch.randint(<br>            high=num_frames // K, size=(K,), dtype=torch.long)<br>        frame_indices += num_frames // K * torch.arange(K)<br>    <span class="hljs-keyword">else</span>:<br>        frame_indices = torch.randint(<br>            high=num_frames, size=(K - num_frames,), dtype=torch.long)<br>        frame_indices = torch.sort(torch.cat((<br>            torch.arange(num_frames), frame_indices)))[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">if</span> num_frames &gt; K:<br>        <span class="hljs-comment"># Middle index for each segment.</span><br>        frame_indices = num_frames / K // <span class="hljs-number">2</span><br>        frame_indices += num_frames // K * torch.arange(K)<br>    <span class="hljs-keyword">else</span>:<br>        frame_indices = torch.sort(torch.cat((                              <br>            torch.arange(num_frames), torch.arange(K - num_frames))))[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">assert</span> frame_indices.size() == (K,)<br><span class="hljs-keyword">return</span> [frame_indices[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K)]<br></code></pre></td></tr></table></figure><h3 id="提取-ImageNet-预训练模型某层的卷积特征"><a href="#提取-ImageNet-预训练模型某层的卷积特征" class="headerlink" title="提取 ImageNet 预训练模型某层的卷积特征"></a><strong>提取 ImageNet 预训练模型某层的卷积特征</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># VGG-16 relu5-3 feature.</span><br>model = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>).features[:-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># VGG-16 pool5 feature.</span><br>model = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>).features<br><span class="hljs-comment"># VGG-16 fc7 feature.</span><br>model = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br>model.classifier = torch.nn.Sequential(*<span class="hljs-built_in">list</span>(model.classifier.children())[:-<span class="hljs-number">3</span>])<br><span class="hljs-comment"># ResNet GAP feature.</span><br>model = torchvision.models.resnet18(pretrained=<span class="hljs-literal">True</span>)<br>model = torch.nn.Sequential(collections.OrderedDict(<br>    <span class="hljs-built_in">list</span>(model.named_children())[:-<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">with</span> torch.no_grad():<br>    model.<span class="hljs-built_in">eval</span>()<br>    conv_representation = model(image)<br></code></pre></td></tr></table></figure><h3 id="提取-ImageNet-预训练模型多层的卷积特征"><a href="#提取-ImageNet-预训练模型多层的卷积特征" class="headerlink" title="提取 ImageNet 预训练模型多层的卷积特征"></a><strong>提取 ImageNet 预训练模型多层的卷积特征</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FeatureExtractor</span>(torch.nn.Module):<br>    <span class="hljs-string">&quot;&quot;&quot;Helper class to extract several convolution features from the given</span><br><span class="hljs-string">    pre-trained model.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Attributes:</span><br><span class="hljs-string">        _model, torch.nn.Module.</span><br><span class="hljs-string">        _layers_to_extract, list&lt;str&gt; or set&lt;str&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Example:</span><br><span class="hljs-string">        &gt;&gt;&gt; model = torchvision.models.resnet152(pretrained=True)</span><br><span class="hljs-string">        &gt;&gt;&gt; model = torch.nn.Sequential(collections.OrderedDict(</span><br><span class="hljs-string">                list(model.named_children())[:-1]))</span><br><span class="hljs-string">        &gt;&gt;&gt; conv_representation = FeatureExtractor(</span><br><span class="hljs-string">                pretrained_model=model,</span><br><span class="hljs-string">                layers_to_extract=&#123;&#x27;layer1&#x27;, &#x27;layer2&#x27;, &#x27;layer3&#x27;, &#x27;layer4&#x27;&#125;)(image)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, pretrained_model, layers_to_extract</span>):<br>        torch.nn.Module.__init__(self)<br>        self._model = pretrained_model<br>        self._model.<span class="hljs-built_in">eval</span>()<br>        self._layers_to_extract = <span class="hljs-built_in">set</span>(layers_to_extract)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            conv_representation = []<br>            <span class="hljs-keyword">for</span> name, layer <span class="hljs-keyword">in</span> self._model.named_children():<br>                x = layer(x)<br>                <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> self._layers_to_extract:<br>                    conv_representation.append(x)<br>            <span class="hljs-keyword">return</span> conv_representation<br></code></pre></td></tr></table></figure><h3 id="其他预训练模型"><a href="#其他预训练模型" class="headerlink" title="其他预训练模型"></a><strong>其他预训练模型</strong></h3><p>链接：<a href="https://github.com/Cadene/pretrained-models.pytorch">https://github.com/Cadene/pretrained-models.pytorch</a></p><h3 id="微调全连接层"><a href="#微调全连接层" class="headerlink" title="微调全连接层"></a><strong>微调全连接层</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">model = torchvision.models.resnet18(pretrained=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> model.parameters():<br>    param.requires_grad = <span class="hljs-literal">False</span><br>model.fc = nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment"># Replace the last fc layer</span><br>optimizer = torch.optim.SGD(model.fc.parameters(), lr=<span class="hljs-number">1e-2</span>, momentum=<span class="hljs-number">0.9</span>, weight_decay=<span class="hljs-number">1e-4</span>)<br></code></pre></td></tr></table></figure><h3 id="以较大学习率微调全连接层，较小学习率微调卷积层"><a href="#以较大学习率微调全连接层，较小学习率微调卷积层" class="headerlink" title="以较大学习率微调全连接层，较小学习率微调卷积层"></a><strong>以较大学习率微调全连接层，较小学习率微调卷积层</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">model = torchvision.models.resnet18(pretrained=<span class="hljs-literal">True</span>)<br>finetuned_parameters = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">id</span>, model.fc.parameters()))<br>conv_parameters = (p <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> model.parameters() <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span>(p) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> finetuned_parameters)<br>parameters = [&#123;<span class="hljs-string">&#x27;params&#x27;</span>: conv_parameters, <span class="hljs-string">&#x27;lr&#x27;</span>: <span class="hljs-number">1e-3</span>&#125;, <br>              &#123;<span class="hljs-string">&#x27;params&#x27;</span>: model.fc.parameters()&#125;]<br>optimizer = torch.optim.SGD(parameters, lr=<span class="hljs-number">1e-2</span>, momentum=<span class="hljs-number">0.9</span>, weight_decay=<span class="hljs-number">1e-4</span>)<br></code></pre></td></tr></table></figure><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a><strong>模型训练</strong></h2><h3 id="常用训练和验证数据预处理"><a href="#常用训练和验证数据预处理" class="headerlink" title="常用训练和验证数据预处理"></a><strong>常用训练和验证数据预处理</strong></h3><p>其中 ToTensor 操作会将 PIL.Image 或形状为 H×W×D，数值范围为 [0, 255] 的 np.ndarray 转换为形状为 D×H×W，数值范围为 [0.0, 1.0] 的 torch.Tensor。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">train_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.RandomResizedCrop(size=<span class="hljs-number">224</span>,<br>                                             scale=(<span class="hljs-number">0.08</span>, <span class="hljs-number">1.0</span>)),<br>    torchvision.transforms.RandomHorizontalFlip(),<br>    torchvision.transforms.ToTensor(),<br>    torchvision.transforms.Normalize(mean=(<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>),<br>                                     std=(<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>)),<br> ])<br> val_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.Resize(<span class="hljs-number">224</span>),<br>    torchvision.transforms.CenterCrop(<span class="hljs-number">224</span>),<br>    torchvision.transforms.ToTensor(),<br>    torchvision.transforms.Normalize(mean=(<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>),<br>                                     std=(<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>)),<br>])<br></code></pre></td></tr></table></figure><h3 id="训练基本代码框架"><a href="#训练基本代码框架" class="headerlink" title="训练基本代码框架"></a><strong>训练基本代码框架</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> epoch(<span class="hljs-number">80</span>):<br>    <span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> tqdm.tqdm(train_loader, desc=<span class="hljs-string">&#x27;Epoch %3d&#x27;</span> % (t + <span class="hljs-number">1</span>)):<br>        images, labels = images.cuda(), labels.cuda()<br>        scores = model(images)<br>        loss = loss_function(scores, labels)<br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br></code></pre></td></tr></table></figure><h3 id="标记平滑（label-smoothing）"><a href="#标记平滑（label-smoothing）" class="headerlink" title="标记平滑（label smoothing）"></a><strong>标记平滑（label smoothing）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> train_loader:<br>    images, labels = images.cuda(), labels.cuda()<br>    N = labels.size(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># C is the number of classes.</span><br>    smoothed_labels = torch.full(size=(N, C), fill_value=<span class="hljs-number">0.1</span> / (C - <span class="hljs-number">1</span>)).cuda()<br>    smoothed_labels.scatter_(dim=<span class="hljs-number">1</span>, index=torch.unsqueeze(labels, dim=<span class="hljs-number">1</span>), value=<span class="hljs-number">0.9</span>)<br><br>    score = model(images)<br>    log_prob = torch.nn.functional.log_softmax(score, dim=<span class="hljs-number">1</span>)<br>    loss = -torch.<span class="hljs-built_in">sum</span>(log_prob * smoothed_labels) / N<br>    optimizer.zero_grad()<br>    loss.backward()<br>    optimizer.step()<br></code></pre></td></tr></table></figure><h3 id="Mixup"><a href="#Mixup" class="headerlink" title="Mixup"></a><strong>Mixup</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">beta_distribution = torch.distributions.beta.Beta(alpha, alpha)<br><span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> train_loader:<br>    images, labels = images.cuda(), labels.cuda()<br><br>    <span class="hljs-comment"># Mixup images.</span><br>    lambda_ = beta_distribution.sample([]).item()<br>    index = torch.randperm(images.size(<span class="hljs-number">0</span>)).cuda()<br>    mixed_images = lambda_ * images + (<span class="hljs-number">1</span> - lambda_) * images[index, :]<br><br>    <span class="hljs-comment"># Mixup loss.    </span><br>    scores = model(mixed_images)<br>    loss = (lambda_ * loss_function(scores, labels) <br>            + (<span class="hljs-number">1</span> - lambda_) * loss_function(scores, labels[index]))<br><br>    optimizer.zero_grad()<br>    loss.backward()<br>    optimizer.step()<br></code></pre></td></tr></table></figure><h3 id="L1-正则化"><a href="#L1-正则化" class="headerlink" title="L1 正则化"></a><strong>L1 正则化</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">l1_regularization = torch.nn.L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)<br>loss = ...  <span class="hljs-comment"># Standard cross-entropy loss</span><br><span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> model.parameters():<br>    loss += torch.<span class="hljs-built_in">sum</span>(torch.<span class="hljs-built_in">abs</span>(param))<br>loss.backward()<br></code></pre></td></tr></table></figure><h3 id="不对偏置项进行-L2-正则化-x2F-权值衰减（weight-decay）"><a href="#不对偏置项进行-L2-正则化-x2F-权值衰减（weight-decay）" class="headerlink" title="不对偏置项进行 L2 正则化&#x2F;权值衰减（weight decay）"></a><strong>不对偏置项进行 L2 正则化&#x2F;权值衰减（weight decay）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">bias_list = (param <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters() <span class="hljs-keyword">if</span> name[-<span class="hljs-number">4</span>:] == <span class="hljs-string">&#x27;bias&#x27;</span>)<br>others_list = (param <span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> model.named_parameters() <span class="hljs-keyword">if</span> name[-<span class="hljs-number">4</span>:] != <span class="hljs-string">&#x27;bias&#x27;</span>)<br>parameters = [&#123;<span class="hljs-string">&#x27;parameters&#x27;</span>: bias_list, <span class="hljs-string">&#x27;weight_decay&#x27;</span>: <span class="hljs-number">0</span>&#125;,                <br>              &#123;<span class="hljs-string">&#x27;parameters&#x27;</span>: others_list&#125;]<br>optimizer = torch.optim.SGD(parameters, lr=<span class="hljs-number">1e-2</span>, momentum=<span class="hljs-number">0.9</span>, weight_decay=<span class="hljs-number">1e-4</span>)<br></code></pre></td></tr></table></figure><h3 id="梯度裁剪（gradient-clipping）"><a href="#梯度裁剪（gradient-clipping）" class="headerlink" title="梯度裁剪（gradient clipping）"></a><strong>梯度裁剪（gradient clipping）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h3 id="计算-Softmax-输出的准确率"><a href="#计算-Softmax-输出的准确率" class="headerlink" title="计算 Softmax 输出的准确率"></a><strong>计算 Softmax 输出的准确率</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python">score = model(images)<br>prediction = torch.argmax(score, dim=<span class="hljs-number">1</span>)<br>num_correct = torch.<span class="hljs-built_in">sum</span>(prediction == labels).item()<br>accuruacy = num_correct / labels.size(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="可视化模型前馈的计算图"><a href="#可视化模型前馈的计算图" class="headerlink" title="可视化模型前馈的计算图"></a><strong>可视化模型前馈的计算图</strong></h3><p>链接：<a href="https://github.com/szagoruyko/pytorchviz">https://github.com/szagoruyko/pytorchviz</a></p><h3 id="可视化学习曲线"><a href="#可视化学习曲线" class="headerlink" title="可视化学习曲线"></a><strong>可视化学习曲线</strong></h3><p>有 Facebook 自己开发的 Visdom 和 Tensorboard 两个选择。</p><p><a href="https://github.com/facebookresearch/visdom">https://github.com/facebookresearch/visdom</a></p><p><a href="https://github.com/lanpa/tensorboardX">https://github.com/lanpa/tensorboardX</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Example using Visdom.</span><br>vis = visdom.Visdom(env=<span class="hljs-string">&#x27;Learning curve&#x27;</span>, use_incoming_socket=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">assert</span> self._visdom.check_connection()<br>self._visdom.close()<br>options = collections.namedtuple(<span class="hljs-string">&#x27;Options&#x27;</span>, [<span class="hljs-string">&#x27;loss&#x27;</span>, <span class="hljs-string">&#x27;acc&#x27;</span>, <span class="hljs-string">&#x27;lr&#x27;</span>])(<br>    loss=&#123;<span class="hljs-string">&#x27;xlabel&#x27;</span>: <span class="hljs-string">&#x27;Epoch&#x27;</span>, <span class="hljs-string">&#x27;ylabel&#x27;</span>: <span class="hljs-string">&#x27;Loss&#x27;</span>, <span class="hljs-string">&#x27;showlegend&#x27;</span>: <span class="hljs-literal">True</span>&#125;,<br>    acc=&#123;<span class="hljs-string">&#x27;xlabel&#x27;</span>: <span class="hljs-string">&#x27;Epoch&#x27;</span>, <span class="hljs-string">&#x27;ylabel&#x27;</span>: <span class="hljs-string">&#x27;Accuracy&#x27;</span>, <span class="hljs-string">&#x27;showlegend&#x27;</span>: <span class="hljs-literal">True</span>&#125;,<br>    lr=&#123;<span class="hljs-string">&#x27;xlabel&#x27;</span>: <span class="hljs-string">&#x27;Epoch&#x27;</span>, <span class="hljs-string">&#x27;ylabel&#x27;</span>: <span class="hljs-string">&#x27;Learning rate&#x27;</span>, <span class="hljs-string">&#x27;showlegend&#x27;</span>: <span class="hljs-literal">True</span>&#125;)<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> epoch(<span class="hljs-number">80</span>):<br>    tran(...)<br>    val(...)<br>    vis.line(X=torch.Tensor([t + <span class="hljs-number">1</span>]), Y=torch.Tensor([train_loss]),<br>             name=<span class="hljs-string">&#x27;train&#x27;</span>, win=<span class="hljs-string">&#x27;Loss&#x27;</span>, update=<span class="hljs-string">&#x27;append&#x27;</span>, opts=options.loss)<br>    vis.line(X=torch.Tensor([t + <span class="hljs-number">1</span>]), Y=torch.Tensor([val_loss]),<br>             name=<span class="hljs-string">&#x27;val&#x27;</span>, win=<span class="hljs-string">&#x27;Loss&#x27;</span>, update=<span class="hljs-string">&#x27;append&#x27;</span>, opts=options.loss)<br>    vis.line(X=torch.Tensor([t + <span class="hljs-number">1</span>]), Y=torch.Tensor([train_acc]),<br>             name=<span class="hljs-string">&#x27;train&#x27;</span>, win=<span class="hljs-string">&#x27;Accuracy&#x27;</span>, update=<span class="hljs-string">&#x27;append&#x27;</span>, opts=options.acc)<br>    vis.line(X=torch.Tensor([t + <span class="hljs-number">1</span>]), Y=torch.Tensor([val_acc]),<br>             name=<span class="hljs-string">&#x27;val&#x27;</span>, win=<span class="hljs-string">&#x27;Accuracy&#x27;</span>, update=<span class="hljs-string">&#x27;append&#x27;</span>, opts=options.acc)<br>    vis.line(X=torch.Tensor([t + <span class="hljs-number">1</span>]), Y=torch.Tensor([lr]),<br>             win=<span class="hljs-string">&#x27;Learning rate&#x27;</span>, update=<span class="hljs-string">&#x27;append&#x27;</span>, opts=options.lr)<br></code></pre></td></tr></table></figure><h3 id="得到当前学习率"><a href="#得到当前学习率" class="headerlink" title="得到当前学习率"></a><strong>得到当前学习率</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># If there is one global learning rate (which is the common case).</span><br>lr = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(optimizer.param_groups))[<span class="hljs-string">&#x27;lr&#x27;</span>]<br><br><span class="hljs-comment"># If there are multiple learning rates for different layers.</span><br>all_lr = []<br><span class="hljs-keyword">for</span> param_group <span class="hljs-keyword">in</span> optimizer.param_groups:<br>    all_lr.append(param_group[<span class="hljs-string">&#x27;lr&#x27;</span>])<br></code></pre></td></tr></table></figure><h3 id="学习率衰减"><a href="#学习率衰减" class="headerlink" title="学习率衰减"></a><strong>学习率衰减</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Reduce learning rate when validation accuarcy plateau.</span><br>scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=<span class="hljs-string">&#x27;max&#x27;</span>, patience=<span class="hljs-number">5</span>, verbose=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">80</span>):<br>    train(...); val(...)<br>    scheduler.step(val_acc)<br><br><span class="hljs-comment"># Cosine annealing learning rate.</span><br>scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="hljs-number">80</span>)<br><span class="hljs-comment"># Reduce learning rate by 10 at given epochs.</span><br>scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[<span class="hljs-number">50</span>, <span class="hljs-number">70</span>], gamma=<span class="hljs-number">0.1</span>)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">80</span>):<br>    scheduler.step()    <br>    train(...); val(...)<br><br><span class="hljs-comment"># Learning rate warmup by 10 epochs.</span><br>scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda=<span class="hljs-keyword">lambda</span> t: t / <span class="hljs-number">10</span>)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>):<br>    scheduler.step()<br>    train(...); val(...)<br></code></pre></td></tr></table></figure><h3 id="保存与加载断点"><a href="#保存与加载断点" class="headerlink" title="保存与加载断点"></a><strong>保存与加载断点</strong></h3><p>注意为了能够恢复训练，我们需要同时保存模型和优化器的状态，以及当前的训练轮数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Save checkpoint.</span><br>is_best = current_acc &gt; best_acc<br>best_acc = <span class="hljs-built_in">max</span>(best_acc, current_acc)<br>checkpoint = &#123;<br>    <span class="hljs-string">&#x27;best_acc&#x27;</span>: best_acc,    <br>    <span class="hljs-string">&#x27;epoch&#x27;</span>: t + <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;model&#x27;</span>: model.state_dict(),<br>    <span class="hljs-string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),<br>&#125;<br>model_path = os.path.join(<span class="hljs-string">&#x27;model&#x27;</span>, <span class="hljs-string">&#x27;checkpoint.pth.tar&#x27;</span>)<br>torch.save(checkpoint, model_path)<br><span class="hljs-keyword">if</span> is_best:<br>    shutil.copy(<span class="hljs-string">&#x27;checkpoint.pth.tar&#x27;</span>, model_path)<br><br><span class="hljs-comment"># Load checkpoint.</span><br><span class="hljs-keyword">if</span> resume:<br>    model_path = os.path.join(<span class="hljs-string">&#x27;model&#x27;</span>, <span class="hljs-string">&#x27;checkpoint.pth.tar&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> os.path.isfile(model_path)<br>    checkpoint = torch.load(model_path)<br>    best_acc = checkpoint[<span class="hljs-string">&#x27;best_acc&#x27;</span>]<br>    start_epoch = checkpoint[<span class="hljs-string">&#x27;epoch&#x27;</span>]<br>    model.load_state_dict(checkpoint[<span class="hljs-string">&#x27;model&#x27;</span>])<br>    optimizer.load_state_dict(checkpoint[<span class="hljs-string">&#x27;optimizer&#x27;</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Load checkpoint at epoch %d.&#x27;</span> % start_epoch)<br></code></pre></td></tr></table></figure><h3 id="计算准确率、查准率（precision）、查全率（recall）"><a href="#计算准确率、查准率（precision）、查全率（recall）" class="headerlink" title="计算准确率、查准率（precision）、查全率（recall）"></a><strong>计算准确率、查准率（precision）、查全率（recall）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># data[&#x27;label&#x27;] and data[&#x27;prediction&#x27;] are groundtruth label and prediction </span><br><span class="hljs-comment"># for each image, respectively.</span><br>accuracy = np.mean(data[<span class="hljs-string">&#x27;label&#x27;</span>] == data[<span class="hljs-string">&#x27;prediction&#x27;</span>]) * <span class="hljs-number">100</span><br><br><span class="hljs-comment"># Compute recision and recall for each class.</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_classes)):<br>    tp = np.dot((data[<span class="hljs-string">&#x27;label&#x27;</span>] == c).astype(<span class="hljs-built_in">int</span>),<br>                (data[<span class="hljs-string">&#x27;prediction&#x27;</span>] == c).astype(<span class="hljs-built_in">int</span>))<br>    tp_fp = np.<span class="hljs-built_in">sum</span>(data[<span class="hljs-string">&#x27;prediction&#x27;</span>] == c)<br>    tp_fn = np.<span class="hljs-built_in">sum</span>(data[<span class="hljs-string">&#x27;label&#x27;</span>] == c)<br>    precision = tp / tp_fp * <span class="hljs-number">100</span><br>    recall = tp / tp_fn * <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h2 id="PyTorch-其他注意事项"><a href="#PyTorch-其他注意事项" class="headerlink" title="PyTorch 其他注意事项"></a><strong>PyTorch 其他注意事项</strong></h2><h3 id="模型定义部分"><a href="#模型定义部分" class="headerlink" title="模型定义部分"></a><strong>模型定义部分</strong></h3><ul><li><p>建议有参数的层和汇合（pooling）层使用 torch.nn 模块定义，激活函数直接使用 torch.nn.functional。</p></li><li><p>torch.nn 模块和 torch.nn.functional 的区别在于，torch.nn 模块在计算时底层调用了 torch.nn.functional，但 torch.nn 模块包括该层参数，还可以应对训练和测试两种网络状态。使用 torch.nn.functional 时要注意网络状态，如</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>    ...<br>    x = torch.nn.functional.dropout(x, p=<span class="hljs-number">0.5</span>, training=self.training)<br></code></pre></td></tr></table></figure><ul><li>model(x) 前用 model.train() 和 model.eval() 切换网络状态。</li><li>不需要计算梯度的代码块用 with torch.no_grad() 包含起来。model.eval() 和 torch.no_grad() 的区别在于，model.eval() 是将网络切换为测试状态，例如 BN 和随机失活（dropout）在训练和测试阶段使用不同的计算方法。torch.no_grad() 是关闭 PyTorch 张量的自动求导机制，以减少存储使用和加速计算，得到的结果无法进行 loss.backward()。</li><li>torch.nn.CrossEntropyLoss 的输入不需要经过 Softmax。torch.nn.CrossEntropyLoss 等价于 torch.nn.functional.log_softmax + torch.nn.NLLLoss。</li><li>loss.backward() 前用 optimizer.zero_grad() 清除累积梯度。optimizer.zero_grad() 和 model.zero_grad() 效果一样。</li></ul><h3 id="性能与调试部分"><a href="#性能与调试部分" class="headerlink" title="性能与调试部分"></a><strong>性能与调试部分</strong></h3><ul><li>torch.utils.data.DataLoader 中尽量设置 pin_memory&#x3D;True，对特别小的数据集如 MNIST 设置 pin_memory&#x3D;False 反而更快一些。num_workers 的设置需要在实验中找到最快的取值。</li><li>用 del 及时删除不用的中间变量，节约 GPU 存储。</li><li>使用 inplace 操作可节约 GPU 存储，如</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = torch.nn.functional.relu(x, inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><ul><li>减少 CPU 和 GPU 之间的数据传输。例如如果你想知道一个 epoch 中每个 mini-batch 的 loss 和准确率，先将它们累积在 GPU 中等一个 epoch 结束之后一起传输回 CPU 会比每个 mini-batch 都进行一次 GPU 到 CPU 的传输更快。</li><li>使用半精度浮点数 half() 会有一定的速度提升，具体效率依赖于 GPU 型号。需要小心数值精度过低带来的稳定性问题。</li><li>时常使用 assert tensor.size() &#x3D;&#x3D; (N, D, H, W) 作为调试手段，确保张量维度和你设想中一致。</li><li>除了标记 y 外，尽量少使用一维张量，使用 n*1 的二维张量代替，可以避免一些意想不到的一维张量计算结果。</li><li>统计代码各部分耗时</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">with</span> torch.autograd.profiler.profile(enabled=<span class="hljs-literal">True</span>, use_cuda=<span class="hljs-literal">False</span>) <span class="hljs-keyword">as</span> profile:<br>    ...<br><span class="hljs-built_in">print</span>(profile)<br></code></pre></td></tr></table></figure><p>或者在命令行运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m torch.utils.bottleneck main.py<br></code></pre></td></tr></table></figure><p><strong>参考资料</strong></p><ul><li>PyTorch 官方代码：pytorch&#x2F;examples (<a href="https://link.zhihu.com/?target=https://github.com/pytorch/examples">https://link.zhihu.com/?target=https%3A//github.com/pytorch/examples</a>)</li><li>PyTorch 论坛：PyTorch Forums (<a href="https://link.zhihu.com/?target=https://discuss.pytorch.org/latest?order=views">https://link.zhihu.com/?target=https%3A//discuss.pytorch.org/latest%3Forder%3Dviews</a>)</li><li>PyTorch 文档：<a href="http://pytorch.org/docs/stable/index.html">http://pytorch.org/docs/stable/index.html</a> (<a href="https://link.zhihu.com/?target=http://pytorch.org/docs/stable/index.html">https://link.zhihu.com/?target=http%3A//pytorch.org/docs/stable/index.html</a>)</li><li>其他基于 PyTorch 的公开实现代码，来源互联网。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码摘抄 </tag>
            
            <tag> Pytorch </tag>
            
            <tag> DL </tag>
            
            <tag> 更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多路电梯算法调度的解决思路——类设计角度</title>
      <link href="/2020/06/21/%E5%A4%9A%E8%B7%AF%E7%94%B5%E6%A2%AF%E7%AE%97%E6%B3%95%E8%B0%83%E5%BA%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF%E2%80%94%E2%80%94%E7%B1%BB%E8%AE%BE%E8%AE%A1%E8%A7%92%E5%BA%A6/"/>
      <url>/2020/06/21/%E5%A4%9A%E8%B7%AF%E7%94%B5%E6%A2%AF%E7%AE%97%E6%B3%95%E8%B0%83%E5%BA%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF%E2%80%94%E2%80%94%E7%B1%BB%E8%AE%BE%E8%AE%A1%E8%A7%92%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>这学期C++接触得有点多，为熟练类设计，做了一个多路电梯调度算法。</p><p>总的来说，这份代码主要包含调度核心算法、乘客行为设计、电梯动作函数设计等，最终完成了一个十路电梯的群控仿真算法系统。同时为了增强了整个电梯系统的控制简便性和高效性，还将电梯进行分组。也设计了不同时间段（早晚高峰、平时）的算法仿真流程。</p><p>OPP其实是一种思想，所以本博客的核心还是在于边写边继续加深面向对象编程的理解吧。</p><h2 id="整体代码框架"><a href="#整体代码框架" class="headerlink" title="整体代码框架"></a>整体代码框架</h2><p><img src="/2020/06/21/%E5%A4%9A%E8%B7%AF%E7%94%B5%E6%A2%AF%E7%AE%97%E6%B3%95%E8%B0%83%E5%BA%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF%E2%80%94%E2%80%94%E7%B1%BB%E8%AE%BE%E8%AE%A1%E8%A7%92%E5%BA%A6/kuangjia.png"></p><h2 id="整体调度思路"><a href="#整体调度思路" class="headerlink" title="整体调度思路"></a>整体调度思路</h2><p>总的来说，调度算法采用了短寻找楼层时间优先（SSTF-Shortest Seek Time First）算法，其分为<strong>内部调度</strong>和<strong>外部调度</strong>两个部分，最终形成每部电梯的任务库，每部电梯根据自己的任务库进行合理运行。</p><p><strong>内部调度</strong>中，电梯内部的楼层按钮被按下时，该任务即被送入此电梯的任务库中，等待被完成。</p><p><strong>外部调度</strong>则较为复杂，总体上来看，外部调度时通过计算电梯与外部请求发生的楼层距离，选择合理的、距离最近的电梯响应请求。如果所有的电梯都不是“合理的”，那么该请求被送入等待队列。其中，电梯的状态分为三类：1. 空闲电梯（“电梯空闲”状态）2. 上升电梯（“上升”状态和“上升中停靠”状态）3. 下降电梯（“下降”状态和“下降中停靠”状态）当外部请求发生时，调度算法将根据请求发生的楼层和请求的方向（向上或向下）从上面的三种状态的电梯中选择两种，从里面进行挑选。其中，“空闲电梯”是会一直被选中的，剩下一种要根据请求的方向确定，上升的请求就选中“上升电梯”，下降的请求就选中“下降电梯”。</p><p>确定候选电梯后需要对选出的可行电梯进行进一步筛选，筛选的原则是根据当前电梯的位置和乘客的位置赋予每部可行电梯一个权重，权重综合代表电梯和乘客之间的距离以及电梯目前的承载人数等，权重越大代表该部电梯越能快速接到该用户，最后将该乘客送入权重最大的电梯的任务库。</p><p>电梯类的<strong>状态转移图</strong>大致为：</p><p><img src="/2020/06/21/%E5%A4%9A%E8%B7%AF%E7%94%B5%E6%A2%AF%E7%AE%97%E6%B3%95%E8%B0%83%E5%BA%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF%E2%80%94%E2%80%94%E7%B1%BB%E8%AE%BE%E8%AE%A1%E8%A7%92%E5%BA%A6/b.png"></p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><h3 id="主函数Main-cpp"><a href="#主函数Main-cpp" class="headerlink" title="主函数Main.cpp"></a>主函数Main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// lift.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElevatorLift.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Passenger.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Group.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//设定全局变量</span><br>ElevatorLift  * E[<span class="hljs-number">10</span>];                <span class="hljs-comment">//电梯指针 </span><br>Passenger     * P[<span class="hljs-number">1000</span>];              <span class="hljs-comment">//乘客指针</span><br>Group         * G[<span class="hljs-number">5</span>];                 <span class="hljs-comment">//电梯组指针</span><br>Time Nowtime;<br><span class="hljs-type">int</span> K = <span class="hljs-number">12</span>;                   <span class="hljs-comment">//电梯的最大载客数量         10&lt;K&lt;18</span><br><span class="hljs-type">int</span> N = <span class="hljs-number">400</span>;                 <span class="hljs-comment">//乘客数量                   0&lt;N&lt;1000</span><br><span class="hljs-type">int</span> M = <span class="hljs-number">1</span>;                  <span class="hljs-comment">//初始等待时间    （分钟）   0&lt;M&lt;10</span><br><span class="hljs-type">int</span> L = <span class="hljs-number">5</span>;                   <span class="hljs-comment">//乘客的乘梯次数             1&lt;L&lt;10</span><br><span class="hljs-type">int</span> S = <span class="hljs-number">1</span>;                   <span class="hljs-comment">//电梯速度    单位 :秒/层    1&lt;s&lt;5</span><br><span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;                   <span class="hljs-comment">//乘客上下电梯的时间         2&lt;T&lt;10</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GuideInput</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">over</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">summary</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsOver</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">srand</span>((<span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br><span class="hljs-built_in">GuideInput</span>();<br>SYSTEMTIME NowTime;<br><span class="hljs-built_in">GetLocalTime</span>(&amp;NowTime);<br>Nowtime.<span class="hljs-built_in">set</span>(NowTime.wHour, NowTime.wMinute, NowTime.wSecond);<br>E[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ElevatorLift</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ElevatorLift</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E1</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E1</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E2</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">5</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E2</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">6</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E3</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">7</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E3</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">8</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E4</span>(S, K, T, &amp;Nowtime);<br>E[<span class="hljs-number">9</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E4</span>(S, K, T, &amp;Nowtime);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)   <span class="hljs-comment">//10台电梯分为5组</span><br>&#123;<br>G[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Group</span>(E[<span class="hljs-number">2</span>*i], E[<span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)   <span class="hljs-comment">//所有乘客设置为Passenger类</span><br>&#123;<br>P[i] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Passenger</span>(M, L, E, &amp;Nowtime);<br>&#125;<br><br><span class="hljs-function">VOID CALLBACK <span class="hljs-title">myTimerProc</span><span class="hljs-params">(HWND hwnd, UINT uMsg, UINT idEvent, DWORD dwTime)</span></span>;<br>MSG msg;<br><span class="hljs-comment">//设定定时器，定时执行任务</span><br><span class="hljs-built_in">SetTimer</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>, (TIMERPROC)myTimerProc);<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//主循环</span><br><span class="hljs-keyword">while</span> (flag)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsOver</span>())<br>&#123;<br>flag = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">Show</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetMessage</span>(&amp;msg, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-built_in">TranslateMessage</span>(&amp;msg);<br><span class="hljs-built_in">DispatchMessage</span>(&amp;msg);<br>&#125;<br><br>&#125;<br><span class="hljs-built_in">KillTimer</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">summary</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function">VOID CALLBACK <span class="hljs-title">myTimerProc</span><span class="hljs-params">(HWND hwnd, UINT uMsg, UINT idEvent, DWORD dwTime)</span></span><br><span class="hljs-function"></span>&#123;<br>Nowtime = Nowtime + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//电梯组行动</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>G[i]-&gt;<span class="hljs-built_in">action</span>();<br>&#125;<br><span class="hljs-comment">// 乘客活动</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br>P[i]-&gt;<span class="hljs-built_in">action</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GuideInput</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入乘客数量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; N;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入电梯的最大载客数量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; K;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入初始等待时间：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; M;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入乘客的乘梯次数：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; L;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入电梯的速度（单位:秒/层）：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; S;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入每名乘客上下电梯的时间  ：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; T;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;当前时间&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d:%d\n&quot;</span>, Nowtime.hour, Nowtime.minute, Nowtime.second);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;乘客ID   当前状态    当前楼层    目标楼层   组号   电梯号   剩余乘梯次数 \n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d         %s         %2d          %2d       %2d       %2d        %2d\n&quot;</span><br>, i + <span class="hljs-number">1</span>, P[i]-&gt;<span class="hljs-built_in">GetStatus</span>(), P[i]-&gt;<span class="hljs-built_in">GetNowFloor</span>(), P[i]-&gt;<span class="hljs-built_in">GetNextFloor</span>(), P[i]-&gt;<span class="hljs-built_in">Getgroup</span>(), P[i]-&gt;<span class="hljs-built_in">Getwhich</span>(), P[i]-&gt;<span class="hljs-built_in">Gettimes</span>());<br><span class="hljs-comment">//printf(&quot;    下一次乘梯时间：%d:%d:%d\n &quot;, P[i]-&gt;NextTime.hour, P[i]-&gt;NextTime.minute, P[i]-&gt;NextTime.second);</span><br><br>&#125;<br> <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------------------------------------------------\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电梯号  当前状态 当前楼层  目标楼层  当前人数：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %2d       %4s       %2d        %2d       %2d\n&quot;</span><br>, i + <span class="hljs-number">1</span>, E[i]-&gt;<span class="hljs-built_in">GetStatus</span>(), E[i]-&gt;<span class="hljs-built_in">GetNowFloor</span>(), E[i]-&gt;<span class="hljs-built_in">GetNextFloor</span>(), E[i]-&gt;<span class="hljs-built_in">Getpeople</span>());<br><br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">over</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d号电梯：\n当前状态：%s   当前楼层：%d    目标楼层:%d  当前人数：%d\n&quot;</span>, i + <span class="hljs-number">1</span>, E[i]-&gt;<span class="hljs-built_in">GetStatus</span>(), E[i]-&gt;<span class="hljs-built_in">GetNowFloor</span>(), E[i]-&gt;<span class="hljs-built_in">GetNextFloor</span>(), E[i]-&gt;<span class="hljs-built_in">Getpeople</span>());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d号乘客：\n当前状态: %s   当前楼层: %d    目标楼层:%d   次数：%d\n&quot;</span>, i, P[i]-&gt;<span class="hljs-built_in">GetStatus</span>(), P[i]-&gt;<span class="hljs-built_in">GetNowFloor</span>(), P[i]-&gt;<span class="hljs-built_in">GetNextFloor</span>(), P[i]-&gt;<span class="hljs-built_in">Gettimes</span>());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;组号：%d ，电梯号 ：%d\n&quot;</span>, P[i]-&gt;<span class="hljs-built_in">Getgroup</span>(), P[i]-&gt;<span class="hljs-built_in">Getwhich</span>());<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;    下一次乘梯时间：%d:%d:%d\n &quot;</span>, P[i]-&gt;NextTime.hour, P[i]-&gt;NextTime.minute, P[i]-&gt;NextTime.second);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**********************************************************************\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">summary</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;当前时间&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d:%d\n&quot;</span>, Nowtime.hour, Nowtime.minute, Nowtime.second);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电梯号  忙碌时间(秒)  空闲时间(秒)    \n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d        %3d            %3d\n&quot;</span>, i + <span class="hljs-number">1</span>, E[i]-&gt;<span class="hljs-built_in">Getbusy</span>(), E[i]-&gt;<span class="hljs-built_in">Getvacant</span>());<br><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;**********************************************************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;乘客ID   等待时间（秒） \n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d        %3d\n&quot;</span>, i + <span class="hljs-number">1</span>, P[i]-&gt;<span class="hljs-built_in">GetTotal</span>());<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsOver</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (P[i]-&gt;<span class="hljs-built_in">getstatus</span>() !=<span class="hljs-number">3</span> )<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="电梯类"><a href="#电梯类" class="headerlink" title="电梯类"></a>电梯类</h2><h3 id="ElevatorLift-h"><a href="#ElevatorLift-h" class="headerlink" title="ElevatorLift.h"></a>ElevatorLift.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Time.h&quot;</span></span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> Max = <span class="hljs-number">40</span>;   <span class="hljs-comment">//楼层数目</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElevatorLift</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ElevatorLift</span>();<br><span class="hljs-built_in">ElevatorLift</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time *tm);<br>~<span class="hljs-built_in">ElevatorLift</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">UpdateNowFloor</span><span class="hljs-params">()</span></span>;          <span class="hljs-comment">//更新当前电梯所在楼层</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ChangeStatus</span><span class="hljs-params">()</span></span>;            <span class="hljs-comment">//改变电梯运行状态</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>;                     <span class="hljs-comment">//电梯运行</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">UpdateDestination</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//更新下一站的目的楼层</span><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">call</span><span class="hljs-params">()</span></span>;                    <span class="hljs-comment">//查看是否有人呼叫电梯</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsTake</span><span class="hljs-params">()</span></span>;                  <span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-type">char</span> * <span class="hljs-title">GetStatus</span><span class="hljs-params">()</span></span>;             <span class="hljs-comment">//得到现在状态函数</span><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">GetNextFloor</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">GetNowFloor</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">Getpeople</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">Getbusy</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">Getvacant</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Status</span>  <span class="hljs-comment">// 电梯状态</span><br>&#123;<br>STOP,    <span class="hljs-comment">// 停止  </span><br>UP,      <span class="hljs-comment">// 向上运行</span><br>DOWN,    <span class="hljs-comment">// 向下运行</span><br>UPSTOP,  <span class="hljs-comment">// 上行过程中的暂停</span><br>DOWNSTOP <span class="hljs-comment">// 下行过程中的暂停</span><br>&#125;;<br>Status status;<br><span class="hljs-type">int</span>     NextFloor;<span class="hljs-comment">//电梯下一次需要停留的楼层</span><br><span class="hljs-type">int</span>     NowFloor;<span class="hljs-comment">//当前电梯所在楼层</span><br><span class="hljs-type">int</span>     Up[Max];<span class="hljs-comment">//电梯外部，记录乘客上行呼叫的楼层   Up[i]的数值代表第i层上行的呼叫电梯的乘客数量</span><br><span class="hljs-type">int</span>     Down[Max];    <span class="hljs-comment">//电梯外部，记录乘客下行呼叫的楼层   Down[i]的数值代表第i层下行的呼叫电梯的乘客数量</span><br><span class="hljs-type">int</span>     InsideUp[Max];<span class="hljs-comment">//电梯内部，设置乘客上行目的楼层的数组</span><br><span class="hljs-type">int</span>     InsideDown[Max];<span class="hljs-comment">//电梯内部，设置乘客下行目的楼层的数组</span><br><span class="hljs-type">int</span>     people;<span class="hljs-comment">//当前电梯的人数</span><br><span class="hljs-type">int</span>     capacity;<span class="hljs-comment">//当前电梯的容量</span><br><span class="hljs-type">float</span>   nowfloor;               <span class="hljs-comment">//用于计算当前楼层</span><br><span class="hljs-type">float</span>   speed;                  <span class="hljs-comment">//电梯当前运行的速度</span><br><span class="hljs-type">long</span>vacant;<span class="hljs-comment">//电梯空闲时间</span><br><span class="hljs-type">long</span>busy;    <span class="hljs-comment">//电梯运行的时间</span><br>TimeNextStart;<span class="hljs-comment">//电梯停靠以后下一次的启动时间</span><br>TimeStart;                  <span class="hljs-comment">//电梯启动的时间</span><br>TimeOver;                   <span class="hljs-comment">//电梯停止的时间</span><br>Time* nowtime;              <span class="hljs-comment">//当前时间指针</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> StopTime;<span class="hljs-comment">//电梯停靠的时间</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Passenger</span>;    <span class="hljs-comment">//将自身数据提供给乘客</span><br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];                   <span class="hljs-comment">//用于存放当前状态的</span><br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E1</span> :<span class="hljs-keyword">public</span> ElevatorLift      <span class="hljs-comment">//25-40楼层的电梯</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">E1</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time *tm);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E2</span> :<span class="hljs-keyword">public</span> ElevatorLift      <span class="hljs-comment">//1-25楼层的电梯</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">E2</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time *tm);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E3</span> :<span class="hljs-keyword">public</span> ElevatorLift     <span class="hljs-comment">//偶数楼层的电梯</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">E3</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time *tm);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E4</span> :<span class="hljs-keyword">public</span> ElevatorLift    <span class="hljs-comment">//奇数楼层的电梯</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">E4</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time *tm);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="ElevatorLift-cpp"><a href="#ElevatorLift-cpp" class="headerlink" title="ElevatorLift.cpp"></a>ElevatorLift.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//#include &quot;pch.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElevatorLift.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br>ElevatorLift::<span class="hljs-built_in">ElevatorLift</span>()<br>&#123;<br>&#125;<br>ElevatorLift::<span class="hljs-built_in">ElevatorLift</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time *tm)<br>&#123;<br>status = STOP;                       <span class="hljs-comment">//初始电梯停止</span><br>NowFloor = (<span class="hljs-built_in">rand</span>() % (<span class="hljs-number">40</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;  <span class="hljs-comment">//随机生成初始电梯停靠位置 </span><br>NextFloor = NowFloor;                <span class="hljs-comment">//电梯停止时目标楼层与当前楼层一致</span><br>nowfloor = NowFloor;                 <span class="hljs-comment">//用于计算的位置</span><br>speed = <span class="hljs-number">1</span> / (<span class="hljs-type">float</span>)S;                <span class="hljs-comment">//设置速度  S的单位为秒/层   speed 单位为 层/秒</span><br>StopTime = T;                        <span class="hljs-comment">//每个乘客上下电梯所需时间  </span><br>capacity = K;                        <span class="hljs-comment">//电梯的容量</span><br>people = <span class="hljs-number">0</span>;                          <span class="hljs-comment">//当前电梯的人数</span><br>vacant = <span class="hljs-number">0</span>;                          <span class="hljs-comment">//电梯空闲时间</span><br>busy = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//电梯运行时间</span><br>nowtime = tm;<br>Over = *nowtime;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">41</span>; i++)<br>&#123;<br>Up[i] = <span class="hljs-number">0</span>;<br>Down[i] = <span class="hljs-number">0</span>;<br>InsideUp[i] = <span class="hljs-number">0</span>;<br>InsideDown[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br>&#125;<br><br><br>ElevatorLift::~<span class="hljs-built_in">ElevatorLift</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::action</span><span class="hljs-params">()</span> <span class="hljs-comment">// 电梯行为</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">UpdateNowFloor</span>();       <span class="hljs-comment">// 更新当前电梯所在楼层</span><br><span class="hljs-built_in">UpdateDestination</span>();    <span class="hljs-comment">// 更新电梯下一站的目的楼层</span><br><span class="hljs-built_in">ChangeStatus</span>();         <span class="hljs-comment">// 判断改变当前电梯状态</span><br><span class="hljs-built_in">Run</span>();                  <span class="hljs-comment">// 电梯运行</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span> * <span class="hljs-title">ElevatorLift::GetStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">switch</span> (status)<br>&#123;<br><span class="hljs-keyword">case</span> UP:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;上&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> UPSTOP:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;上停&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> DOWN:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;下&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> DOWNSTOP:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;下停&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> STOP:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;停&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ElevatorLift::GetNextFloor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> NextFloor;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ElevatorLift::GetNowFloor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> NowFloor;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ElevatorLift::Getpeople</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> people;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ElevatorLift::Getbusy</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> busy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ElevatorLift::Getvacant</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> vacant;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>Up[floor] += n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>Down[floor] += n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>InsideUp[floor] += n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>InsideDown[floor] += n;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::UpdateNowFloor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>NowFloor = (<span class="hljs-type">int</span>)nowfloor;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::UpdateDestination</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (status)<br>&#123;<br><span class="hljs-keyword">case</span> UP:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = NowFloor; i &lt; Max; i++)   <span class="hljs-comment">//从当前楼层上一层开始查询，如果有停靠记录，取最近的楼层为目标楼层</span><br>&#123;<br><span class="hljs-keyword">if</span> (Up[i] || InsideUp[i])<br>&#123;<br>NextFloor = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> UPSTOP:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = NowFloor; i &lt; Max; i++)   <span class="hljs-comment">//从当前楼层开始查询，如果有停靠记录，取最近的楼层为目标楼层</span><br>&#123;<br><span class="hljs-keyword">if</span> (Up[i] || InsideUp[i] || Down[i])<br>&#123;<br>NextFloor = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> DOWN:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = NowFloor; i &gt; <span class="hljs-number">0</span>; i--)   <span class="hljs-comment">//从当前楼层开始查询，如果有停靠记录，取最近的楼层为目标楼层</span><br>&#123;<br><span class="hljs-keyword">if</span> (Down[i] || InsideDown[i])<br>&#123;<br>NextFloor = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> DOWNSTOP:<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = NowFloor; i &gt; <span class="hljs-number">0</span>; i--)   <span class="hljs-comment">//从当前楼层开始查询，如果有停靠记录，取最近的楼层为目标楼层</span><br>&#123;<br><span class="hljs-keyword">if</span> (Down[i] || InsideDown[i] || Up[i])<br>&#123;<br>NextFloor = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> STOP:<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsTake</span>())                   <span class="hljs-comment">//如果电梯停下来，以后还有目标楼层</span><br>&#123;<br>NextFloor = <span class="hljs-built_in">IsTake</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;                                <span class="hljs-comment">//没人乘坐的话，查询呼叫</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">call</span>())                  <span class="hljs-comment">//如果有人呼叫电梯</span><br>NextFloor = <span class="hljs-built_in">call</span>();<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::ChangeStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (status)<br>&#123;<br><span class="hljs-keyword">case</span> STOP:                         <span class="hljs-comment">//状态为停止，则检查是否改变状态到“上”或“下”</span><br><br><span class="hljs-keyword">if</span> (NextFloor != NowFloor)    <span class="hljs-comment">//如果发现目标楼层与当前楼层不一致，则需要启动电梯</span><br>&#123;<br><span class="hljs-keyword">if</span> (NextFloor - NowFloor &gt; <span class="hljs-number">0</span>)<br>&#123;<br>status = UP;<br>vacant += (*nowtime - Over);<br>Start = *nowtime;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>status = DOWN;<br>vacant += (*nowtime - Over);<br>Start = *nowtime;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> UP:          <span class="hljs-comment">//状态为向上运行，则检查是否改变状态到“上停”</span><br><span class="hljs-keyword">if</span> (NextFloor == NowFloor)     <span class="hljs-comment">//如果到达停靠楼层</span><br>&#123;<br>status = UPSTOP;<br>NextStart = (*nowtime + (<span class="hljs-number">1</span> + Up[NowFloor] + InsideUp[NowFloor])*StopTime);  <span class="hljs-comment">//计算停留时间</span><br>InsideUp[NowFloor] = <span class="hljs-number">0</span>;                                               <span class="hljs-comment">//乘客上下电梯</span><br><br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> UPSTOP:<br><span class="hljs-keyword">if</span> (NextStart.hour == nowtime-&gt;hour&amp;&amp;NextStart.minute == nowtime-&gt;minute&amp;&amp;NextStart.second == nowtime-&gt;second)<br>&#123;<br><span class="hljs-keyword">if</span> (NextFloor &gt; NowFloor)<br>&#123;<br>status = UP;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>status = STOP;<br>busy += (*nowtime - Start);<br>Over = *nowtime;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> DOWN:<br><span class="hljs-keyword">if</span> (NextFloor == NowFloor)     <span class="hljs-comment">//如果到达停靠楼层</span><br>&#123;<br>status = DOWNSTOP;<br>NextStart = (*nowtime + (<span class="hljs-number">1</span> + Down[NowFloor] + InsideDown[NowFloor])*StopTime);  <span class="hljs-comment">//计算停留时间</span><br>InsideDown[NowFloor] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> DOWNSTOP:<br><br><span class="hljs-keyword">if</span> (NextStart.hour == nowtime-&gt;hour&amp;&amp;NextStart.minute == nowtime-&gt;minute&amp;&amp;NextStart.second == nowtime-&gt;second)<br>&#123;<br><span class="hljs-keyword">if</span> (NextFloor &gt;= NowFloor)<br>&#123;<br>status = STOP;<br>busy += (*nowtime - Start);<br>Over = *nowtime;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>status = DOWN;<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ElevatorLift::Run</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><br><span class="hljs-keyword">if</span> (status == UP)      <span class="hljs-comment">//如果电梯向上运行</span><br>&#123;<br><br>nowfloor += speed;    <span class="hljs-comment">//speed为电梯每秒的运行速度</span><br><span class="hljs-comment">//int temp = 0;</span><br><span class="hljs-comment">//for (int i = NowFloor; i &lt; 41; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//temp += InsideUp[i];</span><br><span class="hljs-comment">//&#125;//统计人数</span><br><span class="hljs-comment">//people = temp;</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status == DOWN)   <span class="hljs-comment">//向下运行</span><br>&#123;<br>nowfloor -= speed;<span class="hljs-comment">//</span><br><span class="hljs-comment">//int temp = 0;</span><br><span class="hljs-comment">//for (int i = NowFloor; i &gt; 0; i--)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//temp += InsideDown[i];</span><br><span class="hljs-comment">//&#125;//统计人数</span><br><span class="hljs-comment">//people = temp;</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status == UPSTOP)<br>&#123;<br><span class="hljs-comment">//int temp = 0;</span><br><span class="hljs-comment">//for (int i = NowFloor; i &lt; 41; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//temp += InsideUp[i];</span><br><span class="hljs-comment">//&#125;//统计人数</span><br><span class="hljs-comment">//people = temp;                            // 1.电梯制动</span><br><span class="hljs-comment">// 2.使电梯位置与楼层地面相平</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status == DOWNSTOP)   <span class="hljs-comment">//向下运行</span><br>&#123;<br><span class="hljs-comment">//int temp = 0;</span><br><span class="hljs-comment">//for (int i = NowFloor; i &gt; 0; i--)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//temp += InsideDown[i];</span><br><span class="hljs-comment">//&#125;//统计人数</span><br><span class="hljs-comment">//people = temp;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-type">int</span> ElevatorLift::<span class="hljs-built_in">call</span>()<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; Max; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (Up[i] || Down[i])<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ElevatorLift::IsTake</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; Max; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (InsideUp[i] || InsideDown[i])<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br><br>E1::<span class="hljs-built_in">E1</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time * tm)<br>&#123;<br>status = STOP;                       <span class="hljs-comment">//初始电梯停止</span><br>NowFloor = (<span class="hljs-built_in">rand</span>() % (<span class="hljs-number">40</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 随机生成电梯停靠位置 </span><br>NextFloor = NowFloor;                <span class="hljs-comment">//电梯停止时目标楼层与当前楼层一致</span><br>nowfloor = NowFloor;                 <span class="hljs-comment">//用于计算的位置</span><br>speed = <span class="hljs-number">1</span> / (<span class="hljs-type">float</span>)S;                  <span class="hljs-comment">//设置速度  s的单位为秒/层   speed 单位为 层/秒</span><br>StopTime = T;                        <span class="hljs-comment">// 每个乘客上下电梯的时间  </span><br>capacity = K;                        <span class="hljs-comment">//电梯的容量</span><br>people = <span class="hljs-number">0</span>;                          <span class="hljs-comment">//当前电梯的人数</span><br>vacant = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//电梯空闲时间</span><br>busy = <span class="hljs-number">0</span>;                              <span class="hljs-comment">//电梯运行时间</span><br>nowtime = tm;<br>Over = *nowtime;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">41</span>; i++)<br>&#123;<br><br>Up[i] = <span class="hljs-number">0</span>;<br>Down[i] = <span class="hljs-number">0</span>;<br>InsideUp[i] = <span class="hljs-number">0</span>;<br>InsideDown[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br>E2::<span class="hljs-built_in">E2</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time * tm)<br>&#123;<br>status = STOP;                       <span class="hljs-comment">//初始电梯停止</span><br>NowFloor = (<span class="hljs-built_in">rand</span>() % (<span class="hljs-number">40</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 随机生成电梯停靠位置 </span><br>NextFloor = NowFloor;                <span class="hljs-comment">//电梯停止时目标楼层与当前楼层一致</span><br>nowfloor = NowFloor;                 <span class="hljs-comment">//用于计算的位置</span><br>speed = <span class="hljs-number">1</span> / (<span class="hljs-type">float</span>)S;                  <span class="hljs-comment">//设置速度  s的单位为秒/层   speed 单位为 层/秒</span><br>StopTime = T;                        <span class="hljs-comment">// 每个乘客上下电梯的时间  </span><br>capacity = K;                        <span class="hljs-comment">//电梯的容量</span><br>people = <span class="hljs-number">0</span>;                          <span class="hljs-comment">//当前电梯的人数</span><br>vacant = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//电梯空闲时间</span><br>busy = <span class="hljs-number">0</span>;                              <span class="hljs-comment">//电梯运行时间</span><br>nowtime = tm;<br>Over = *nowtime;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">41</span>; i++)<br>&#123;<br><br>Up[i] = <span class="hljs-number">0</span>;<br>Down[i] = <span class="hljs-number">0</span>;<br>InsideUp[i] = <span class="hljs-number">0</span>;<br>InsideDown[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br>E3::<span class="hljs-built_in">E3</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time * tm)<br>&#123;<br>status = STOP;                       <span class="hljs-comment">//初始电梯停止</span><br>NowFloor = (<span class="hljs-built_in">rand</span>() % (<span class="hljs-number">40</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 随机生成电梯停靠位置 </span><br>NextFloor = NowFloor;                <span class="hljs-comment">//电梯停止时目标楼层与当前楼层一致</span><br>nowfloor = NowFloor;                 <span class="hljs-comment">//用于计算的位置</span><br>speed = <span class="hljs-number">1</span> / (<span class="hljs-type">float</span>)S;                  <span class="hljs-comment">//设置速度  s的单位为秒/层   speed 单位为 层/秒</span><br>StopTime = T;                        <span class="hljs-comment">// 每个乘客上下电梯的时间  </span><br>capacity = K;                        <span class="hljs-comment">//电梯的容量</span><br>people = <span class="hljs-number">0</span>;                          <span class="hljs-comment">//当前电梯的人数</span><br>vacant = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//电梯空闲时间</span><br>busy = <span class="hljs-number">0</span>;                              <span class="hljs-comment">//电梯运行时间</span><br>nowtime = tm;<br>Over = *nowtime;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">41</span>; i++)<br>&#123;<br><br>Up[i] = <span class="hljs-number">0</span>;<br>Down[i] = <span class="hljs-number">0</span>;<br>InsideUp[i] = <span class="hljs-number">0</span>;<br>InsideDown[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br>E4::<span class="hljs-built_in">E4</span>(<span class="hljs-type">int</span> S, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> T, Time* tm)<br>&#123;<br>status = STOP;                       <span class="hljs-comment">//初始电梯停止</span><br>NowFloor = (<span class="hljs-built_in">rand</span>() % (<span class="hljs-number">40</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 随机生成电梯停靠位置 </span><br>NextFloor = NowFloor;                <span class="hljs-comment">//电梯停止时目标楼层与当前楼层一致</span><br>nowfloor = NowFloor;                 <span class="hljs-comment">//用于计算的位置</span><br>speed = <span class="hljs-number">1</span> / (<span class="hljs-type">float</span>)S;                  <span class="hljs-comment">//设置速度  s的单位为秒/层   speed 单位为 层/秒</span><br>StopTime = T;                        <span class="hljs-comment">// 每个乘客上下电梯的时间  </span><br>capacity = K;                        <span class="hljs-comment">//电梯的容量</span><br>people = <span class="hljs-number">0</span>;                          <span class="hljs-comment">//当前电梯的人数</span><br>vacant = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//电梯空闲时间</span><br>busy = <span class="hljs-number">0</span>;                              <span class="hljs-comment">//电梯运行时间</span><br>nowtime = tm;<br>Over = *nowtime;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">41</span>; i++)<br>&#123;<br><br>Up[i] = <span class="hljs-number">0</span>;<br>Down[i] = <span class="hljs-number">0</span>;<br>InsideUp[i] = <span class="hljs-number">0</span>;<br>InsideDown[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E1::SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> ((floor &lt;= <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-number">25</span> &lt;= floor) || floor == <span class="hljs-number">1</span>)<br>&#123;<br>Up[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E1::SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> ((floor &lt;= <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-number">25</span> &lt;= floor) || floor == <span class="hljs-number">1</span>)<br>&#123;<br>Down[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E1::SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> ((floor &lt;= <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-number">25</span> &lt;= floor) || floor == <span class="hljs-number">1</span>)<br>&#123;<br>InsideUp[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E1::SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> ((floor &lt;= <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-number">25</span> &lt;= floor) || floor == <span class="hljs-number">1</span>)<br>&#123;<br>InsideDown[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E2::SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor &lt;= <span class="hljs-number">25</span> &amp;&amp; <span class="hljs-number">1</span> &lt;= floor)<br>&#123;<br>Up[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E2::SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor &lt;= <span class="hljs-number">25</span> &amp;&amp; <span class="hljs-number">1</span> &lt;= floor)<br>&#123;<br>Down[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E2::SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor &lt;= <span class="hljs-number">25</span> &amp;&amp; <span class="hljs-number">1</span> &lt;= floor)<br>&#123;<br>InsideUp[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E2::SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor &lt;= <span class="hljs-number">25</span> &amp;&amp; <span class="hljs-number">1</span> &lt;= floor)<br>&#123;<br>InsideDown[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E3::SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> ==  <span class="hljs-number">0</span> || floor == <span class="hljs-number">1</span>)<br>&#123;<br>Up[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E3::SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || floor==<span class="hljs-number">1</span>)<br>&#123;<br>Down[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E3::SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || floor == <span class="hljs-number">1</span>)<br>&#123;<br>InsideUp[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E3::SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || floor == <span class="hljs-number">1</span>)<br>&#123;<br>InsideDown[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E4::SetUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>&#123;<br>Up[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E4::SetDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>&#123;<br>Down[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E4::SetInsideUp</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>&#123;<br>InsideUp[floor] += n;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">E4::SetInsideDown</span><span class="hljs-params">(<span class="hljs-type">int</span> floor, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (floor % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>&#123;<br>InsideDown[floor] += n;<br>&#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h2 id="乘客类"><a href="#乘客类" class="headerlink" title="乘客类"></a>乘客类</h2><h3 id="Passenger-h"><a href="#Passenger-h" class="headerlink" title="Passenger.h"></a>Passenger.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Time.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElevatorLift.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Group.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Passenger</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Passenger</span>();<br><span class="hljs-built_in">Passenger</span>(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> L, ElevatorLift * E[], Time *tm);    <span class="hljs-comment">//构造函数</span><br>~<span class="hljs-built_in">Passenger</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//乘客的活动</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Select</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;group, <span class="hljs-type">int</span> &amp;which)</span></span>;                      <span class="hljs-comment">//决策选乘的电梯组</span><br><span class="hljs-function"><span class="hljs-type">char</span> * <span class="hljs-title">GetStatus</span><span class="hljs-params">()</span></span>;                                      <span class="hljs-comment">//get放法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getstatus</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNextFloor</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNowFloor</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Getwhich</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Gettimes</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Getgroup</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetTotal</span><span class="hljs-params">()</span></span>;<br>Time   NextTime;                      <span class="hljs-comment">//下一次乘梯时间</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Status</span><br>&#123;<br>TAKE,     <span class="hljs-comment">// 乘坐  </span><br>LEAVE,    <span class="hljs-comment">// 离开</span><br>WAIT,     <span class="hljs-comment">// 等待</span><br>OVER      <span class="hljs-comment">// 停止乘梯活动</span><br>&#125;;<br>Status status;                        <span class="hljs-comment">//乘客状态</span><br><span class="hljs-type">int</span>    WaitTime;                      <span class="hljs-comment">//乘客初次等待时间</span><br><span class="hljs-type">int</span>    NowFloor;                      <span class="hljs-comment">//当前楼层</span><br><span class="hljs-type">int</span>    NextFloor;                     <span class="hljs-comment">//目标楼层</span><br><span class="hljs-type">int</span>    which;                         <span class="hljs-comment">//乘坐的电梯</span><br><span class="hljs-type">int</span>    group;                         <span class="hljs-comment">//选定的组号</span><br><span class="hljs-type">long</span>   Total;                         <span class="hljs-comment">//总计等待时间   （单位：秒)</span><br><span class="hljs-type">char</span>   str[<span class="hljs-number">10</span>];                       <span class="hljs-comment">//存放电梯状态的字符串</span><br>Time   *nowtime;                      <span class="hljs-comment">//当前时间指针</span><br>ElevatorLift * e[<span class="hljs-number">10</span>];                 <span class="hljs-comment">//电梯的指针</span><br>Group * g[<span class="hljs-number">5</span>];                         <span class="hljs-comment">//电梯组的指针</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> times;                   <span class="hljs-comment">//总乘梯次数</span><br><br><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Passenger-cpp"><a href="#Passenger-cpp" class="headerlink" title="Passenger.cpp"></a>Passenger.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//#include &quot;pch.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Passenger.h&quot;</span></span><br><br>Passenger::<span class="hljs-built_in">Passenger</span>()<br>&#123;<br>&#125;<br><br>Passenger::<span class="hljs-built_in">Passenger</span>(<span class="hljs-type">int</span> M, <span class="hljs-type">int</span> L, ElevatorLift * E[], Time * tm)<br>&#123;<br>NextFloor = (<span class="hljs-built_in">rand</span>() % (<span class="hljs-number">40</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;            <span class="hljs-comment">//随机生成目标楼层</span><br>status = LEAVE;                                     <span class="hljs-comment">//初始状态为离开状态</span><br>NowFloor = <span class="hljs-number">1</span>;                                       <span class="hljs-comment">//初始楼层为1</span><br>WaitTime = (<span class="hljs-built_in">rand</span>() % (M * <span class="hljs-number">60</span> - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>;               <span class="hljs-comment">//乘客初次等待时间</span><br>Total = <span class="hljs-number">0</span>;                                          <span class="hljs-comment">//总计等待时间</span><br>times = L + <span class="hljs-number">1</span>;                                      <span class="hljs-comment">//总乘梯次数  </span><br>nowtime = tm;<br>NextTime = (*nowtime + WaitTime);                   <span class="hljs-comment">//设定下一次乘梯的时间</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>e[i] = E[i];<br>&#125;<br><span class="hljs-built_in">Select</span>(group, which);<br>&#125;<br><br><br>Passenger::~<span class="hljs-built_in">Passenger</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Passenger::action</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">switch</span> (status)<br>&#123;<br><br><span class="hljs-keyword">case</span>  WAIT:<br><span class="hljs-comment">//当前状态为等待，则查看电梯是否到达当前楼层，将状态置为 “乘坐”</span><br><span class="hljs-keyword">if</span> (e[which]-&gt;people &lt; e[which]-&gt;capacity)<br>&#123;   <span class="hljs-comment">//如果电梯人数未满</span><br><span class="hljs-keyword">if</span> (e[which]-&gt;NowFloor == NowFloor)<br>&#123;   <span class="hljs-comment">//选定的电梯楼层与乘客所在楼层一致</span><br><span class="hljs-keyword">if</span> (((NextFloor - NowFloor) &gt; <span class="hljs-number">0</span> &amp;&amp; (e[which]-&gt;NextFloor - e[which]-&gt;NowFloor) &gt;= <span class="hljs-number">0</span>) ||<br>((NextFloor - NowFloor) &lt; <span class="hljs-number">0</span> &amp;&amp; (e[which]-&gt;NextFloor - e[which]-&gt;NowFloor) &lt;= <span class="hljs-number">0</span>))<br>&#123;   <span class="hljs-comment">//并且方向一致</span><br>status = TAKE;<br><span class="hljs-comment">//统计等待</span><br>Total = Total + (*nowtime - NextTime);<br><span class="hljs-comment">//设定乘坐电梯的目标楼层</span><br><span class="hljs-keyword">if</span> ((NextFloor - NowFloor) &gt; <span class="hljs-number">0</span>)<br>&#123;<br>e[which]-&gt;<span class="hljs-built_in">SetInsideUp</span>(NextFloor, <span class="hljs-number">1</span>);   <span class="hljs-comment">//设置目标楼层</span><br>e[which]-&gt;<span class="hljs-built_in">SetUp</span>(NowFloor, <span class="hljs-number">-1</span>);         <span class="hljs-comment">//撤销呼叫</span><br>e[which]-&gt;people++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((NextFloor - NowFloor) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>e[which]-&gt;<span class="hljs-built_in">SetInsideDown</span>(NextFloor, <span class="hljs-number">1</span>);  <span class="hljs-comment">//设置目标楼层</span><br>e[which]-&gt;<span class="hljs-built_in">SetDown</span>(NowFloor, <span class="hljs-number">-1</span>);        <span class="hljs-comment">//撤销呼叫</span><br>e[which]-&gt;people++;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> ((*nowtime - NextTime) % <span class="hljs-number">60</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//如果等待时间每超过一分钟 重新选择电梯</span><br><span class="hljs-comment">//首先撤销上次的选择记录</span><br><span class="hljs-type">int</span>  old_which = which;<br><span class="hljs-keyword">if</span> ((NextFloor - NowFloor) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>e[old_which]-&gt;<span class="hljs-built_in">SetUp</span>(NowFloor, <span class="hljs-number">-1</span>);   <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e[old_which]-&gt;<span class="hljs-built_in">SetDown</span>(NowFloor, <span class="hljs-number">-1</span>);  ;<br>&#125;<br><span class="hljs-built_in">Select</span>(group, which);  <span class="hljs-comment">//如果电梯满员 重新选择电梯</span><br><span class="hljs-comment">//重新设置新的电梯记录</span><br><span class="hljs-keyword">if</span> ((NextFloor - NowFloor) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>e[which]-&gt;<span class="hljs-built_in">SetUp</span>(NowFloor, <span class="hljs-number">1</span>);    <span class="hljs-comment">//Up[this-&gt;NowFloor] += 1;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e[which]-&gt;<span class="hljs-built_in">SetDown</span>(NowFloor, <span class="hljs-number">1</span>);  <span class="hljs-comment">//Down[this-&gt;NowFloor] += 1;</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span>  TAKE:<br>NowFloor = e[which]-&gt;NowFloor;        <span class="hljs-comment">//更新当前乘坐电梯的楼层                               </span><br>   <span class="hljs-comment">//当前状态为乘坐，则查看是否到达目的楼层 ，将状态置为 “离开”或“停止”</span><br><span class="hljs-keyword">if</span> (NowFloor == NextFloor)<br>&#123;<br>times--;<br><span class="hljs-keyword">switch</span> (times)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>status = OVER;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>status = LEAVE;<br>NextFloor = <span class="hljs-number">1</span>;<br>NextTime = (*nowtime + <span class="hljs-number">10</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>status = LEAVE;<br><span class="hljs-comment">//设定新的目标楼层</span><br><span class="hljs-type">int</span> temp = ((<span class="hljs-built_in">rand</span>() % <span class="hljs-number">40</span>) + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span> (temp == NowFloor)    <span class="hljs-comment">//如果取出的数是当前楼层，则重新取随机数，直到不同</span><br>&#123;<br>temp = ((<span class="hljs-built_in">rand</span>() % <span class="hljs-number">40</span>) + <span class="hljs-number">1</span>);<br>&#125;<br>NextFloor = temp;<br>NextTime = (*nowtime + ((<span class="hljs-built_in">rand</span>() % <span class="hljs-number">111</span>) + <span class="hljs-number">10</span>));     <span class="hljs-comment">//生成下一次乘梯时间,随机停留10-120秒</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>e[which]-&gt;people--;<br><br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> LEAVE:<br><span class="hljs-comment">//当前状态为离开，则查看是否到下次开始乘梯的时间 ，将状态置为 “等待”</span><br><br><span class="hljs-keyword">if</span> (nowtime-&gt;second == NextTime.second &amp;&amp; nowtime-&gt;minute == NextTime.minute &amp;&amp;nowtime-&gt;hour == NextTime.hour)<br>&#123;<br><span class="hljs-comment">//改变状态</span><br>status = WAIT;<br><span class="hljs-comment">//选择乘坐的电梯组,与电梯</span><br><span class="hljs-built_in">Select</span>(group, which);<br><span class="hljs-comment">//设置电梯停靠楼层</span><br><span class="hljs-keyword">if</span> ((NextFloor - NowFloor) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>e[which]-&gt;<span class="hljs-built_in">SetUp</span>(NowFloor, <span class="hljs-number">1</span>);    <span class="hljs-comment">//Up[this-&gt;NowFloor] += 1;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e[which]-&gt;<span class="hljs-built_in">SetDown</span>(NowFloor, <span class="hljs-number">1</span>);  <span class="hljs-comment">//Down[this-&gt;NowFloor] += 1;</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> OVER:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span> * <span class="hljs-title">Passenger::GetStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (status)<br>&#123;<br><br><span class="hljs-keyword">case</span>  WAIT:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;等待&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span>  TAKE:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;乘坐&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> LEAVE:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;离开&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> OVER:<br><span class="hljs-built_in">strcpy_s</span>(str, <span class="hljs-string">&quot;结束&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::getstatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> status;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::GetNextFloor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> NextFloor;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::GetNowFloor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> NowFloor;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::Getwhich</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> which + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::Gettimes</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> times;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::Getgroup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> group + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Passenger::GetTotal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> Total;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Passenger::Select</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp; group, <span class="hljs-type">int</span> &amp; which)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> select[<span class="hljs-number">10</span>];                  <span class="hljs-comment">//设定决策权重数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)      <span class="hljs-comment">//初始化</span><br>&#123;<br>select[i] = <span class="hljs-number">0</span>;<br>&#125;<br>select[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>select[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//如果当前楼层与目标楼层为1,25-40</span><br><span class="hljs-keyword">if</span> (((<span class="hljs-number">25</span> &lt;= NowFloor &amp;&amp; NowFloor &lt;= <span class="hljs-number">40</span>) || NowFloor == <span class="hljs-number">1</span>) &amp;&amp; ((<span class="hljs-number">25</span> &lt;= NextFloor &amp;&amp; NextFloor &lt;= <span class="hljs-number">40</span>) || NextFloor == <span class="hljs-number">1</span>))<br>&#123;<br>select[<span class="hljs-number">2</span>] += <span class="hljs-number">1</span>;<br>select[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//如果当前楼层与目标楼层为1-25</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-number">1</span> &lt;= NowFloor &amp;&amp; NowFloor &lt;= <span class="hljs-number">25</span>) &amp;&amp; (<span class="hljs-number">1</span> &lt;= NextFloor &amp;&amp; NextFloor &lt;= <span class="hljs-number">25</span>))<br>&#123;<br>select[<span class="hljs-number">4</span>] += <span class="hljs-number">1</span>;<br>select[<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//如果当前楼层与目标楼层为偶数</span><br><span class="hljs-keyword">if</span> ((NowFloor % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || NowFloor == <span class="hljs-number">1</span>) &amp;&amp; (NextFloor % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || NextFloor == <span class="hljs-number">1</span>))<br>&#123;<br>select[<span class="hljs-number">6</span>] += <span class="hljs-number">1</span>;<br>select[<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//如果当前楼层与目标楼层为奇数</span><br><span class="hljs-keyword">if</span> ((NowFloor % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &amp;&amp; (NextFloor % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>))<br>&#123;<br>select[<span class="hljs-number">8</span>] += <span class="hljs-number">1</span>;<br>select[<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (e[i]-&gt;people &gt;= (e[i]-&gt;capacity)*<span class="hljs-number">0.8</span>)<br>&#123;<br>select[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 进一步选择</span><br><span class="hljs-type">int</span> direction = NextFloor - NowFloor;  <span class="hljs-comment">//设定乘梯方向  &gt;0 向上 &lt;0向下</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-comment">//在满足条件的电梯组中选择</span><br><span class="hljs-keyword">if</span> (select[i])<br>&#123;<br><span class="hljs-comment">//如果乘客要去上面</span><br><span class="hljs-keyword">if</span> (direction &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//如果电梯停</span><br><span class="hljs-keyword">if</span> (e[i]-&gt;NextFloor - e[i]-&gt;NowFloor == <span class="hljs-number">0</span>)<br>&#123;<br>select[i] = select[i] + <span class="hljs-number">40</span> - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));   <span class="hljs-comment">//距离越近，权重越大</span><br>&#125;<br><span class="hljs-comment">//如果电梯向上</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e[i]-&gt;NextFloor - e[i]-&gt;NowFloor &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//并且电梯位置低于乘客位置</span><br><span class="hljs-keyword">if</span> (e[i]-&gt;NowFloor &lt;= NowFloor)<br>&#123;<br>select[i] = select[i] + <span class="hljs-number">40</span> - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));   <span class="hljs-comment">//距离越近，权重越大</span><br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">//电梯位置高于乘客</span><br>&#123;<br>select[i] = select[i] - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果电梯向下</span><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//并且电梯位置高于乘客位置</span><br><span class="hljs-keyword">if</span> (e[i]-&gt;NowFloor &gt;= NowFloor)<br>&#123;<br>select[i] = select[i] - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));   <span class="hljs-comment">//距离越近，权重越大</span><br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">//电梯位置低于乘客</span><br>&#123;<br>select[i] = select[i] + <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">//如果乘客要去下面</span><br>&#123;<br><span class="hljs-comment">//如果电梯停</span><br><span class="hljs-keyword">if</span> (e[i]-&gt;NextFloor - e[i]-&gt;NowFloor == <span class="hljs-number">0</span>)<br>&#123;<br>select[i] = select[i] + <span class="hljs-number">40</span> - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));   <span class="hljs-comment">//距离越近，权重越大</span><br>&#125;<br><span class="hljs-comment">//如果电梯向上</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e[i]-&gt;NextFloor - e[i]-&gt;NowFloor &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//并且电梯位置低于乘客位置</span><br><span class="hljs-keyword">if</span> (e[i]-&gt;NowFloor &lt;= NowFloor)<br>&#123;<br>select[i] = select[i] - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));   <span class="hljs-comment">//距离越近，权重越大</span><br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">//电梯位置高于乘客</span><br>&#123;<br>select[i] = select[i] + <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果电梯向下</span><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//并且电梯位置高于乘客位置</span><br><span class="hljs-keyword">if</span> (e[i]-&gt;NowFloor &gt;= NowFloor)<br>&#123;<br>select[i] = select[i] + <span class="hljs-number">40</span> - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));   <span class="hljs-comment">//距离越近，权重越大</span><br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">//电梯位置低于乘客</span><br>&#123;<br>select[i] = select[i] - <span class="hljs-built_in">abs</span>((NowFloor - e[i]-&gt;NowFloor));<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//在select数组中取最大值的下标，即为最优选择电梯组</span><br><span class="hljs-type">int</span> max = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">9</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-keyword">if</span> (select[i] != <span class="hljs-number">0</span> &amp;&amp; (select[max] &lt; select[i]))<br>&#123;<br>max = i;<br>&#125;<br>&#125;<br>which = max;<br>group = (max / <span class="hljs-number">2</span>);<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="分组类"><a href="#分组类" class="headerlink" title="分组类"></a>分组类</h2><h3 id="Group-h"><a href="#Group-h" class="headerlink" title="Group.h"></a>Group.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElevatorLift.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Group</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Group</span>(ElevatorLift *e1, ElevatorLift *e2);<br>~<span class="hljs-built_in">Group</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>ElevatorLift *e1;<br>ElevatorLift *e2;<br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Passenger</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Group-cpp"><a href="#Group-cpp" class="headerlink" title="Group.cpp"></a>Group.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Group.h&quot;</span></span><br>Group::<span class="hljs-built_in">Group</span>(ElevatorLift * e1, ElevatorLift * e2)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;e1 = e1;<br><span class="hljs-keyword">this</span>-&gt;e2 = e2;<br>&#125;<br>Group::~<span class="hljs-built_in">Group</span>()<br>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Group::action</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>e1-&gt;<span class="hljs-built_in">action</span>();<br>e2-&gt;<span class="hljs-built_in">action</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h2><h3 id="Time-h"><a href="#Time-h" class="headerlink" title="Time.h"></a>Time.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hour;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> minute;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> second;<br><span class="hljs-built_in">Time</span>();<br><span class="hljs-built_in">Time</span>( <span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute, <span class="hljs-type">int</span> second );<br>Time <span class="hljs-keyword">operator</span> + (<span class="hljs-type">int</span> sec);   <span class="hljs-comment">//时间自加，单位为秒</span><br><span class="hljs-type">long</span> <span class="hljs-keyword">operator</span> - (Time &amp; sub);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">( <span class="hljs-type">int</span> hour,<span class="hljs-type">int</span> minute,  <span class="hljs-type">int</span> second)</span></span>;<br><span class="hljs-comment">//void operator =(Time &amp;time);</span><br>~<span class="hljs-built_in">Time</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Time-cpp"><a href="#Time-cpp" class="headerlink" title="Time.cpp"></a>Time.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//#include &quot;pch.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Time.h&quot;</span></span><br><br><br>Time::<span class="hljs-built_in">Time</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;hour = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;minute = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>-&gt;second = <span class="hljs-number">0</span>;<br>&#125;<br><br>Time::<span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> hour,  <span class="hljs-type">int</span> minute,  <span class="hljs-type">int</span> second)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;hour = hour;<br><span class="hljs-keyword">this</span>-&gt;minute = minute;<br><span class="hljs-keyword">this</span>-&gt;second = second;<br>&#125;<br><br><br><br>Time Time::<span class="hljs-keyword">operator</span>+ ( <span class="hljs-type">int</span> sec)<br>&#123;<br>Time time;<br>time.hour = <span class="hljs-keyword">this</span>-&gt;hour;<br>time.minute = <span class="hljs-keyword">this</span>-&gt;minute ;<br>time.second=<span class="hljs-keyword">this</span>-&gt;second;<br><span class="hljs-keyword">if</span> (sec &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> time;<br>time.second = time.second + sec;<br><span class="hljs-keyword">if</span> (time.second &gt;= <span class="hljs-number">60</span>)<br>&#123;<br>time.minute = time.minute + time.second / <span class="hljs-number">60</span>;<br>time.second = time.second % <span class="hljs-number">60</span>;<br><span class="hljs-keyword">if</span> (time.minute &gt;= <span class="hljs-number">60</span>)<br>&#123;<br>time.hour = time.hour + time.minute / <span class="hljs-number">60</span>;<br>time.minute = time.minute % <span class="hljs-number">60</span>;<br><span class="hljs-keyword">if</span> (time.hour &gt;= <span class="hljs-number">24</span>)<br>&#123;<br>time.hour = time.hour - <span class="hljs-number">24</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> time;<br>&#125;<br><br><span class="hljs-type">long</span> Time::<span class="hljs-keyword">operator</span>-(Time &amp; sub)<br>&#123; <br><span class="hljs-type">long</span> a;   <span class="hljs-comment">//被减数</span><br><span class="hljs-type">long</span> b;   <span class="hljs-comment">//减数</span><br>a = <span class="hljs-keyword">this</span>-&gt;hour * <span class="hljs-number">3600</span> + <span class="hljs-keyword">this</span>-&gt;minute * <span class="hljs-number">60</span> + <span class="hljs-keyword">this</span>-&gt;second;<br>b = sub.hour * <span class="hljs-number">3600</span> + sub.minute * <span class="hljs-number">60</span> + sub.second;<br><span class="hljs-keyword">return</span> a - b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::set</span><span class="hljs-params">( <span class="hljs-type">int</span> hour,  <span class="hljs-type">int</span> minute, <span class="hljs-type">int</span> second)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;hour = hour;<br><span class="hljs-keyword">this</span>-&gt;minute = minute;<br><span class="hljs-keyword">this</span>-&gt;second = second;<br>&#125;<br><br><br>Time::~<span class="hljs-built_in">Time</span>()<br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>最后来扯些别的。</p><p>电梯群控调度是一类开放、动态、复杂系统的多目标优化问题。而电梯调度算法是一种常见的算法设计问题。随着楼层的增加，电梯数的增多，这方面研究也非常多。</p><p>值得注意的是，这方面也已经有不少人开始做强化学习相关的了，其出发点是，现存算法不具备自学习、自适应的的能力，电梯面临的实际环境是未知的、不确定的。既定算法针对顾客到达模型的实时决策较为刻板与经验化。若模型参数设置有逻辑上的误差或在运行中发生了一些非预期变化，得到的策略会出现极大误差。</p><p>而另一方面电梯群组调度问题可以被建模成一个很典型的 MDP问题，即电梯下一时刻状态只取决于当前的电梯状态和调度策略。这样就可以利用强化学习算法自适应学习最优策略，从而实现多路电梯的调度。故可<strong>以电梯作为Agent，外界不同楼层乘客按按钮作为Environment，而每个Agent（电梯）即做出选择进行Action</strong>，如下：</p><img src="/2020/06/21/%E5%A4%9A%E8%B7%AF%E7%94%B5%E6%A2%AF%E7%AE%97%E6%B3%95%E8%B0%83%E5%BA%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF%E2%80%94%E2%80%94%E7%B1%BB%E8%AE%BE%E8%AE%A1%E8%A7%92%E5%BA%A6/q.png" width="70%" height="70%"><p><strong>其核心在于设计环境行为交互的奖励机制，利用DQN强化学习算法，寻找多路电梯各状态下的最优动作序列。</strong></p><p>这方面我找到了一篇文章：<strong>《Optimal Elevator Group Control via Deep Asynchronous Actor–Critic Learning》</strong>，供参考。算法框架如下：<br><img src="/2020/06/21/%E5%A4%9A%E8%B7%AF%E7%94%B5%E6%A2%AF%E7%AE%97%E6%B3%95%E8%B0%83%E5%BA%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF%E2%80%94%E2%80%94%E7%B1%BB%E8%AE%BE%E8%AE%A1%E8%A7%92%E5%BA%A6/w.png"></p><p>这篇博客到这里就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 电梯调度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac录制屏内声音教程</title>
      <link href="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/"/>
      <url>/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>由于最近疫情严重，上课开组会都是使用Zoom、腾讯会议这种线上平台进行。然而有时候教师为了保护知识产权，会不开放会议的屏幕录制功能。此时，自行录制上课&#x2F;开会视频以便课后消化显得尤为重要。</p><p>然而在Mac端，直接使用自带的屏幕录制软件录不到电脑内屏放出的声音（只录电脑外置麦克风收到的声音）。下面将介绍如何<strong>在Mac上录制电脑屏幕+只有屏内声音无屏外声音</strong>。</p><p>首先需要下载一款开源插件Soundflower： <a href="https://github.com/mattingalls/Soundflower">https://github.com/mattingalls/Soundflower</a>.</p><p>接着安装。此时有的人会出现安全性问题提示，请保证自己的系统偏好设置里安全性与隐私部分，<strong>”允许任何来源“</strong>：</p><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200218205447434.png" alt="image-20200218205447434" style="zoom:50%;"><p>安装完后打开系统自带的<strong>“音频MIDI设置”</strong>：<br><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200218204339549.png" alt="image-20200218204339549" style="zoom:50%;"></p><p>点击左下角“+号“，建立一个<strong>聚焦设备</strong>，具体设置如下：<br><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200218204238578.png"></p><p>再建立一个<strong>多输出设备</strong>：</p><p><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200218204302914.png" alt="image-20200218204302914"></p><p>接着打开系统设置中的<strong>声音</strong>设置，将”输出“项调为”多输出设备“</p><p><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200219113302210.png" alt="image-20200219113302210"></p><p>最后再打开我们系统自带的录屏软件：QuickTimePlayer，按下<strong>Control+Command+N</strong>新建屏幕录制</p><p><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200218203448241.png" alt="image-20200218203448241"></p><p>接着会出现让你选择录制区域，<strong>先点击”选项“，选择麦克风为”Soundflower64“</strong>，再选录制区域，一般选全屏即可（第四个按钮）：</p><p><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/image-20200218203139123.png" alt="image-20200218203139123"></p><p>当你的电脑升级到Mojave以上的版本时，也可以直接<strong>按Command+Shift+5</strong>直接进入到屏幕录制部分。</p><p>我们测试一下，用INNA播放器播放”美丽心灵“，接着进行录屏，结束后播放录屏。<br><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/a.png"><br><img src="/2020/02/18/Mac%E5%B1%8F%E5%86%85%E5%BD%95%E5%88%B6%E6%95%99%E7%A8%8B/b.png"><br>证实录屏带着电脑屏内声音，目标达成。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 录屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Final Cut Pro 使用笔记</title>
      <link href="/2020/02/15/Final%20Cut%20Pro%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/15/Final%20Cut%20Pro%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="这是一个关于Final-Cut-Pro来剪辑视频的笔记。"><a href="#这是一个关于Final-Cut-Pro来剪辑视频的笔记。" class="headerlink" title="这是一个关于Final Cut Pro来剪辑视频的笔记。"></a>这是一个关于Final Cut Pro来剪辑视频的笔记。</h3><p>Final Cut Pro 是一个苹果公司开发的一款非线性视频剪辑软件，运行于Mac系统。<br>整个的用户界面可以大致被分为以下几块：</p><p><img src="/2020/02/15/Final%20Cut%20Pro%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/a.png"></p><h3 id="工作区说明："><a href="#工作区说明：" class="headerlink" title="工作区说明："></a>工作区说明：</h3><ol><li>左上方区域称为：<strong>浏览器</strong><br>它的主要功能为*<u>管理所有素材</u>*。此处管理可理解为导入、浏览，使用各种素材。其左上方三个按钮分别为：资源库、照片和音频、字幕。</li><li>中间的区域称为：<strong>监视器</strong><br>它的主要功能为<u><em>预览和播放相关素材</em></u>，无论是资源库中的素材还是时间线中的素材。同时可以变换素材的尺寸、裁剪（在左下方第一个按钮）；改变素材的播放速度（第三个按钮）</li><li>右上方区域称为：<strong>检查器</strong><br>这里可以*<u>查看素材的基本信息</u><em>（如分辨率、时长、编码器等），也可以</em><u>修改素材参数</u>*（如调色、调透明度、曝光、缩放、裁剪等等）</li><li>最下方区域称为：<strong>时间线</strong><br>这里是*<u>视频剪辑的主要区域</u><em>。时间线的右上方有两个按钮，分别显示</em><u>效果</u><em>动画和</em><u>转场</u>*动画。<br>🤲 <strong>在操作过程中，经常会改变工作区，可以进行个人设定，同时可按Command+0恢复初始工作区</strong></li></ol><h3 id="创建项目时"><a href="#创建项目时" class="headerlink" title="创建项目时"></a>创建项目时</h3><p>首先要建立<strong>“资源库“</strong>，此时软件会自动新建一个以当前日期命名的<strong>”事件“</strong>，事件中可以新建<strong>”项目“</strong>。<br>👋理解为：”资源库“为总文件夹，事件是其下面的二级文件夹，项目依托于事件，为事件中的文件（也就是后面剪视频时的一条时间线）。</p><h3 id="在导入素材时："><a href="#在导入素材时：" class="headerlink" title="在导入素材时："></a>在导入素材时：</h3><p>鼠标放到想要的素材开始处按I，结束处按O，再拖入时间线。<br><strong>I：开始 (initiate)；O：结束(over)</strong><br>另外四个重要的添加素材所需快捷键（也是时间线上的左上方的四个按钮 ）：<br><strong>E：</strong>把所选素材片段放置到时间线的<strong>最后</strong>，不覆盖其他片段；<br><strong>Q：</strong>把所选素材片段放置到<strong>当前</strong>时间轴的位置，不覆盖其他片段；<br><strong>W：</strong>把所选素材片段插入到当前时间轴的位置，其他片段会(被)自动<strong>切割</strong>开来；<br><strong>D：</strong>把所选素材片段覆盖到当前时间轴的位置，其他片段位置不变 但会被<strong>覆盖和裁剪</strong>；</p><p>第四个按钮旁的小箭头可以选择导入所选素材的<strong>全部（Shift+1），仅视频（Shift+2），仅音频（Shift+3）</strong>，按完再拖入。</p><h3 id="在剪辑视频时："><a href="#在剪辑视频时：" class="headerlink" title="在剪辑视频时："></a>在剪辑视频时：</h3><p>在时间线上使用<br><strong>B（切割）</strong> 对时间线上视频直接切割，切割完后<strong>按A（选择）</strong>切换回来，接着进行位置的拖动；（☆最常用）<br><strong>T（修剪）</strong> 为按住左右拖动修剪素材，拖到红线表示到头；<br><strong>P（直接移动片段）</strong>，中间空挡处自动添加黑场；<br><strong>R（范围选择）</strong>，可在时间线上选择一段范围，比如先选范围，再让此范围素材音量降低；<br><strong>Z（放大时间线）</strong>，可用触控板缩放代替，或<strong>Command+”+&#x2F;-“</strong> ；按住<strong>Shift + Z</strong>：在一个页面中看到全部时间线的内容，自动缩放时间线到合适大小全部显示；<br><strong>H（手</strong>），可拖动整个时间线移动<br><strong>N（吸附）</strong>，也是右边第四个按钮，开启吸附后片段与片段之间就会吸附；不同轨道也会上下吸附对齐；</p><p>效果直接选择拖到素材上即可，转场拖到素材中间</p><h3 id="几个剪辑小操作："><a href="#几个剪辑小操作：" class="headerlink" title="几个剪辑小操作："></a>几个剪辑小操作：</h3><ul><li>将鼠标移到音频开头的控制按钮上，向右拖动可实现淡入，淡出同理。</li><li>添加字幕只需要在左上方字幕边栏中选中拖入时间线即可</li><li>调整视频可使用检查器的第二个按钮，选颜色检查器，调整曝光等等</li><li>字幕边栏中选”发生器“，可添加各种背景</li><li>字幕边栏中搜索“自定”，可进行自定义字幕设置。拖入时间线后右上方检查器第二个按钮文本检查器进行操作可更改字体等诸多选项。</li></ul><h3 id="导出："><a href="#导出：" class="headerlink" title="导出："></a>导出：</h3><p>右上角分享按钮，选择母版文件（默认），具体导出设置可参考这样：</p><p><img src="/2020/02/15/Final%20Cut%20Pro%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/image-20200218004641565.png" alt="image-20200218004641565"></p><p>接着下一步选择导出位置，就开始渲染导出了，本文到此也就结束了。</p><h3 id="其他几个备用快捷键："><a href="#其他几个备用快捷键：" class="headerlink" title="其他几个备用快捷键："></a>其他几个备用快捷键：</h3><p>command+b可以直接通过时间线切割当前片段<br>command+r可以直接调出速度面板，通过片段末尾拉神时间的速度快慢<br>shift+b可以分段切割速度<br>control+T是添加默认字幕 command+T是添加默认转场 control+ shift+t是添加默认三分之一的字幕<br>选中时间线的任意一个片段 按V可以隐藏该片段<br>如何取消主故事线的链接 option+command+上<br>按住~键的同时，用选择工具A拖动主故事线的片段 也可以脱离故事线的魔掌<br>command+c复制， command+shift+v是粘贴片段的属性，Comand+Z侧小<br>option+c可以添加外挂字幕或者导出这类的字幕</p><p>教程参考：<a href="https://www.bilibili.com/video/av40359934?t=579">https://www.bilibili.com/video/av40359934?t=579</a><br>文中素材：王者荣耀replay，《阳光灿烂的日子》4k修复版</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 剪视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 剪视频 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部分个人影评合集（保持更新）</title>
      <link href="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="寒假看的一些电影，有的是之前看过，现在重新看一遍，写了几个小影评："><a href="#寒假看的一些电影，有的是之前看过，现在重新看一遍，写了几个小影评：" class="headerlink" title="寒假看的一些电影，有的是之前看过，现在重新看一遍，写了几个小影评："></a>寒假看的一些电影，有的是之前看过，现在重新看一遍，写了几个小影评：</h2><h3 id="《窃听风暴》"><a href="#《窃听风暴》" class="headerlink" title="《窃听风暴》"></a>《窃听风暴》</h3><h4 id="豆瓣9-1，06年奥斯卡最佳外语片"><a href="#豆瓣9-1，06年奥斯卡最佳外语片" class="headerlink" title="豆瓣9.1，06年奥斯卡最佳外语片"></a>豆瓣9.1，06年奥斯卡最佳外语片</h4><p>故事发生在1984-1989柏林墙倒塌期间的东德。当时整个社会弥漫在国家安全局的高压统治下，他们如同鬼魅般毫无理由地监听控制着整个国家。男主也是这个国家85000名秘密警察中的一个，他业务熟练，冷血无情，像一个工具一样闭眼倾听着一对艺术家夫妇。艺术家们往往是社会进步的重要力量。但此时他们的自由主义思想，却被视为对国家政权的重要威胁。他们被监视、被窃听，从没有创作自由，甚至没有人身自由。男主的生活冷酷高压，反而监听时耳中那个诗意浪漫的家庭好似幻梦，他看到了一个世界里不止有无情的政治斗争，还有诗，音乐和温暖。同时对社会主义和党员义务无比坚定的他却一次次发现党内高层违背党的宗旨，文艺部部长都利用职权强迫艺术家妻子成为自己的情妇…男主的美好梦境一次次打破了，他决定保护艺术家一家，但最终自己也失去了一切。<br>亚里士多德曾说过：“政治是最高的善”。它本应是人类为了保护个人权利，自由与财产而出现的一种社会契约。但在官僚主义横行的，“斯塔西”们处处监控的高压社会，政治在国家机器的手中，就会成为了剥夺个人自由与意志的恶。当身居高位的执政者一次次亵渎他们自己的誓言，而真心实意坚信这个体制的人被一次次伤害时，“国家意志”只会成为少数人的谋取个人权利的意志。而布尔什维克（多数）也就无从谈起。<br><img src="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/qt1.jpg"></p><h3 id="《钢的琴》"><a href="#《钢的琴》" class="headerlink" title="《钢的琴》"></a>《钢的琴》</h3><h4 id="豆瓣8-4，一部很难得的中国电影"><a href="#豆瓣8-4，一部很难得的中国电影" class="headerlink" title="豆瓣8.4，一部很难得的中国电影"></a>豆瓣8.4，一部很难得的中国电影</h4><p>故事背景与人物是设计在上世纪改革开放后的老东北工业区，那个充满着体制化与革命的时代突然崩塌，一批批下岗工人也转瞬从国家的主人翁成为社会的边缘人，这在心理上是很难接受的，仿佛过去的一切都没有意义。但本片并没有陷入自怨自艾的情绪中，反而以一种黑色幽默般的故事清晰描绘出一个小人物在时代洪流下的无奈与心酸，抗争到最后释怀与和解。虽然本片内核是悲凉的，但看完却更多是一种感叹与怀念，和对这一代劳动者的尊敬。历史车轮滚滚向前，我们更应该接受它，带着上一代留下来的精神宝藏继续前行。这部片子2010年上映，王千源是主演，更多的是“哀而不伤”。后来还有一部类似题材的《暴雪将至》则完全是时代的挽歌，结局雪花的飘零仿佛就是要把那些东西毁灭给你看。<br><img src="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/bx.jpg"></p><h3 id="《搏击俱乐部》"><a href="#《搏击俱乐部》" class="headerlink" title="《搏击俱乐部》"></a>《搏击俱乐部》</h3><h4 id="豆瓣9-0，不说了，两个字：NB"><a href="#豆瓣9-0，不说了，两个字：NB" class="headerlink" title="豆瓣9.0，不说了，两个字：NB"></a>豆瓣9.0，不说了，两个字：NB</h4><p>表面看是对消费主义社会下各种虚伪的精神慰藉的辛辣讽刺，但深层次应该很容易想到的是与“虚无主义”，“自由”甚至与左派思潮的精神追求有关。但和《V字仇杀队》那种纯粹的革命又不同，可能更加地形而上学吧。这部片我觉得个人理解可能还不够深，还在思考，就分享几段别人的影评吧：</p><blockquote><p><strong>”叛逆“与”革命“</strong><br>＂叛逆＂是个体对体制与所谓＂主流＂的不认同与不合作，而＂颠覆＂虽同样追求与主流的离异，但却还隐藏着推倒体制的含义．＂叛逆者＂是小小的破坏分子，他们是远离者，是孤独者．而＂颠覆＂却暗示着他们的对立面－－＂建立＂，他们不满足与象叛逆者那样，远远的扔石块，冷冷的嘲弄，他们想要的是改变体制，扭转＂主流＂．因此，当这些特征发展到一定阶段的时候，就像影片中所呈现的那样，叛逆成了破坏者．颠覆则不可避免的到达了它的第二阶段－－＂革命＂．<br>已经成为物欲囚徒的城市中产阶级和为了生活而挣扎的小人物们，希望通过对身体的破坏来获取精神的刺激,籍此找回字我存在的意义和作为人的自尊．很明显,肉体的欢愉（性和毒品）所带来的刺激已经被这个社会修剪的那么＂生活化、健康化和科学性＂（多么主流的词汇），他的稀松平常显然已经不能挑起人们精神的刺激,更无法触及人的自尊.如此一来,聪明的泰勒便发现了欢愉的对立面—痛感（一个绝好的办法,却也是让人绝望的悲哀）．正如尼采所言，现代社会塑造了人，他们把自己的优越感无偿的献给了自我保存．他们是由欲望和理性组合而成却没有抱负的人，他们没有任何获得比他人更伟大的认可的欲望，没有杰出感和成就感,他们是＂最后的人＂．<br>但尽管如此，他们可能并不是＂革命者＂，因为这与他们真正的目的是分道扬镳的．泰勒和他的组织越来越壮大，这是事实．但他们的力量源泉在于它的＂破坏性＂而不在于＂创造性＂，他们有的是叛逆者愤怒的反抗与不甘，而不是革命者的野心勃勃和充满抱负．叛逆者们追求自由，找寻自由，而革命者却试图创造自由，给予自由．叛逆者是无政府主义者，是不屑于主流或绝望或聪明的人们，他们用各种方式嘲弄着体制：对一本正经的人们残忍的捉弄，用尸体油脂制作香皂，大楼上的笑脸（这倒颇有纳粹的意味）．革命者却不会在乎这种小大小闹,嬉笑怒骂对他们而言,简直是一种侮辱，他们才是真正的危险人物．叛逆者乐于不同于主流，他们憎恨、蔑视主流，为自己是个unique而沾沾自喜，革命者却渴望成为主流，通过颠覆原先的统治者．<br>一个主流文化的存在，总是伴随着大量的少数派与之对抗．那些叛逆者乐于自己作为少数派的角色，乐在其中，他们其实也就是这个主流文化的一部分．这种主流与少数派之间对抗所形成的张力，正是体制存在的动因和能量源泉．叛逆者是天生的反对派（正如亨廷顿说学生是天生的反对派），一个天生的反对派，一旦失去了它强大的敌人，也就丧失了自身存在的意义，活不下去了．所以说叛逆者的角色是荒谬、尴尬而又可悲的．他们蔑视主流，却是主流之兄，体制之子．一如我们亲身体验的一样，对兄弟的敌意，对父亲的仇视，是我们天生的禀赋．叛逆的人们，你们是可悲的，你们不能成为神圣的摩西，却注定是忤逆的该隐．而体制永远不会因为叛逆者的反抗而土崩瓦解，反而是当反抗者们丧失了斗志和力量时，体制将变得僵硬和臃肿，失去了活动，腐朽不堪了．<br>泰勒的组织，与革命其实并没有什么联系和共同点，与其说它是政治性的，不如说它是宗教性的．人们为了追求精神的解脱和信仰加入其中，他们通过肉体的感受试图唤醒精神的短暂振奋．<br>另外说实话，我一点也不喜欢对自己喜爱的电影作这样的剖析，我更愿意陶醉于那种朦胧的美感，在理解与不理解之间玩味．就好象面对一个美丽的女子，我们更愿意欣赏她衣裳与骨骼之间的肉体，抚摸服饰与血肉之间的肌肤．当然，你可能会问，为何不愿触及她的灵魂呢？呵呵，如果为了触及一个人的灵魂，何必要选择一个美丽的女子呢？之所以我现在要玷污这位美人，只是因为不愿意玷污她的不是我本人。</p></blockquote><blockquote><p> <strong>《中产危机》</strong><br> 市场经济的基础不是价格，而是欲望。经济学家告诉我们，边际消费倾向越高，经济总量增长越快。工人越消费，厂商越有生产动力，越能获得利润；获得更多的利润，就能给更多的工资让工人消费。所以在市场经济的条件下，大家最应该做的事情就是尽情地挥霍自己的欲望：尽情地消费，尽情地占有。于是消费主义横行，人们只知消费，不知思考；只知纵欲，不知节制。<br>    欲望的一大特点就是易消逝性。如果一个的目标是赚到一百万，当他在欲望的号召下费尽千辛万苦赚到一百万，却发现当欲望的实现消解了欲望本身时，得到的只不过是莫大的空虚。这样的空虚到处都在上演，于是有人开始厌倦，开始反抗。<br>    大卫芬奇在《搏击俱乐部》中给我们讲了这样一个故事：一个空虚的中产在厌倦了物欲不断满足的空虚之后开始失眠，于是他参加各种绝症患者社团，通过分享别人的濒死体验，来激发自己的存在本能。但一个同样空虚的女人的到来让他看清了自己的虚伪，于是他自己在无意识的情况下分裂出另一个自己，寻找解决之道。他建立了搏击俱乐部，在这里人们自由互殴。痛是最直接的强烈感受，很容易感受到自己的存在；他对自己的分身谈论期待中的互殴对象：海明威，林肯,甘地……成为英雄对大多数平庸的我们只是不实的梦，实现这些不现实的梦不应该成为我们存在的意义；他建立了秘密组织，在这种类似军队的集体主义组织中，个人没有象征个性的名字，只有集体分配给他的代号。个体不存在了，欲望也就不容易产生。最后，他喊出了最具震撼力的口号：消灭物质。没有物质，自然没有对物质的欲望，一切问题就迎刃而解了。整个电影就在成熟的市场经济的象征——个人信用信息中心的大楼轰塌中结束了。物质没有了，欲望也没有了，一切归于平静。<br>    《搏击俱乐部》是身处后现代的大卫芬奇的又一次布道，号召不甘在欲望中湮灭的中产们团结起来毁灭这个以欲望为基础的体制。但是芬奇并没有给出解决之道：我们在毁灭了一切之后怎么办？我们是应该站在物质的废墟上等死，还是任由以追求个人利益最大化为本能的我们开始新一轮的物质建设？<br>    在又一次看完芬奇这部中产的悲剧之后，一位曾经的同窗向我抱怨他的不安：中国新兴的中产没有政党为他们说话，财产没有保障，生活过不安稳。我心中感慨万千：在中国未来的中产还在担心未来的中产生活没有保障时，外国的中产早已厌倦了光鲜富足，开始着手物质的毁灭。<br>    其实两者都是悲哀的。<br><img src="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/bj1.jpg"></p></blockquote><h3 id="《本杰明巴顿奇事》"><a href="#《本杰明巴顿奇事》" class="headerlink" title="《本杰明巴顿奇事》"></a>《本杰明巴顿奇事》</h3><h4 id="豆瓣8-9。我高中时最喜欢的电影之一，更喜欢另一个译名-《返老还童》"><a href="#豆瓣8-9。我高中时最喜欢的电影之一，更喜欢另一个译名-《返老还童》" class="headerlink" title="豆瓣8.9。我高中时最喜欢的电影之一，更喜欢另一个译名:《返老还童》"></a>豆瓣8.9。我高中时最喜欢的电影之一，更喜欢另一个译名:《返老还童》</h4><p>08年大卫芬奇的运镜和调度早已炉火纯青，三个小时的故事平铺直叙你却感受不到时间，环环相扣的情节宛如流水。你会记住那个反方向的钟，那个被雷电劈过七次的男人，那个独自游过大西洋的女人，以及黛西怀里抱着的婴儿：本杰明。诗意的画面和娓娓道来的故事会让你主动浸入到那个奇特的隽永时光中。<br><img src="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/bjm.jpg"></p><h3 id="《布达佩斯大饭店》"><a href="#《布达佩斯大饭店》" class="headerlink" title="《布达佩斯大饭店》"></a>《布达佩斯大饭店》</h3><h4 id="豆瓣评分8-8，获奥斯卡5项提名4项正奖。"><a href="#豆瓣评分8-8，获奥斯卡5项提名4项正奖。" class="headerlink" title="豆瓣评分8.8，获奥斯卡5项提名4项正奖。"></a>豆瓣评分8.8，获奥斯卡5项提名4项正奖。</h4><p>这是一部画面极其考究，色彩艳丽，构图将对称美学进行到底的电影。但就画面就能称得上一部艺术片并值回票价。<br>艺术成就上，片中情节荒诞却紧凑，仿佛与生俱来就带有着贵族的优雅。有人说它既满足侦探片的悬念冲突，又有着文艺片的温馨优雅，更有着政治片的黑色幽默与隐喻。</p><p>一部好的电影一定应该做到雅俗共赏，层层精彩。这个角度来说，本片或许是战前属于“欧式贵族”最后优雅的赞歌。主人公一丝不苟，面对逐渐礼崩乐坏的现实也坚守着欧洲那最后的人文家园。<br>（类似的主题，再推荐一部虽然有些争议，但个人还蛮喜欢的最近的片子《罗曼蒂克消亡史》，可以感受到属于旧上海那最后的优雅消亡的悲剧）<br><img src="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/bdp2.jpg"></p><h3 id="《寄生虫》"><a href="#《寄生虫》" class="headerlink" title="《寄生虫》"></a>《寄生虫》</h3><h4 id="2020年奥斯卡最终大赢家-碎碎念"><a href="#2020年奥斯卡最终大赢家-碎碎念" class="headerlink" title="2020年奥斯卡最终大赢家+碎碎念"></a>2020年奥斯卡最终大赢家+碎碎念</h4><p>初看的时候它刚得戛纳金棕榈和金球最佳外语片，那时我抱着它毕竟是这么多年来韩国片获奖最多的，就看了一下，但直到今天看到奥斯卡奖一出，我酸了。真的也不至于最佳影片最佳导演最佳剧本等六项大奖吧。我个人心目中大概只能打个8.5左右，但是这得奖规模几乎是个能豆瓣9.0+能进影史前一百的片子了。可能是运气太爆棚了吧……<br>说回电影：总的来说，这部片肯定是好片，质量上乘，主题深刻。简单来说，这是一个寓言式的阶级矛盾相生相杀的故事。(这部片属于剧情片，我怕剧透就不多说了）电影的内核其实片中已点明了：财富能把一切东西熨平，而美德，不过是富人生活的衍生品和精神慰藉罢了。穷人并不是天生就算计，凶险，充满着罪恶与不知廉耻，他们只是需要生计。而中国这个道理也早就说过了，过去有“仓廪足而知礼节”，现在有“经济基础决定上层建筑”。<br>所以在片中，其实也没有好人坏人富人穷人，所有人都非常矛盾，游离在善与恶的边缘。富人们没有兴趣关心穷人的想法与生活，穷人们心中富人的纸醉金迷也只是表象与他们的意淫。整部片仿佛就是要把两个对立的东西揉起来讲，打破隔离地探讨阶级矛盾。这符合影片“戏剧冲突”与“好看”这一最重要的指标<br>但我个人认为，全片有一些太“刻意”了，剧本虽完美无暇，主题严肃认真，但片子是以商业片的形式，规范化的指挥让你迅速达到主旨。但可能我更喜欢那种有余韵和不那么“匠气”的电影吧。<br>最关键的还是奥斯卡的过誉，让我觉得不那么值当，也是为今年其他几部很不错的电影愤慨吧。ε&#x3D;(´ο｀*)))唉，也有可能就是酸了<br><img src="/2020/02/10/%E9%83%A8%E5%88%86%E5%BD%B1%E8%AF%84%E5%90%88%E9%9B%86%EF%BC%88%E4%BF%9D%E6%8C%81%E6%9B%B4%E6%96%B0%EF%BC%89/jsc.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 更新 </tag>
            
            <tag> 个人影评 </tag>
            
            <tag> 整理合集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《菊与刀》读书笔记</title>
      <link href="/2020/01/30/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/30/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="引言：最孤立的微小行为之间也存在着联系，这些纷繁复杂的单项行为构成了一个总体模式。"><a href="#引言：最孤立的微小行为之间也存在着联系，这些纷繁复杂的单项行为构成了一个总体模式。" class="headerlink" title="引言：最孤立的微小行为之间也存在着联系，这些纷繁复杂的单项行为构成了一个总体模式。"></a>引言：最孤立的微小行为之间也存在着联系，这些纷繁复杂的单项行为构成了一个总体模式。</h3><p>首先，这本书写于二战末期。反法西斯阵营即将取胜，但他们而却要面对一个完全不能理解的民族。在美国人看来，大和民族非常的“矛盾”，它不属于西方文化传统，但又全服武装、训练有素：</p><blockquote><p>这个民族既彬彬有礼又粗鲁野蛮；既顽固不化又善于改革；既谦卑温顺又不愿受制于人；既忠心耿耿又背信弃义、睚眦必报；既上街任意又不愿愧对内心；既纪律严明又难以管束；既兼容并蓄又故步自封；<strong>既醉心于菊花的美又崇尚刀剑和武士道的无上荣耀。</strong></p></blockquote><p>“菊”是日本皇室的象征，代表着谦和与儒雅；而“刀”则是武士刀，是日本尚武、好战的体现。这两个意象在日本人身上得到了非常好的融合。这两者也是这本书洞察大和民族民族特性的落脚点。<br><img src="/2020/01/30/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/fsh.jpg"></p><p>在日本民族性格的形成中，<strong>矛盾</strong>或许是一个普遍存在的因素。正因处于矛盾中，他们常常表现出紧张焦虑的情绪。他们害怕竞争，不善竞争，却毕生处在和自己的斗争中。因此相对于外界，他们更习惯于坚守原来的秩序而不是狂热的革命，这或许也是他们的社会体系长期稳定的原因。但是矛盾依然存在，或者说他们不愿放弃矛盾，他们的稳定中又充满了善变.“菊花与刀剑”的矛盾，并不像平时被人所理解的“日本人对内部很和谐，而对外部十分残酷”这种矛盾这么简单。或许，菊花就好比日本人心中的精神力量的来源，是美好的；而刀剑就好比奉行这种精神或原则的方式，很难突破。</p><p>同时，日本人对于<strong>报恩与尊重</strong>有着近乎执拗的偏好。他们对待天皇会毫无原则毫无理由地服从，哪怕心里知道那样做是错的也甘愿奉献自己的全部。同时他们对精神和意志的影响有着超凡的信任，认为这可以超出物质本身。也就是说，日本人对于生，对于死迥异于其他国家民族的生存至上的逻辑。曾看到《挪威的森林中》写着：</p><blockquote><p>“死并非是生的对立面，而是作为生的一部分存在。”<br><img src="/2020/01/30/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/fsh3.jpg"></p></blockquote><p>日本人往往以死表达心理情感的一种极度升华，是对国家对个人的一种牺牲与尊严，以此凸显自己的人生价值。这种<strong>细腻却自尊，带着淡淡悲伤和强烈荣誉感的情怀</strong>，或许就是日本人对生与死的直接诠释。</p><p>这个民族无疑是令人感伤的。他们似乎从诞生起就背负着苦难，但又不屈服于现实。<strong>他们有着超出自己国土与人力资源的野心与梦想并甘愿一代代为之玉碎。</strong>伴随着一曲《The Empire of the Sun》，我仿佛能看到那个好斗又和善；尚武又爱美；傲慢又懂礼；顽固又善变；驯服又桀骜；忠诚又叛逆；勇敢又懦弱的民族。<strong>那个在日出之地冉冉升起，迸发出无穷活力的新兴帝国，经历过黑暗的幕府时代、光明却集权的明治维新时代，有着民主繁荣，洋溢着浮世绘中诗意浪漫的大正时期，最终却高呼万岁，陷入癫狂的军国主义。这个年轻的帝国将整个亚洲卷入混乱与黑暗，最终自己也蒙受苦难，七十年奋斗成果，化为一堆焦土和两声轰鸣巨响，只落得樱花落尽，生灵涂炭……</strong><br><img src="/2020/01/30/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/feiji.jpeg"><br>回顾日出帝国这励精图治的风雨七十年，追求力量的途中被战争这个便捷的方式冲昏头脑的历史，你可能只会想到<strong>那标着红日的战机和军舰，那南京城里流血的屠刀，那一个个誓死战斗，眼神里充满着自信与正义的神风之子。</strong>不会想到阴谋与野心，想到那全民支持的这场“正义战争”背后的深层原因。</p><p>庞勒曾在《乌合之众》中详细展示，<strong>组织化群体的无意识行为是如何极端化、情绪化与低智商化的。虽然本书中将人的群体属性归结为文化模式。认为人类文化各有其不同的价值体系和特征，在不同民族中呈现着一定的主旋律，即民族精神。</strong></p><p>但发动战争的是政客，这固然与其封建残余的军国主义有关。而政客也需要不断利用媒体与集群效应煽动民众，得到支持。当国家宣传机器全力开动，政客们也往往借助本民族最直接的“痛点”反复借力，那些宣传的口号无疑会让本就信息不对称并担心离群的人民振奋且陷入疯狂。</p><p>当庄严神圣的口号再度响起，民族精神与国家前途以军队具象化的形式让民众热血沸腾时，阵阵万岁浪潮的山呼海啸很容易去除人民的理智，让人民放弃思考。有时保持清醒头脑的人会被视为保守的极右主义者，在全民疯狂的情形下被当作异类清除。</p><p><strong>此时，你是否还愿意保持着清醒。</strong><br><img src="/2020/01/30/%E3%80%8A%E8%8F%8A%E4%B8%8E%E5%88%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/shenfeng.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结与摘抄 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“李约瑟问题”思考——从墨家思想的消亡说起</title>
      <link href="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/"/>
      <url>/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/</url>
      
        <content type="html"><![CDATA[<h4 id="引言：众所周知，在十七世纪前，中国在政治制度、技术、艺术、文学等多方面遥遥领先全世界。无论是《马可波罗传》还是门多萨的《中华大帝国史》中的描述，中国的历史文化、地理风物、社会习俗、科学工艺都使全世界为之惊叹。但到十七世纪后，以英国为首西欧诸国的开始了大航海时期并展开了轰轰烈烈的工业革命，科学技术达到高速发展。最终在19、20世纪几乎以碾压优势横扫了亚洲以小农经济为主的诸多国家，包括一直以天朝上国自称，长期保持全世界经济领头羊上千年的满清中国。这一切确实使人非常困惑，即中国在十五世纪前的科学发现和技术工艺远远超过同时期的欧洲，但中国却直到鸦片战争都一直没产生近代科学呢？且中国长期以来的稳定繁荣、国力昌盛，宗教思想也不像欧洲那样广泛，每一代中华民族还有着勤劳智慧的先祖长期实践产生的理论经验积累。这些都理应使中国更先一步建立起成体系的近代科学，但我们知道这一切最终都并没有发生，这是为什么呢？"><a href="#引言：众所周知，在十七世纪前，中国在政治制度、技术、艺术、文学等多方面遥遥领先全世界。无论是《马可波罗传》还是门多萨的《中华大帝国史》中的描述，中国的历史文化、地理风物、社会习俗、科学工艺都使全世界为之惊叹。但到十七世纪后，以英国为首西欧诸国的开始了大航海时期并展开了轰轰烈烈的工业革命，科学技术达到高速发展。最终在19、20世纪几乎以碾压优势横扫了亚洲以小农经济为主的诸多国家，包括一直以天朝上国自称，长期保持全世界经济领头羊上千年的满清中国。这一切确实使人非常困惑，即中国在十五世纪前的科学发现和技术工艺远远超过同时期的欧洲，但中国却直到鸦片战争都一直没产生近代科学呢？且中国长期以来的稳定繁荣、国力昌盛，宗教思想也不像欧洲那样广泛，每一代中华民族还有着勤劳智慧的先祖长期实践产生的理论经验积累。这些都理应使中国更先一步建立起成体系的近代科学，但我们知道这一切最终都并没有发生，这是为什么呢？" class="headerlink" title="引言：众所周知，在十七世纪前，中国在政治制度、技术、艺术、文学等多方面遥遥领先全世界。无论是《马可波罗传》还是门多萨的《中华大帝国史》中的描述，中国的历史文化、地理风物、社会习俗、科学工艺都使全世界为之惊叹。但到十七世纪后，以英国为首西欧诸国的开始了大航海时期并展开了轰轰烈烈的工业革命，科学技术达到高速发展。最终在19、20世纪几乎以碾压优势横扫了亚洲以小农经济为主的诸多国家，包括一直以天朝上国自称，长期保持全世界经济领头羊上千年的满清中国。这一切确实使人非常困惑，即中国在十五世纪前的科学发现和技术工艺远远超过同时期的欧洲，但中国却直到鸦片战争都一直没产生近代科学呢？且中国长期以来的稳定繁荣、国力昌盛，宗教思想也不像欧洲那样广泛，每一代中华民族还有着勤劳智慧的先祖长期实践产生的理论经验积累。这些都理应使中国更先一步建立起成体系的近代科学，但我们知道这一切最终都并没有发生，这是为什么呢？"></a>引言：众所周知，在十七世纪前，中国在政治制度、技术、艺术、文学等多方面遥遥领先全世界。无论是《马可波罗传》还是门多萨的《中华大帝国史》中的描述，中国的历史文化、地理风物、社会习俗、科学工艺都使全世界为之惊叹。但到十七世纪后，以英国为首西欧诸国的开始了大航海时期并展开了轰轰烈烈的工业革命，科学技术达到高速发展。最终在19、20世纪几乎以碾压优势横扫了亚洲以小农经济为主的诸多国家，包括一直以天朝上国自称，长期保持全世界经济领头羊上千年的满清中国。这一切确实使人非常困惑，即中国在十五世纪前的科学发现和技术工艺远远超过同时期的欧洲，但中国却直到鸦片战争都一直没产生近代科学呢？且中国长期以来的稳定繁荣、国力昌盛，宗教思想也不像欧洲那样广泛，每一代中华民族还有着勤劳智慧的先祖长期实践产生的理论经验积累。这些都理应使中国更先一步建立起成体系的近代科学，但我们知道这一切最终都并没有发生，这是为什么呢？</h4><p><img src="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/mojia.jpg"></p><h4 id="从地理上来分析，"><a href="#从地理上来分析，" class="headerlink" title="从地理上来分析，"></a>从地理上来分析，</h4><p>中国东临广袤的太平洋和诸岛国，西临沙漠和青藏高原，唯一有的威胁在于北部的游牧民族（这也是中华文明的历来劲敌）。但毫无疑问，中华文化在游牧民族处学到的东西是十分有限的。事实上，从秦汉统一到鸦片战争，中国在东亚附近始终处于强国状态。适宜居住的温带气候、广袤的土地、丰富的资源、庞大的人口、灿烂的文化，没有强大的海上外敌入侵，使中国的发展很容易变成主观“内向”。除了唐朝初期和明朝初期，国力极其强势，达到了“万邦来朝”的盛况。但安史之乱、土木堡战役这种有着一定的“非我族类其心必异”事件的发生毫无疑问会使文明再一次变得内向。</p><h4 id="但仔细思考，"><a href="#但仔细思考，" class="headerlink" title="但仔细思考，"></a>但仔细思考，</h4><p><strong>国家的统一、物资的丰富和文明的内向只能算是某种程度上科学发展的障碍而绝不会是根本原因</strong>，在阅读过一系列文献后，我认为很大一部分原因还在封建社会整个国民的陈旧思想以及儒家学说的统治地位上。</p><p>这个角度的切入点其实应该是容易想到的，即<strong>中国古代一直奉行高度集权的封建专制统治，长期奉行“愚民政策”，奉行以君臣伦理道德关系和注重社会稳定、秩序为核心的儒家学说以维护封建统治，极大抑制自由的思想观念。</strong>认为其为不误正业，强调“学而优则仕”，将整个士大夫阶层都纳入统治辖区和等级体制内。这一切都极大阻止了“科学精神”所需要的“自主思考”能力。</p><p><strong>慢慢地，权力的更迭与稳定而不是社会的进步与发展成为封建统治者的毕生致力。</strong>在这样的环境下，不管是是士大夫还是群众的自我思考都是极其危险且违反社会伦理道德的。长此以往，<strong>上层统治阶级所掌握的极大资源达不到合理配置，完全被投入到权力的内卷内耗中；而下层全社会的思想又被儒家伦理道德观所控制，甚至到了封建后期锦衣卫等严格思想严格控制机构的出现，自主思考和理论创新完全失去合法性，群众和知识分子群体失语，近代科学因缺少所需的理性、客观，成为无源之水无木之本。</strong></p><p><img src="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/rujia.jpg"></p><p>最严重的是，中国古代的“大一统”思想和“君臣父子”的儒家伦理思想早已在两千年的封建驯化中深入人心。西欧封建统治虽也存在过一段时间，但毕竟国家较小，且在帝王统治中仍然有 <strong>“教皇”</strong>这一宗教上的制衡力量存在，不像中国这样常年以一元政治体系为主。在中国这样的大国政治中，稳定成为第一要务。社会虽然发展缓慢但由于体系巨大，仍可以依靠其内部协调分散危机，制约矛盾。</p><p>这样看来，从辩证唯物主义角度思考，<strong>大一统的专制统治虽然促进了文化交流融合，使“车同轨、书同文、行同伦”，物质的协调调度和外交上的统一强势，但也在某种意义上阻碍了思想的自由发展。</strong>反观春秋战国时期，虽诸侯割据，连年征战，但却产生了思想非常活跃、学派林立、角度多样的<strong>诸子百家</strong>现象。可见，自由理性客观和问题导向的思维模式，才可产生杰出的思想。而<strong>以稳定、专制、高度集权为主的封建统治，束缚了知识分子的创造力；伦理、君臣、中庸的普世价值观，磨去了知识分子探索未知世界的勇气</strong>。发展到封建后期，“八股文”的出现更是成为这一现象的顶峰。</p><h4 id="但，中国历史上没有出现科学精神的种子吗？"><a href="#但，中国历史上没有出现科学精神的种子吗？" class="headerlink" title="但，中国历史上没有出现科学精神的种子吗？"></a><strong>但，中国历史上没有出现科学精神的种子吗？</strong></h4><p>我们知道，在《韩非子 显学》里曾说：“<strong>世之显学，儒墨也</strong>”，可见，儒墨在战国时期大国纷争时并为世间显学，且因很多社会问题不能用儒家思想来解释。而主张“兼爱非攻”且在技术上精于实用的机械制造的墨家显然更符合社会需要。</p><p>但在国家走向大一统、董仲舒“罢黜百家，独尊儒术”后，儒家思想因十分顺应封建统治，成为唯一显学。且这一法宝后来也被历届统治者一再沿用，屡试不爽。但我们发现，除了春秋战国时期，在<strong>魏晋南北朝时期</strong>和<strong>清朝末年</strong>，墨家重新走上历史舞台。这两个时期都是战乱纷争，底层民众苦不堪言，儒家主流思想不再能解释这种苦难而受到普遍的怀疑。这时墨家崇尚的 <strong>“实用性”和逻辑性</strong>才显出其先进性。此时墨家逻辑思想短暂兴起一时，但就这短短一时，其<strong>强调演绎和公理化知识结构的思维模式仍造就了刘徽这种伟大的数学家和其伟大的数学著作。</strong><br><img src="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/liyuese2.jpg"></p><p>事实上，在诸子百家中，唯有墨家思想注重实验和理论的结合。且非常善于使用一种<strong>从显而易见的源头处开始，进行反复思辨证明的过程，</strong>这与西方数学“公理定理”的证明体系非常相似。且墨家非常重视实验和逻辑推理，强调理性和抽象。我认为，这里其实就已经蕴藏着“近代科学”的种子了。毫无疑问，从现在的角度看，原“显学”墨家所代表的思想有着从“经验主义”到“逻辑推理”和“实验抽象”的性质了，<strong>它其实是诸子百家中最适合科学技术发展、最有生命力的思维方式。它的最终消亡不可或缺的是中国科学发展的重大损失。</strong></p><h4 id="但，若还是从辩证唯物主义史观角度思考，有”存在即合理“。墨家的消亡和儒家的完全地位也是在当时不考虑大变革情况下，历史必然的选择。甚至如果坚持实用主义而不是封建统治，国家容易被地方和个人掌握的技术爆炸和社会群体思想激进，理性务实很容易导致国家长期分裂。"><a href="#但，若还是从辩证唯物主义史观角度思考，有”存在即合理“。墨家的消亡和儒家的完全地位也是在当时不考虑大变革情况下，历史必然的选择。甚至如果坚持实用主义而不是封建统治，国家容易被地方和个人掌握的技术爆炸和社会群体思想激进，理性务实很容易导致国家长期分裂。" class="headerlink" title="但，若还是从辩证唯物主义史观角度思考，有”存在即合理“。墨家的消亡和儒家的完全地位也是在当时不考虑大变革情况下，历史必然的选择。甚至如果坚持实用主义而不是封建统治，国家容易被地方和个人掌握的技术爆炸和社会群体思想激进，理性务实很容易导致国家长期分裂。"></a><strong>但，若还是从辩证唯物主义史观角度思考，有”存在即合理“。墨家的消亡和儒家的完全地位也是在当时不考虑大变革情况下，历史必然的选择。甚至如果坚持实用主义而不是封建统治，国家容易被地方和个人掌握的技术爆炸和社会群体思想激进，理性务实很容易导致国家长期分裂。</strong></h4><p><img src="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/mojia2.jpg"><br>在当时国家一统，儒家崇尚的中庸之道和君臣伦理，肯定是最适合封建统治的。而墨家思想身逢乱世尚可，但治世时无法承载统治者的意识形态功能。它虽固有逻辑、注重实用，但更多的是站在<strong>平民立场</strong>，甚至蕴藏着 <strong>“私有制”和反血缘宗法</strong>这一违反基本社会体系的思想。这种思想虽然“先锋”，但在当时的文化土壤上并不合适。<strong>故虽然墨家代表着科学技术的理性光辉，但由于它过于的“早熟”，违反了中国长期以来以家庭血缘为主的社会纽带的主流思想，</strong>且也没有提出一系列的解决方案。</p><p><strong>墨家跨出阴阳五行的中庸思想框架，讲求唯物，讲求“官无常贵、民无终贱”的平等思想，注定与君臣封建等级观念完全相悖。</strong>同时，墨家由于其“超前性”，甚至不能像法家那样与儒家成为 <strong>“一表一里”、互相补充</strong>的结构；也不能像道家与儒家那样以特殊的形式对立着（儒家讲有为，主大一统，道家讲无为，主小国寡民。儒道虽在价值观、处世哲学上相反，但却在内部都符合中庸和思维习惯，像是硬币的两面，是一种有机的对立统一）。但中国古代中儒家观念过于深厚与权力的过于集中，“权术”是大道而“技术”只是些旁门左道、雕虫小技。除了天文、农业、医疗、军事等方面因有着官方支持得以维持，其他方面几乎完全没有发展空间，墨家学说也被极力地打压在社会的底层。</p><h4 id="所以，可以得到这样的结论：故墨家虽有着与古希腊科学相似且相当的水平，但由于其超前性和与主流价值观相悖、与统治阶级需求相悖的性质，中途消绝几乎是必然。"><a href="#所以，可以得到这样的结论：故墨家虽有着与古希腊科学相似且相当的水平，但由于其超前性和与主流价值观相悖、与统治阶级需求相悖的性质，中途消绝几乎是必然。" class="headerlink" title="所以，可以得到这样的结论：故墨家虽有着与古希腊科学相似且相当的水平，但由于其超前性和与主流价值观相悖、与统治阶级需求相悖的性质，中途消绝几乎是必然。"></a><strong>所以，可以得到这样的结论：故墨家虽有着与古希腊科学相似且相当的水平，但由于其超前性和与主流价值观相悖、与统治阶级需求相悖的性质，中途消绝几乎是必然。</strong></h4><p><img src="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/liyuese.jpg"><br>同时我们发现，中国传统文化中儒主道辅的思想核心其实还在于提升“仁义礼智信”这些个人修养上，是一种<strong>人文主义精神</strong>。而墨家思想更像是解释这个世界的。它是一种<strong>客观意识的理性学科，核心在于如何认识这个世界并提高人类驾驭世界的能力</strong>。细品，这，<strong>就是中华文化中科学思想的基石。</strong></p><p>且从现在的角度细读墨家的经典，它在科学实践领域探索极广。从时空、运动、静止、物质结构这些角度都有涉及。最关键的是，它都是本着实践和理论结合、通过证伪求真的方法。这与近代科学中从客观现象中抽象事物本质的思想不谋而合。</p><h4 id="但，再辩证思考一下。"><a href="#但，再辩证思考一下。" class="headerlink" title="但，再辩证思考一下。"></a>但，再辩证思考一下。</h4><p><strong>或许，如果当时占领主导地位的儒家，不急着排斥墨家而是想着辩证地同化之，或许中国的科学发展将会是另外一种结局。但这只是一种美好的远景。</strong></p><p>事实上，令人遗憾的是，<strong>儒家也确实自始至终也没能将认知的视角从个人转化到自然界上.它过多地关心世俗社会的秩序和人伦运行的结构，最终沦落为了封建统治的工具。而中国古代的科学也因缺失墨家思想，一直以经验和臆断为主，缺乏严密的逻辑推理和理性实验证明，难以产生新的理论飞跃。或者甚至可以说没有成体系的理论。</strong></p><h4 id="综上，经过以上反复地辩证分析，可以进行一个小的总结："><a href="#综上，经过以上反复地辩证分析，可以进行一个小的总结：" class="headerlink" title="综上，经过以上反复地辩证分析，可以进行一个小的总结："></a>综上，经过以上反复地辩证分析，可以进行一个小的总结：</h4><p>墨家的夭折虽几乎是必然的，但也是遗憾的。我认为它的消亡原因、背景能很好地解释“李约瑟难题”。<strong>墨家的失传或者说没有像道家那样被结合到儒家思想中去，是中国科学发展的巨大损失。但毫无疑问，它代表的不仅是一门学说，而是一种思想，一种精神，一种不再总是关注个人、社会而是放眼自然，希望驾驭自然规律的勇气。</strong><br><img src="/2019/12/30/%E5%A2%A8%E5%AE%B6%E7%9A%84%E6%B6%88%E6%B2%89/mojiajiguan.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 个人思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人思考 </tag>
            
            <tag> 辩证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac快捷键介绍</title>
      <link href="/2019/12/03/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/03/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><strong>很多人不喜欢Mac系统，觉得很多东西不如Windows上手直观。（这让以“简单易用”为宗旨的某公司怎么洗？？）</strong></p><p><strong>主要原因其实是Mac系统的还是有一定的学习成本的（嗯，高贵的Unix贵族绝不屈服&#x2F;🐶）。本部分主要记录些常用的快捷键,多使用快捷键会极大地提高效率。</strong></p><p>Mac 快捷键非常多，但一切快捷键都以四个初始键作为起始，键盘上从左上到右下分别是⇧，⌃，⌥，⌘。由这些键引出各种功能。</p><table><thead><tr><th align="center">符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">⇧</td><td align="center">Shift</td></tr><tr><td align="center">⌃</td><td align="center">Control</td></tr><tr><td align="center">⌥</td><td align="center">Option</td></tr><tr><td align="center">⌘</td><td align="center">Command</td></tr></tbody></table><p>先给出几个有趣的快捷键：</p><p>快速调用 emoji 表情：⌘（command）+ ⌃（control）+ 空格键；</p><p>浏览器中将网页加入个人收藏：⌘（command）+ D</p><p>浏览器新建标签页：⌘（command）+ T</p><p>匹配目标格式粘贴：⌘（command） + ⇧ （shift ）+ ⌥（option） + V</p><p>打出 Apple logo 「 」：⇧（shift） + ⌥（option） + K</p><p>不同应用程序之间的切换：⌘（command）+ tab（⇥）</p><p>向前删除：Fn+delete</p><table><thead><tr><th>Ctrl + &#x2F;</th><th>⌘&#x2F;</th><th>以添加 “&#x2F;&#x2F;” 的方式添加注释</th><th>★★★★☆</th></tr></thead><tbody><tr><td>Ctrl + Shift + &#x2F;</td><td>⌘⌥&#x2F;</td><td>添加 “&#x2F;**&#x2F;” 的方式添加注释</td><td>★★★★☆</td></tr></tbody></table><table><thead><tr><th>Ctrl + X or Shift + Delete</th><th>⌘X</th><th>剪切</th><th>★★★★★</th></tr></thead><tbody><tr><td>Ctrl + C or Ctrl + Insert</td><td>⌘C</td><td>复制</td><td>★★★★★</td></tr><tr><td>Ctrl + V or Shift + Insert</td><td>⌘V</td><td>粘贴</td><td>★★★★★</td></tr><tr><td>Ctrl + Shift + V</td><td>⌘⇧V</td><td>从粘贴板中选择内容进行粘贴</td><td>★★★☆☆</td></tr></tbody></table><p>编辑：</p><table><thead><tr><th>组合键</th><th>功能</th></tr></thead><tbody><tr><td>Command-B</td><td>以粗体显示所选文本或切换文本粗体显示开&#x2F;关</td></tr><tr><td>Command-I</td><td>以斜体显示所选文本或切换文本斜体显示开&#x2F;关</td></tr><tr><td>Command-U</td><td>对所选文本加下划线或打开&#x2F;关闭加下划线功能</td></tr><tr><td>Command-T</td><td>显示或隐藏“字体”窗口</td></tr><tr><td><strong>fn-Delete</strong></td><td><strong>向前删除（适用于便携式 Mac 的内建键盘）</strong></td></tr><tr><td>fn-上箭头</td><td>向上滚动一页（相当于 Page Up 键）</td></tr><tr><td>fn-下箭头</td><td>向下滚动一页（相当于 Page Down 键）</td></tr><tr><td>fn-左箭头</td><td>滚动至文稿开头（相当于 Home 键）</td></tr><tr><td>fn-右箭头</td><td>滚动至文稿末尾（相当于 End 键）</td></tr><tr><td>Command-右箭头</td><td>将文本插入点移至当前行的<strong>行尾</strong></td></tr><tr><td>Command-左箭头</td><td>将文本插入点移至当前行的<strong>行首</strong></td></tr><tr><td>Command-下箭头</td><td>将文本插入点移至<strong>文稿末尾</strong></td></tr><tr><td>Command-上箭头</td><td>将文本插入点移至<strong>文稿开头</strong></td></tr><tr><td>Option-右箭头</td><td>将文本插入点移至下一个单词的末尾</td></tr><tr><td>Option-左箭头</td><td>将文本插入点移至上一个单词的开头</td></tr><tr><td>Option-Delete</td><td>删除光标左侧的词，以及词后的任何空格或标点符号</td></tr></tbody></table><table><thead><tr><th>fn-Delete</th><th>向前删除（适用于便携式 Mac 的内建键盘）</th></tr></thead><tbody><tr><td>fn-上箭头</td><td>向上滚动一页（相当于 Page Up 键）</td></tr><tr><td>fn-下箭头</td><td>向下滚动一页（相当于 Page Down 键）</td></tr><tr><td>fn-左箭头</td><td>滚动至文稿开头（相当于 Home 键）</td></tr><tr><td>fn-右箭头</td><td>滚动至文稿末尾（相当于 End 键）</td></tr></tbody></table><table><thead><tr><th align="center">Win &#x2F; Linux</th><th align="center">Mac</th><th align="center">注释</th><th align="center">使用频率</th></tr></thead><tbody><tr><td align="center">Ctrl + F</td><td align="center">⌘F</td><td align="center">查找</td><td align="center">★★★★★</td></tr></tbody></table><table><thead><tr><th>Ctrl + R</th><th>⌘R</th><th>替换</th><th>★★★★★</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>Command-Z</th><th>撤消上一命令（有些 app 可让您撤消多次）</th></tr></thead><tbody><tr><td>Command-Shift-Z</td><td>重做，恢复上次使用撤消进行的更改（有些 app 可让您重做多次）</td></tr></tbody></table><table><thead><tr><th>组合键</th><th>功能</th></tr></thead><tbody><tr><td>Command-Shift-3</td><td>将屏幕捕捉到文件</td></tr><tr><td>Command-Shift-Control-3</td><td>将屏幕内容捕捉到剪贴板</td></tr><tr><td>Command-Shift-4</td><td>将所选屏幕内容捕捉到一个文件，或按空格键仅捕捉一个窗口</td></tr><tr><td>Command-Shift-Control-4</td><td>将所选屏幕内容捕捉到剪贴板，或按空格键仅捕捉一个窗口</td></tr></tbody></table><table><thead><tr><th>Command-Option-R</th><th>在受支持的电脑上使用互联网恢复</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>附：Mac 键盘快捷键:<br><img src="/2019/12/03/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/mac.jpg"></p><p>另外，在 Windows PC 专用键盘上， 常用Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。。</p><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png" alt="img"></p><h2 id="剪切、拷贝、粘贴和其他常用快捷键"><a href="#剪切、拷贝、粘贴和其他常用快捷键" class="headerlink" title="剪切、拷贝、粘贴和其他常用快捷键"></a>剪切、拷贝、粘贴和其他常用快捷键</h2><ul><li><strong>Command-X</strong>：剪切所选项并拷贝到剪贴板。</li><li><strong>Command-C</strong>：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。</li><li><strong>Command-V</strong>：将剪贴板的内容粘贴到当前文稿或应用中。这同样适用于“访达”中的文件。</li><li><strong>Command-Z</strong>：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中，您可以撤销和重做多个命令。</li><li><strong>Command-A</strong>：全选各项。</li><li><strong>Command-F</strong>：查找文稿中的项目或打开“查找”窗口。</li><li><strong>Command-G</strong>：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。</li><li><strong>Command-H</strong>：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。</li><li><strong>Command-M</strong>：将最前面的窗口最小化至“程序坞”。要最小化最前面的应用的所有窗口，请按 Option-Command-M。</li><li><strong>Command-O：</strong>打开所选项，或打开一个对话框以选择要打开的文件。</li><li><strong>Command-P</strong>：打印当前文稿。</li><li><strong>Command-S</strong>：存储当前文稿。</li><li><strong>Command-T</strong>：打开新标签页。</li><li><strong>Command-W</strong>：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。</li><li><strong>Option-Command-Esc</strong>：<a href="https://support.apple.com/zh-cn/HT201276">强制退出</a>应用。</li><li><strong>Command–空格键</strong>：显示或隐藏“<a href="https://support.apple.com/zh-cn/HT201744">聚焦</a>”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果您<a href="https://support.apple.com/zh-cn/guide/mac-help/type-in-another-language-with-input-sources-mchlp1406/mac">使用多个输入源</a>以便用不同的语言键入内容，这些快捷键会更改输入源而非显示“聚焦”。了解如何<a href="https://support.apple.com/zh-cn/guide/mac-help/change-a-conflicting-keyboard-shortcut-mh35591/mac">更改冲突的键盘快捷键</a>。）</li><li><strong>Control-Command–空格键</strong>：显示字符检视器，您可以从中选择<a href="https://support.apple.com/zh-cn/HT201586">表情符号和其他符号</a>。</li><li><strong>Control-Command-F</strong>：全屏使用应用（如果应用支持）。</li><li><strong>空格键</strong>：使用<a href="https://support.apple.com/zh-cn/guide/mac-help/quick-look-files-and-folders-mh14119/mac">快速查看</a>来预览所选项。</li><li><strong>Command-Tab</strong>：在打开的应用中切换到下一个最近使用的应用。</li><li><strong>Shift-Command-5</strong>：在 <a href="https://support.apple.com/zh-cn/HT201475">macOS Mojave</a> 中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。<a href="https://support.apple.com/zh-cn/HT201361">进一步了解屏幕快照</a>。</li><li><strong>Shift-Command-N：</strong>在“访达”中创建一个新文件夹。</li><li>**Command-逗号 (,)**：打开最前面的应用的偏好设置。</li></ul><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png" alt="img"></p><h2 id="睡眠、退出登录和关机快捷键"><a href="#睡眠、退出登录和关机快捷键" class="headerlink" title="睡眠、退出登录和关机快捷键"></a>睡眠、退出登录和关机快捷键</h2><p>在这些快捷键中，您可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。</p><ul><li><strong>电源按钮</strong>：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住<a href="https://support.apple.com/zh-cn/HT201150">则会强制您的 Mac 关机</a>。</li><li><strong>Option–Command–电源按钮</strong>*或 <strong>Option–Command–Media Eject（Option–Command–介质推出键）</strong>：将您的 Mac 置于睡眠状态。</li><li><strong>Control–Shift–电源按钮</strong>*或 <strong>Control–Shift–Media Eject（Control–Shift–介质推出键）</strong>：将显示器置于睡眠状态。</li><li><strong>Control–电源按钮</strong>*或 <strong>Control–Media Eject（Control–介质推出键）</strong>：显示一个对话框，询问您是要重新启动、睡眠还是关机。</li><li><strong>Control–Command–Power 电源按钮</strong>：*强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。</li><li><strong>Control–Command–Media Eject（Control–Command–介质推出键）</strong>：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</li><li><strong>Control–Option-Command–电源按钮</strong>*或 <strong>Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）</strong>：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</li><li><strong>Shift–Command–Q</strong>：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。</li></ul><p>* 不适用于<a href="https://support.apple.com/zh-cn/HT207054">触控 ID 传感器</a>。</p><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png" alt="img"></p><h2 id="访达和系统快捷键"><a href="#访达和系统快捷键" class="headerlink" title="访达和系统快捷键"></a>访达和系统快捷键</h2><ul><li><strong>Command-D</strong>：复制所选文件。</li><li><strong>Command-E</strong>：推出所选磁盘或宗卷。</li><li><strong>Command-F</strong>：在“访达”窗口中开始“聚焦”搜索。</li><li><strong>Command-I</strong>：显示所选文件的“显示简介”窗口。</li><li><strong>Command-R</strong>：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在<a href="https://support.apple.com/zh-cn/HT201541">“软件更新”偏好设置</a>中，再次检查有没有软件更新。</li><li><strong>Shift-Command-C</strong>：打开“电脑”窗口。</li><li><strong>Shift-Command-D</strong>：打开“桌面”文件夹。</li><li><strong>Shift-Command-F</strong>：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。</li><li><strong>Shift-Command-G</strong>：打开“前往文件夹”窗口。</li><li><strong>Shift-Command-H</strong>：打开当前 macOS 用户帐户的个人文件夹。</li><li><strong>Shift-Command-I</strong>：打开 iCloud 云盘。</li><li><strong>Shift-Command-K</strong>：打开“网络”窗口。</li><li><strong>Option-Command-L</strong>：打开“下载”文件夹。</li><li><strong>Shift-Command-N：</strong>新建文件夹。</li><li><strong>Shift-Command-O</strong>：打开“文稿”文件夹。</li><li><strong>Shift-Command-P</strong>：在“访达”窗口中显示或隐藏预览面板。</li><li><strong>Shift-Command-R</strong>：打开“隔空投送”窗口。</li><li><strong>Shift-Command-T</strong>：显示或隐藏“访达”窗口中的标签页栏。</li><li><strong>Ctrl-Shift-Command-T</strong>：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）</li><li><strong>Shift-Command-U</strong>：打开“实用工具”文件夹。</li><li><strong>Option-Command-D</strong>：显示或隐藏“程序坞”。</li><li><strong>Control-Command-T</strong>：将所选项添加到边栏（OS X Mavericks 或更高版本）。</li><li><strong>Option-Command-P</strong>：隐藏或显示“访达”窗口中的路径栏。</li><li><strong>Option-Command-S</strong>：隐藏或显示“访达”窗口中的边栏。</li><li>**Command–斜线 (&#x2F;)**：隐藏或显示“访达”窗口中的状态栏。</li><li><strong>Command-J</strong>：显示“显示”选项。</li><li><strong>Command-K</strong>：打开“连接服务器”窗口。</li><li><strong>Command-L</strong>：为所选项制作替身。</li><li><strong>Command-N</strong>：打开一个新的“访达”窗口。</li><li><strong>Option-Command-N</strong>：新建智能文件夹。</li><li><strong>Command-T</strong>：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。</li><li><strong>Option-Command-T</strong>：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。</li><li><strong>Option-Command-V</strong>：移动：将剪贴板中的文件从原始位置移动到当前位置。</li><li><strong>Command-Y</strong>：使用“快速查看”预览所选文件。</li><li><strong>Option-Command-Y</strong>：显示所选文件的快速查看幻灯片显示。</li><li><strong>Command-1</strong>：以图标方式显示“访达”窗口中的项目。</li><li><strong>Command-2</strong>：以列表方式显示“访达”窗口中的项目。</li><li><strong>Command-3</strong>：以分栏方式显示“访达”窗口中的项目。</li><li><strong>Command-4</strong>：以封面流方式显示“访达”窗口中的项目。</li><li>**Command–左中括号 ([)**：前往上一文件夹。</li><li>**Command–右中括号 (])**：前往下一个文件夹。</li><li><strong>Command–上箭头</strong>：打开包含当前文件夹的文件夹。</li><li><strong>Command–Control–上箭头</strong>：在新窗口中打开包含当前文件夹的文件夹。</li><li><strong>Command–下箭头</strong>：打开所选项。</li><li><strong>右箭头</strong>：打开所选文件夹。这个快捷键仅在列表视图中有效。</li><li><strong>左箭头</strong>：关闭所选文件夹。这个快捷键仅在列表视图中有效。</li><li><strong>Command-Delete</strong>：将所选项移到废纸篓。</li><li><strong>Shift-Command-Delete</strong>：清倒废纸篓。</li><li><strong>Option-Shift-Command-Delete</strong>：清倒废纸篓而不显示确认对话框。</li><li><strong>Command–调高亮度</strong>：打开或关闭<a href="https://support.apple.com/zh-cn/HT204592">目标显示器模式</a>。</li><li><strong>Command–调低亮度</strong>：当您的 Mac 连接到多台显示器时，打开或关闭<a href="https://support.apple.com/zh-cn/HT202351#mirroring">视频镜像</a>。</li><li><strong>Option–调高亮度</strong>：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。</li><li><strong>Control–调高亮度</strong>或 <strong>Control–调低亮度</strong>：更改外部显示器的亮度（如果显示器支持）。</li><li><strong>Option-Shift–调高亮度</strong>或 <strong>Option-Shift–调低亮度</strong>：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。</li><li><strong>Option–“调度中心”</strong>：打开“调度中心”偏好设置。</li><li><strong>Command–“调度中心”</strong>：显示桌面。</li><li><strong>Control–下箭头</strong>：显示最前面的应用的所有窗口。</li><li><strong>Option–调高音量</strong>：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。</li><li><strong>Option-Shift–调高音量</strong>或 <strong>Option-Shift–调低音量</strong>：以较小的步幅调节音量。</li><li><strong>Option–键盘调高亮度</strong>：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。</li><li><strong>Option-Shift–键盘调高亮度</strong>或 <strong>Option-Shift–键盘调低亮度</strong>：以较小的步幅调节键盘亮度。</li><li><strong>连按 Option 键</strong>：在单独的窗口中打开项目，然后关闭原始窗口。</li><li><strong>连按 Command 键</strong>：在单独的标签页或窗口中打开文件夹。</li><li><strong>按住 Command 键拖移到另一个宗卷</strong>：将拖移的项目移到另一个宗卷，而不是拷贝它。</li><li><strong>按住 Option 键拖移</strong>：拷贝托移的项目。拖移项目时指针会随之变化。</li><li><strong>按住 Option-Command 键拖移</strong>：为拖移的项目制作替身。拖移项目时指针会随之变化。</li><li><strong>按住 Option 键点按开合三角</strong>：打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。</li><li><strong>按住 Command 键点按窗口标题</strong>：查看包含当前文件夹的文件夹。</li><li><a href="https://support.apple.com/zh-cn/guide/mac-help/select-items-mchlp1378/mac">了解如何使用 Command 或 Shift 在“访达”中选择多个项目</a>。</li><li>点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。</li></ul><p><img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/divider.png" alt="img"></p><h2 id="文稿快捷键"><a href="#文稿快捷键" class="headerlink" title="文稿快捷键"></a>文稿快捷键</h2><p>这些快捷键的行为可能因您使用的应用而异。</p><ul><li><strong>Command-B</strong>：以粗体显示所选文本，或者打开或关闭粗体显示功能。</li><li><strong>Command-I</strong>：以斜体显示所选文本，或者打开或关闭斜体显示功能。</li><li><strong>Command-K</strong>：添加网页链接。</li><li><strong>Command-U</strong>：对所选文本加下划线，或者打开或关闭加下划线功能。</li><li><strong>Command-T</strong>：显示或隐藏“字体”窗口。</li><li><strong>Command-D</strong>：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。</li><li><strong>Control-Command-D</strong>：显示或隐藏所选字词的定义。</li><li>**Shift-Command–冒号 (:)**：显示“拼写和语法”窗口。</li><li>**Command–分号 (;)**：查找文稿中拼写错误的字词。</li><li><strong>Option-Delete</strong>：删除插入点左边的字词。</li><li><strong>Control-H</strong>：删除插入点左边的字符。也可以使用 Delete 键。</li><li><strong>Control-D</strong>：删除插入点右边的字符。也可以使用 Fn-Delete。</li><li><strong>Fn-Delete</strong>：在没有向前删除  键的键盘上向前删除。也可以使用 Control-D。</li><li><strong>Control-K</strong>：删除插入点与行或段落末尾处之间的文本。</li><li><strong>Fn–上箭头</strong>：Page Up：向上滚动一页。</li><li><strong>Fn–下箭头</strong>：Page Down：向下滚动一页。</li><li><strong>Fn–左箭头：</strong>Home：滚动到文稿开头。</li><li><strong>Fn–右箭头</strong>：End：滚动到文稿末尾。</li><li><strong>Command–上箭头</strong>：将插入点移至文稿开头。</li><li><strong>Command–下箭头</strong>：将插入点移至文稿末尾。</li><li><strong>Command–左箭头</strong>：将插入点移至当前行的行首。</li><li><strong>Command–右箭头</strong>：将插入点移至当前行的行尾。</li><li><strong>Option–左箭头</strong>：将插入点移至上一字词的词首。</li><li><strong>Option–右箭头</strong>：将插入点移至下一字词的词尾。</li><li><strong>Shift-Command–上箭头</strong>：选中插入点与文稿开头之间的文本。</li><li><strong>Shift-Command–下箭头</strong>：选中插入点与文稿末尾之间的文本。</li><li><strong>Shift-Command–左箭头</strong>：选中插入点与当前行行首之间的文本。</li><li><strong>Shift-Command–右箭头</strong>：选中插入点与当前行行尾之间的文本。</li><li><strong>Shift–上箭头</strong>：将文本选择范围扩展到上一行相同水平位置的最近字符处。</li><li><strong>Shift–下箭头</strong>：将文本选择范围扩展到下一行相同水平位置的最近字符处。</li><li><strong>Shift–左箭头</strong>：将文本选择范围向左扩展一个字符。</li><li><strong>Shift–右箭头</strong>：将文本选择范围向右扩展一个字符。</li><li><strong>Option–Shift–上箭头</strong>：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。</li><li><strong>Option–Shift–下箭头</strong>：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。</li><li><strong>Option–Shift–左箭头</strong>：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。</li><li><strong>Option–Shift–左箭头</strong>：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。</li><li><strong>Control–A</strong>：移至行或段落的开头。</li><li><strong>Control–E</strong>：移至行或段落的末尾。</li><li><strong>Control–F</strong>：向前移动一个字符。</li><li><strong>Control–B</strong>：向后移动一个字符。</li><li><strong>Control–L</strong>：将光标或所选内容置于可见区域中央。</li><li><strong>Control–P</strong>：上移一行。</li><li><strong>Control–N</strong>：下移一行。</li><li><strong>Control–O</strong>：在插入点后新插入一行。</li><li><strong>Control–T</strong>：将插入点后面的字符与插入点前面的字符交换。</li><li>**Command–左花括号 ({)**：左对齐。</li><li>**Command–右花括号 (})**：右对齐。</li><li>**Shift-Command–竖线 (|)**：居中对齐。</li><li><strong>Option-Command-F</strong>：前往搜索栏。</li><li><strong>Option-Command-T</strong>：显示或隐藏应用中的工具栏。</li><li><strong>Option-Command-C</strong>：拷贝样式：将所选项的格式设置拷贝到剪贴板。</li><li><strong>Option-Command-V</strong>：粘贴样式：将拷贝的样式应用到所选项。</li><li><strong>Option-Shift-Command-V</strong>：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。</li><li><strong>Option-Command-I</strong>：显示或隐藏检查器窗口。</li><li><strong>Shift-Command-P</strong>：页面设置：显示用于选择文稿设置的窗口。</li><li><strong>Shift-Command-S</strong>：显示“存储为”对话框或复制当前文稿。</li><li>**Shift-Command-减号 (-)**：缩小所选项。</li><li>**Shift-Command-加号 (+)**：放大所选项。Command–等号 (&#x3D;) 可实现相同的功能。</li><li>**Shift-Command–问号 (?)**：打开“帮助”菜单。</li></ul><p>洗完了，好累。。。以上</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百炼OJ-C++练习</title>
      <link href="/2019/12/01/%E7%99%BE%E7%82%BCOJ%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/12/01/%E7%99%BE%E7%82%BCOJ%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="自己在百炼OJ上练习的一些算法题"><a href="#自己在百炼OJ上练习的一些算法题" class="headerlink" title="自己在百炼OJ上练习的一些算法题"></a>自己在百炼OJ上练习的一些算法题</h1><h2 id="1088"><a href="#1088" class="headerlink" title="1088"></a>1088</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//http://bailian.openjudge.cn/practice/1088/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> moun[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-type">int</span> R,C;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(cnt[x][y]&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> cnt[x][y];<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;++i)&#123;<br>        <span class="hljs-type">int</span> nx=x+dx[i],ny=y+dy[i];<br>        <span class="hljs-keyword">if</span>(nx&gt;<span class="hljs-number">0</span>&amp;&amp;nx&lt;=R&amp;&amp;ny&gt;<span class="hljs-number">0</span>&amp;&amp;ny&lt;=C&amp;&amp;moun[nx][ny]&lt;moun[x][y]) <br>            ans=<span class="hljs-built_in">max</span>(ans,<span class="hljs-number">1</span>+<span class="hljs-built_in">dfs</span>(nx,ny));<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[x][y]=ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;R,&amp;C);<br>    <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(cnt));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=R;++i) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=C;++j) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;moun[i][j]);<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=R;++i) <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=C;++j) <br>        ans=<span class="hljs-built_in">max</span>(ans,<span class="hljs-built_in">dfs</span>(i,j));<br>    ++ans;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1163"><a href="#1163" class="headerlink" title="1163"></a>1163</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>    </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 101    </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-type">int</span> D[MAX][MAX];    <br><span class="hljs-type">int</span> n;    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MaxSum</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;      <br>    <span class="hljs-keyword">if</span>(i==n)    <br>        <span class="hljs-keyword">return</span> D[i][j];      <br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">MaxSum</span>(i+<span class="hljs-number">1</span>,j);      <br>    <span class="hljs-type">int</span> y = <span class="hljs-built_in">MaxSum</span>(i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>);      <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(x,y)+D[i][j];    <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;      <br>    <span class="hljs-type">int</span> i,j;      <br>    cin &gt;&gt; n;      <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)     <br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++)          <br>            cin &gt;&gt; D[i][j];      <br>    cout &lt;&lt; <span class="hljs-built_in">MaxSum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) &lt;&lt; endl;    <br>&#125;    <br></code></pre></td></tr></table></figure><h2 id="1191"><a href="#1191" class="headerlink" title="1191"></a>1191</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 6400*6400*15</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> map[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>],n;<br><span class="hljs-type">double</span> m=<span class="hljs-number">0</span>,mn=inf;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> y2)</span></span>&#123;<br>    <span class="hljs-type">double</span> sm=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x1;i&lt;x2;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=y1;j&lt;y2;j++)<br>            sm+=map[i][j];<br>    <span class="hljs-keyword">return</span> sm;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> dep,<span class="hljs-type">double</span> sm)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(dep==n)&#123;<br>        <span class="hljs-type">double</span> x=<span class="hljs-built_in">add</span>(u,d,l,r);<br>        <span class="hljs-keyword">return</span> (x-m)*(x-m);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=u+<span class="hljs-number">1</span>;i&lt;d;i++)&#123;<br>        <span class="hljs-type">double</span> x=<span class="hljs-built_in">add</span>(u,i,l,r);<br>        sm+=(x-m)*(x-m);<br>        <span class="hljs-keyword">if</span>(sm&gt;=mn)&#123;<br>            sm-=(x-m)*(x-m);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">double</span> y=<span class="hljs-built_in">dfs</span>(i,d,l,r,dep+<span class="hljs-number">1</span>,sm);<br>        <span class="hljs-keyword">if</span>(sm+y&lt;mn) mn=sm+y;<br>        sm-=(x-m)*(x-m);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=u+<span class="hljs-number">1</span>;i&lt;d;i++)&#123;<br>        <span class="hljs-type">double</span> x=<span class="hljs-built_in">add</span>(i,d,l,r);<br>        sm+=(x-m)*(x-m);<br>        <span class="hljs-keyword">if</span>(sm&gt;=mn)&#123;<br>            sm-=(x-m)*(x-m);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">double</span> y=<span class="hljs-built_in">dfs</span>(u,i,l,r,dep+<span class="hljs-number">1</span>,sm);<br>        <span class="hljs-keyword">if</span>(sm+y&lt;mn) mn=sm+y;<br>        sm-=(x-m)*(x-m);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l+<span class="hljs-number">1</span>;i&lt;r;i++)&#123;<br>        <span class="hljs-type">double</span> x=<span class="hljs-built_in">add</span>(u,d,l,i);<br>        sm+=(x-m)*(x-m);<br>        <span class="hljs-keyword">if</span>(sm&gt;=mn)&#123;<br>            sm-=(x-m)*(x-m);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">double</span> y=<span class="hljs-built_in">dfs</span>(u,d,i,r,dep+<span class="hljs-number">1</span>,sm);<br>        <span class="hljs-keyword">if</span>(sm+y&lt;mn) mn=sm+y;<br>        sm-=(x-m)*(x-m);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l+<span class="hljs-number">1</span>;i&lt;r;i++)&#123;<br>        <span class="hljs-type">double</span> x=<span class="hljs-built_in">add</span>(u,d,i,r);<br>        sm+=(x-m)*(x-m);<br>        <span class="hljs-keyword">if</span>(sm&gt;=mn)&#123;<br>            sm-=(x-m)*(x-m);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">double</span> y=<span class="hljs-built_in">dfs</span>(u,d,l,i,dep+<span class="hljs-number">1</span>,sm);<br>        <span class="hljs-keyword">if</span>(sm+y&lt;mn) mn=sm+y;<br>        sm-=(x-m)*(x-m);<br>    &#125;<br>    <span class="hljs-keyword">return</span> inf;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">double</span> sm=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">8</span>;j++)&#123;<br>            cin&gt;&gt;map[i][j];<br>            sm+=map[i][j];<br>        &#125;<br>    m=sm/n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>        mn=<span class="hljs-number">0</span>;<br>    cout&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">3</span>)&lt;&lt;<span class="hljs-built_in">sqrt</span>(mn/n)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2339"><a href="#2339" class="headerlink" title="2339"></a>2339</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> M,N,T;<br>cin&gt;&gt;M&gt;&gt;N&gt;&gt;T;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;M;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N;j++)<br>cin&gt;&gt;s[i][j];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;t&lt;T;t++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;M<span class="hljs-number">-1</span>;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N<span class="hljs-number">-1</span>;j++)<br><span class="hljs-keyword">if</span>(s[i][j])<br>(ch=cin.<span class="hljs-built_in">get</span>())==<span class="hljs-string">&#x27;R&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2682"><a href="#2682" class="headerlink" title="2682"></a>2682</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXSIZE=<span class="hljs-number">10000</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> N,M;<br>cin&gt;&gt;N&gt;&gt;M;<br><span class="hljs-type">int</span> s[MAXSIZE]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>cin&gt;&gt;s[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>*(s+N+j)=*(s+j+N-M);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N-M;j++)<br>*(s+N+M+j)=*(s+j);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N;j++)<br>*(s+j)=*(s+N+j);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>cout&lt;&lt;s[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure><h2 id="2694"><a href="#2694" class="headerlink" title="2694"></a>2694</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> k[<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,k);<br><span class="hljs-keyword">switch</span>(k[<span class="hljs-number">0</span>])&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>()+<span class="hljs-built_in">f</span>();<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>()-<span class="hljs-built_in">f</span>();<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>()*<span class="hljs-built_in">f</span>();<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>()/<span class="hljs-built_in">f</span>();<br><span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> <span class="hljs-built_in">atof</span>(k);&#125;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>,<span class="hljs-built_in">f</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="2712"><a href="#2712" class="headerlink" title="2712"></a>2712</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mon[<span class="hljs-number">13</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">interval</span><span class="hljs-params">(<span class="hljs-type">int</span> m1,<span class="hljs-type">int</span> d1,<span class="hljs-type">int</span> m2,<span class="hljs-type">int</span> d2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(m1==m2)<br><span class="hljs-keyword">return</span> d2-d1;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> t=m2-m1;<br><span class="hljs-type">int</span> sum=mon[m1]-d1;<br><span class="hljs-keyword">while</span>(--t)<br>sum=sum+mon[++m1];<br>sum+=d2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> N,iter;<br>cin&gt;&gt;N;<br><span class="hljs-type">int</span> m1[<span class="hljs-number">10000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> d1[<span class="hljs-number">10000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> m2[<span class="hljs-number">10000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> d2[<span class="hljs-number">10000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> c[<span class="hljs-number">10000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>&#123;<br>cin&gt;&gt;m1[i]&gt;&gt;d1[i]&gt;&gt;c[i]&gt;&gt;m2[i]&gt;&gt;d2[i];<br>iter=<span class="hljs-built_in">interval</span>(m1[i],d1[i],m2[i],d2[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;iter;j++)<br>c[i]=<span class="hljs-number">2</span>*c[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i;i&lt;N;i++)<br>cout&lt;&lt;c[i]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2943"><a href="#2943" class="headerlink" title="2943"></a>2943</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a&gt;b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> N;<br>cin&gt;&gt;N;<br>vector&lt;<span class="hljs-type">int</span>&gt; weight;<br><span class="hljs-type">int</span> temp;<br>string s1;<br>map&lt;<span class="hljs-type">int</span>,string&gt; mapcolor;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>&#123;<br>cin&gt;&gt;temp;<br>weight.<span class="hljs-built_in">push_back</span>(temp);<br>cin&gt;&gt;s1;<br>mapcolor[temp]=s1;<br>&#125;<br><span class="hljs-built_in">sort</span>(weight.<span class="hljs-built_in">begin</span>(),weight.<span class="hljs-built_in">end</span>(),compare);<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it=weight.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>&#123;<br>cout&lt;&lt;mapcolor[*it++]&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2975"><a href="#2975" class="headerlink" title="2975"></a>2975</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> key[<span class="hljs-number">30</span>]=<span class="hljs-string">&quot;VWXYZABCDEFGHIJKLMNOPQRSTU&quot;</span>;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">gets</span>(buf);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(buf)&gt;<span class="hljs-number">7</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-type">char</span> ch;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;ch=<span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(ch&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>) <span class="hljs-built_in">putchar</span>(key[ch-<span class="hljs-string">&#x27;A&#x27;</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(ch);<br>        &#125;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>        <span class="hljs-built_in">gets</span>(buf);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4148"><a href="#4148" class="headerlink" title="4148"></a>4148</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> s[<span class="hljs-number">10000</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> k[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> M=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)<br>cin&gt;&gt;s[i][j];<br><span class="hljs-keyword">if</span>(s[i][<span class="hljs-number">0</span>]==<span class="hljs-number">-1</span>&amp;&amp;s[i][<span class="hljs-number">1</span>]==<span class="hljs-number">-1</span>&amp;&amp;s[i][<span class="hljs-number">2</span>]==<span class="hljs-number">-1</span>&amp;&amp;s[i][<span class="hljs-number">3</span>]==<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">break</span>;<br>k[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(!(((k[i]-s[i][<span class="hljs-number">0</span>])%<span class="hljs-number">23</span>==<span class="hljs-number">0</span>)&amp;&amp;((k[i]-s[i][<span class="hljs-number">1</span>])%<span class="hljs-number">28</span>==<span class="hljs-number">0</span>)&amp;&amp;((k[i]-s[i][<span class="hljs-number">2</span>])%<span class="hljs-number">33</span>==<span class="hljs-number">0</span>)))<br>&#123;<br><span class="hljs-keyword">if</span>(k[i]==<span class="hljs-number">21252</span>) <span class="hljs-keyword">break</span>;<br> k[i]++;<br>&#125;<br>k[i]=k[i]-s[i][<span class="hljs-number">3</span>];<br>M++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=M;i++)<br>cout&lt;&lt;<span class="hljs-string">&quot;Case &quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;: the next triple peak occurs in &quot;</span>&lt;&lt;k[i<span class="hljs-number">-1</span>]&lt;&lt;<span class="hljs-string">&quot; days.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br><br></code></pre></td></tr></table></figure><h1 id="往年考试题"><a href="#往年考试题" class="headerlink" title="往年考试题"></a>往年考试题</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> N;<br>cin&gt;&gt;N;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b[<span class="hljs-number">101</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br><span class="hljs-keyword">while</span>(N%i==<span class="hljs-number">0</span>)<br>&#123;<br>N=N/i;<br>b[i]++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-number">2</span>&amp;&amp;flag==<span class="hljs-number">0</span>)<br>&#123;cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;^&quot;</span>&lt;&lt;b[i];flag=<span class="hljs-number">1</span>;&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-number">1</span>&amp;&amp;flag==<span class="hljs-number">0</span>)<br>&#123;cout&lt;&lt;i;flag=<span class="hljs-number">1</span>;&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-number">2</span>&amp;&amp;flag==<span class="hljs-number">1</span>)<br>cout&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;^&quot;</span>&lt;&lt;b[i];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b[i]==<span class="hljs-number">1</span>&amp;&amp;flag==<span class="hljs-number">1</span>)<br>cout&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s1;<br><span class="hljs-type">char</span> s[<span class="hljs-number">12</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b[<span class="hljs-number">12</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>cin&gt;&gt;s1;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">12</span>;i++)<br>&#123;cin&gt;&gt;s[i];<br>b[i]=(<span class="hljs-type">int</span>)(s[i]-(<span class="hljs-string">&#x27;0&#x27;</span>));&#125;<br>cout&lt;&lt;s1&lt;&lt;endl;<br>sum=b[<span class="hljs-number">0</span>]*<span class="hljs-number">1</span>+b[<span class="hljs-number">2</span>]*<span class="hljs-number">2</span>+b[<span class="hljs-number">3</span>]*<span class="hljs-number">3</span>+b[<span class="hljs-number">4</span>]*<span class="hljs-number">4</span>+b[<span class="hljs-number">6</span>]*<span class="hljs-number">5</span>+b[<span class="hljs-number">7</span>]*<span class="hljs-number">6</span>+b[<span class="hljs-number">8</span>]*<span class="hljs-number">7</span>+b[<span class="hljs-number">9</span>]*<span class="hljs-number">8</span>+b[<span class="hljs-number">10</span>]*<span class="hljs-number">9</span>;<br>sum=sum%<span class="hljs-number">11</span>;<br><span class="hljs-keyword">if</span>(sum==b[<span class="hljs-number">12</span>])<br>cout&lt;&lt;<span class="hljs-string">&quot;Right&quot;</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">12</span>;i++)<br>cout&lt;&lt;s[i];<br>cout&lt;&lt;sum;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;queue&quot;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span><span class="hljs-comment">/*边的权值的类型*/</span>&gt;   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span><span class="hljs-comment">//边的定义  </span><br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Edge</span>(<span class="hljs-type">int</span> dest, DistType weight)  <br>    &#123;  <br>        m_nposTable=dest;  <br>        m_distWeight=weight;   <br>        m_pnext=<span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Edge</span>()  <br>    &#123;  <br>  <br>    &#125;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-type">int</span> m_nposTable;<span class="hljs-comment">//该边的目的顶点在顶点集中的位置  </span><br>    DistType m_distWeight;<span class="hljs-comment">//边的权重值  </span><br>    Edge&lt;DistType&gt; *m_pnext;<span class="hljs-comment">//下一条边（注意不是下一个顶点，因为m_nposTable已经知道了这个顶点的位置）  </span><br>&#125;;  <br><span class="hljs-comment">//声明  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span><span class="hljs-comment">/*顶点集名字类型*/</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span><span class="hljs-comment">/*距离的数据类型*/</span>&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>;  <br>  <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span><span class="hljs-comment">/*顶点集名字类型*/</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span><span class="hljs-comment">/*距离的数据类型*/</span>&gt;   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vertex</span><span class="hljs-comment">//顶点的定义  </span><br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Vertex</span>()  <br>    &#123;  <br>        padjEdge=<span class="hljs-literal">NULL</span>;  <br>        m_vertexName=<span class="hljs-number">0</span>;  <br>    &#125;  <br>    ~<span class="hljs-built_in">Vertex</span>()  <br>    &#123;  <br>        Edge&lt;DistType&gt; *pmove = padjEdge;  <br>        <span class="hljs-keyword">while</span> (pmove)  <br>        &#123;  <br>            padjEdge = pmove-&gt;m_pnext;  <br>            <span class="hljs-keyword">delete</span> pmove;  <br>            pmove = padjEdge;  <br>        &#125;  <br>    &#125;  <br>  <br><span class="hljs-keyword">private</span>:  <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>&lt;NameType,DistType&gt;;<span class="hljs-comment">//允许Graph类任意访问  </span><br>    NameType m_vertexName;<span class="hljs-comment">//顶点中的数据内容  </span><br>    Edge&lt;DistType&gt; *padjEdge;<span class="hljs-comment">//顶点的邻边  </span><br>  <br>&#125;;  <br>  <br>  <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span><span class="hljs-comment">/*顶点集名字类型*/</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span><span class="hljs-comment">/*距离的数据类型*/</span>&gt;   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span>  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> size = m_nDefaultSize<span class="hljs-comment">/*图顶点集的规模*/</span>)  <br>    &#123;  <br>        m_pVertexTable = <span class="hljs-keyword">new</span> Vertex&lt;NameType, DistType&gt;[size];  <span class="hljs-comment">//为顶点集分配内存  </span><br>        <span class="hljs-keyword">if</span> (m_pVertexTable == <span class="hljs-literal">NULL</span>)  <br>        &#123;  <br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>        &#125;  <br>        m_numVertexs=<span class="hljs-number">0</span>;  <br>        m_nmaxSize=size;  <br>        m_nnumEdges=<span class="hljs-number">0</span>;  <br>    &#125;  <br>  <br>    ~<span class="hljs-built_in">Graph</span>()  <br>    &#123;  <br>        Edge&lt;DistType&gt; *pmove;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_numVertexs; i++)  <br>        &#123;  <br>            pmove = <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[i].padjEdge;  <br>            <span class="hljs-keyword">if</span> (pmove)&#123;  <br>                <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[i].padjEdge = pmove-&gt;m_pnext;  <br>                <span class="hljs-keyword">delete</span> pmove;  <br>                pmove = <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[i].padjEdge;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">delete</span>[] m_pVertexTable;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNumEdges</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//获得边的数目  </span><br>        <span class="hljs-keyword">return</span> m_nnumEdges/<span class="hljs-number">2</span>;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNumVertexs</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//获得顶点数目  </span><br>        <span class="hljs-keyword">return</span> m_numVertexs;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsGraphFull</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>  </span><br><span class="hljs-function">    </span>&#123;     <span class="hljs-comment">//图满的?  </span><br>        <span class="hljs-keyword">return</span> m_nmaxSize == m_numVertexs;  <br>    &#125;  <br>    <span class="hljs-comment">//在顶点集中位置为v1和v2的顶点之间插入边  </span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2, DistType weight=m_Infinity)</span></span>;   <br>    <span class="hljs-comment">//插入顶点名字为vertex的顶点  </span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertVertex</span><span class="hljs-params">(<span class="hljs-type">const</span> NameType vertex)</span></span>;    <br>    <span class="hljs-comment">//打印图  </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintGraph</span><span class="hljs-params">()</span></span>;     <br>    <span class="hljs-comment">//顶点v到其他各个顶点的最短路径（包括自身）  </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> v, DistType *shotestpath)</span></span>;  <br>    <span class="hljs-comment">//获取顶点集中位置为v1和v2的顶点之间边的权重值  </span><br>    <span class="hljs-function">DistType <span class="hljs-title">GetWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span></span>;   <br>    <span class="hljs-comment">//获得在顶点集中的位置为v的顶点的名字  </span><br>    <span class="hljs-function">NameType <span class="hljs-title">GetVertexValue</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;  <br>    <span class="hljs-comment">//用该顶点的名字来寻找其在顶点集中的位置  </span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetVertexPosTable</span><span class="hljs-params">(<span class="hljs-type">const</span> NameType vertex)</span></span>;    <br>  <br>  <br>    <span class="hljs-comment">//深度搜索优先  </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> *visited)</span></span>;        <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">()</span></span>;  <br>    <span class="hljs-comment">//广度优先搜索  </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> *visited)</span></span>;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">()</span></span>;  <br>    <span class="hljs-comment">//获取第v个顶点的名字（或者说内容）  </span><br>    <span class="hljs-function">NameType <span class="hljs-title">GetVertexName</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;     <br>    <span class="hljs-comment">//获得顶点v的第一个相邻顶点，如果没有就返回-1  </span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>;         <br>    <span class="hljs-comment">//获得顶点v1的邻点v2后的邻点  </span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetNext</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span></span>;  <br>  <br><span class="hljs-keyword">private</span>:  <br>    Vertex&lt;NameType, DistType&gt; *m_pVertexTable;   <span class="hljs-comment">//顶点集  </span><br>    <span class="hljs-type">int</span> m_numVertexs;<span class="hljs-comment">//图中当前的顶点数量  </span><br>    <span class="hljs-type">int</span> m_nmaxSize;<span class="hljs-comment">//图允许的最大顶点数  </span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> m_nDefaultSize = <span class="hljs-number">10</span>;       <span class="hljs-comment">//默认的最大顶点集数目  </span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> DistType m_Infinity = <span class="hljs-number">65536</span>;  <span class="hljs-comment">//边的默认权值（可以看成是无穷大）  </span><br>    <span class="hljs-type">int</span> m_nnumEdges;<span class="hljs-comment">//图中边的数目  </span><br>      <br>&#125;;  <br>  <br>  <br><span class="hljs-comment">//返回顶点vertexname在m_pVertexTable(顶点集)中的位置  </span><br><span class="hljs-comment">//如果不在顶点集中就返回-1  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">int</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">GetVertexPosTable</span>(<span class="hljs-type">const</span> NameType vertexname)  <br>&#123;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;m_numVertexs; i++)  <br>    &#123;  <br>        <span class="hljs-keyword">if</span> (vertexname == m_pVertexTable[i].m_vertexName)  <br>        &#123;  <br>            <span class="hljs-keyword">return</span> i;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">//打印图中的各个顶点及其链接的边的权重  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">void</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">PrintGraph</span>()  <br>&#123;  <br>    Edge&lt;DistType&gt; *pmove;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">this</span>-&gt;m_numVertexs; i++)  <br>    &#123;  <br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[i].m_vertexName &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;  <br>        pmove = <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[i].padjEdge;  <br>        <span class="hljs-keyword">while</span> (pmove)  <br>        &#123;  <br>            cout &lt;&lt; pmove-&gt;m_distWeight &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[pmove-&gt;m_nposTable].m_vertexName &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;  <br>            pmove = pmove-&gt;m_pnext;  <br>        &#125;  <br>        cout &lt;&lt; <span class="hljs-string">&quot;NULL&quot;</span> &lt;&lt; endl;  <br>    &#125;  <br>&#125;  <br><span class="hljs-comment">//获得在顶点集中的位置为v的顶点的名字  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br>NameType Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">GetVertexValue</span>(<span class="hljs-type">int</span> v)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (v&lt;<span class="hljs-number">0</span> || v&gt;=<span class="hljs-keyword">this</span>-&gt;m_numVertexs)  <br>    &#123;  <br>        cerr &lt;&lt; <span class="hljs-string">&quot;查找的顶点位置参数有误，请检查！&quot;</span> &lt;&lt;endl;  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> m_pVertexTable[v].m_vertexName;  <br>  <br>&#125;  <br><span class="hljs-comment">//返回顶点v1和v2之间的边权值，  </span><br><span class="hljs-comment">//如果没有直接相连（即不是一条边直接相连）则返回无穷大  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br>DistType Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">GetWeight</span>(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (v1&gt;=<span class="hljs-number">0</span> &amp;&amp; v1&lt;<span class="hljs-keyword">this</span>-&gt;m_numVertexs &amp;&amp; v2&gt;=<span class="hljs-number">0</span> &amp;&amp; v2&lt;<span class="hljs-keyword">this</span>-&gt;m_numVertexs)  <br>    &#123;  <br>        <span class="hljs-keyword">if</span> (v1 == v2)  <br>        &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>        &#125;  <br>        Edge&lt;DistType&gt; *pmove = m_pVertexTable[v1].padjEdge;  <br>        <span class="hljs-keyword">while</span> (pmove)  <br>        &#123;  <br>            <span class="hljs-keyword">if</span> (pmove-&gt;m_nposTable == v2)  <br>            &#123;  <br>                <span class="hljs-keyword">return</span> pmove-&gt;m_distWeight;  <br>            &#125;  <br>            pmove = pmove-&gt;m_pnext;  <br>        &#125;  <br>    &#125;  <br>      <br>    <span class="hljs-keyword">return</span> m_Infinity;    <br>&#125;  <br>  <br><span class="hljs-comment">//顶点依次插入到分配好的顶点集中  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">bool</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">InsertVertex</span>(<span class="hljs-type">const</span> NameType vertexname)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsGraphFull</span>())  <br>    &#123;  <br>        cerr&lt;&lt;<span class="hljs-string">&quot;图已经满，请勿再插入顶点！&quot;</span>&lt;&lt;endl;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;<span class="hljs-keyword">else</span>  <br>    &#123;  <br>        <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[<span class="hljs-keyword">this</span>-&gt;m_numVertexs].m_vertexName = vertexname;  <br>        <span class="hljs-keyword">this</span>-&gt;m_numVertexs++;  <br>    &#125;  <br>      <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">//在顶点集位置为v1和v2的顶点之间插入权值为weght的边（务必保持输入的准确性，否则.....）  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">bool</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">InsertEdge</span>(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2, DistType weight)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (v1 &lt; <span class="hljs-number">0</span> &amp;&amp; v1 &gt; <span class="hljs-keyword">this</span>-&gt;m_numVertexs &amp;&amp; v2 &lt; <span class="hljs-number">0</span> &amp;&amp; v2 &gt; <span class="hljs-keyword">this</span>-&gt;m_numVertexs)  <br>    &#123;  <br>        cerr&lt;&lt;<span class="hljs-string">&quot;边的位置参数错误，请检查！ &quot;</span>&lt;&lt;endl;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">else</span>  <br>    &#123;  <br>        Edge&lt;DistType&gt; *pmove = m_pVertexTable[v1].padjEdge;  <br>        <span class="hljs-keyword">if</span> (pmove == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//如果顶点v1没有邻边  </span><br>        &#123; <span class="hljs-comment">//建立顶点v1的第一个邻边(该邻边指明了目的顶点)  </span><br>            m_pVertexTable[v1].padjEdge = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Edge</span>&lt;DistType&gt;(v2, weight);  <br>            m_nnumEdges++;<span class="hljs-comment">//图中边的数目  </span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>        &#125;<span class="hljs-keyword">else</span><span class="hljs-comment">//如果有邻边  </span><br>        &#123;  <br>            <span class="hljs-keyword">while</span> (pmove-&gt;m_pnext)  <br>            &#123;  <br>                pmove = pmove-&gt;m_pnext;  <br>            &#125;  <br>                pmove-&gt;m_pnext = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Edge</span>&lt;DistType&gt;(v2, weight);  <br>                m_nnumEdges++;<span class="hljs-comment">//图中边的数目  </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br>  <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;  <br><span class="hljs-type">void</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">Dijkstra</span>(<span class="hljs-type">int</span> v, DistType *shPath)  <br>&#123;  <br>    <span class="hljs-type">int</span> num =<span class="hljs-built_in">GetNumVertexs</span>();  <br>    <span class="hljs-type">int</span> *visited = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[num];  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; num; i++)  <br>    &#123;<span class="hljs-comment">//初始化  </span><br>        visited[i] = <span class="hljs-number">0</span>;<span class="hljs-comment">//未访问  </span><br>        shPath[i] = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetWeight</span>(v, i);<span class="hljs-comment">//顶点v（当前中间点）到各个相邻顶点的边权值，其他情况返回无穷大  </span><br>    &#125;  <br>  <br>    visited[v] = <span class="hljs-number">1</span>;<span class="hljs-comment">//第v个顶点初始化为被访问，并以他为中点点开始找最短路径  </span><br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; num; i++)  <br>    &#123;  <br>        DistType min = <span class="hljs-keyword">this</span>-&gt;m_Infinity;  <br>        <span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;  <br>          <br>        <span class="hljs-comment">//寻找新的中间点u，依据就是数组中权值最小的那个点的位置（且没被访问过）  </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j &lt; num; j++)  <br>        &#123;     <br>            <span class="hljs-keyword">if</span> (!visited[j])  <br>            &#123;  <br>                <span class="hljs-keyword">if</span> (shPath[j]&lt;min)  <br>                &#123;  <br>                    min = shPath[j];<span class="hljs-comment">//获得当前shPath数组中的最小边权重  </span><br>                    u = j;<span class="hljs-comment">//用u来记录获取最小值时的顶点位置,即新的中间点  </span><br>                &#125;  <br>            &#125;  <br>        &#125;  <br>  <br>        visited[u] = <span class="hljs-number">1</span>;<span class="hljs-comment">//已经确定的最短路径  </span><br>  <br>        <span class="hljs-comment">//以u为中间点寻找顶点v到顶点w的最短路径  </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> w=<span class="hljs-number">0</span>; w &lt; num; w++)  <br>        &#123;    <br>            DistType weight = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetWeight</span>(u, w);<span class="hljs-comment">//顶点u（当前中间点）到各个相邻顶点的边权值，其他情况返回无穷大  </span><br>            <span class="hljs-keyword">if</span> (!visited[w] &amp;&amp; weight != <span class="hljs-keyword">this</span>-&gt;m_Infinity )  <br>            &#123;  <br>                <span class="hljs-keyword">if</span> ( shPath[u]+weight &lt; shPath[w] )  <br>                &#123;  <br>                    shPath[w] = shPath[u] + weight;<span class="hljs-comment">//更新顶点v到w的最短路径值  </span><br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">delete</span>[] visited;  <br>&#125;  <br><span class="hljs-comment">//获得顶点v1的邻点v2后的邻点  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">int</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">GetNext</span>(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> != v1)  <br>    &#123;  <br>        Edge&lt;DistType&gt; *pmove = <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[v1].padjEdge;  <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">NULL</span> != pmove-&gt;m_pnext)  <br>        &#123;  <br>            <span class="hljs-keyword">if</span> (pmove-&gt;m_nposTable==v2)  <br>            &#123;  <br>                <span class="hljs-keyword">return</span> pmove-&gt;m_pnext-&gt;m_nposTable;  <br>            &#125;  <br>            pmove = pmove-&gt;m_pnext;  <br>        &#125;          <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">//从第v个顶点开始深度遍历  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">void</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">DFS</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> *visited)  <br>&#123;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetVertexName</span>(v);  <br>    visited[v] = <span class="hljs-number">1</span>;  <br>    <span class="hljs-type">int</span> firstVertex = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetFirst</span>(v);<span class="hljs-comment">//获得顶点v的第一个相邻顶点，若没有则返回-1  </span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">-1</span> != firstVertex)  <br>    &#123;  <br>        <span class="hljs-keyword">if</span> (!visited[firstVertex])<span class="hljs-comment">//如果没有访问过  </span><br>        &#123;  <br>            cout &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetWeight</span>(v, firstVertex);<span class="hljs-comment">//获得顶点v及其邻点firstVertex之间的权值  </span><br>            <span class="hljs-built_in">DFS</span>(firstVertex, visited);  <br>        &#125;  <br>        firstVertex = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetNext</span>(v, firstVertex);<span class="hljs-comment">//获得顶点v的邻点firstVertex后的邻点，如果没有就返回-1  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">void</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">DFS</span>()  <br>&#123;  <br>    <span class="hljs-type">int</span> *visited = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-keyword">this</span>-&gt;m_numVertexs];  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">this</span>-&gt;m_numVertexs; i++)  <br>    &#123;  <br>        visited[i] = <span class="hljs-number">0</span>;  <br>    &#125;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;head&quot;</span>;  <br>    <span class="hljs-built_in">DFS</span>(<span class="hljs-number">0</span>, visited);<span class="hljs-comment">//从第一个顶点开始遍历  </span><br>    cout &lt;&lt; <span class="hljs-string">&quot;---&gt;end&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">void</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">BFS</span>()  <br>&#123;  <br>    <span class="hljs-type">int</span> *visited = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-keyword">this</span>-&gt;m_numVertexs];  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-keyword">this</span>-&gt;m_numVertexs; i++)  <br>    &#123;  <br>        visited[i] = <span class="hljs-number">0</span>;  <br>    &#125;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;head&quot;</span>;  <br>    <span class="hljs-built_in">BFS</span>(<span class="hljs-number">0</span>, visited);<span class="hljs-comment">//从第一个顶点开始遍历  </span><br>    cout &lt;&lt; <span class="hljs-string">&quot;---&gt;end&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">//从第v个顶点开始广度遍历  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">void</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">BFS</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> *visited)  <br>&#123;  <br>    cout &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetVertexName</span>(v);  <br>    visited[v]=<span class="hljs-number">1</span>;  <br>    queue&lt;<span class="hljs-type">int</span>&gt; que;<span class="hljs-comment">//=new queue&lt;int&gt;[this-&gt;GetNumVertexs()];  </span><br>    que.<span class="hljs-built_in">push</span>(v);<span class="hljs-comment">//进队（队列的末端）  </span><br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())  <br>    &#123;  <br>        v=que.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//出队首元素  </span><br>        que.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//删除队首元素  </span><br>        <span class="hljs-type">int</span> firstvertex=<span class="hljs-built_in">GetFirst</span>(v);  <br>        <span class="hljs-keyword">while</span>(firstvertex != <span class="hljs-number">-1</span>)  <br>        &#123;  <br>            <span class="hljs-keyword">if</span> (!visited[firstvertex])  <br>            &#123;  <br>                cout &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetWeight</span>(v, firstvertex);<span class="hljs-comment">//获得顶点v及其邻点firstVertex之间的权值  </span><br>                que.<span class="hljs-built_in">push</span>(firstvertex);  <br>                visited[firstvertex]=<span class="hljs-number">1</span>;  <br>                cout &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">GetVertexName</span>(firstvertex);  <br>            &#125;  <br>            firstvertex=<span class="hljs-built_in">GetNext</span>(v,firstvertex);  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-comment">//获得在顶点集中的位置为v的顶点的名字  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br>NameType Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">GetVertexName</span>(<span class="hljs-type">int</span> v)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (v&lt;<span class="hljs-number">0</span> || v&gt;=<span class="hljs-keyword">this</span>-&gt;m_numVertexs)  <br>    &#123;  <br>        cerr &lt;&lt; <span class="hljs-string">&quot;查找的顶点位置参数有误，请检查！&quot;</span> &lt;&lt;endl;  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> m_pVertexTable[v].m_vertexName;  <br>  <br>&#125;  <br>  <br><span class="hljs-comment">//获得顶点v的第一个相邻顶点，如果没有就返回-1  </span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistType</span>&gt;   <br><span class="hljs-type">int</span> Graph&lt;NameType, DistType&gt;::<span class="hljs-built_in">GetFirst</span>(<span class="hljs-type">int</span> v)  <br>&#123;  <br>    <span class="hljs-keyword">if</span> (v&lt;<span class="hljs-number">0</span> || v&gt;=<span class="hljs-keyword">this</span>-&gt;m_numVertexs)  <br>    &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <br>    &#125;  <br>    Edge&lt;DistType&gt; *ptemp = <span class="hljs-keyword">this</span>-&gt;m_pVertexTable[v].padjEdge;  <br>    <span class="hljs-keyword">return</span> m_pVertexTable[v].padjEdge ? m_pVertexTable[v].padjEdge-&gt;m_nposTable : <span class="hljs-number">-1</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp">http:<span class="hljs-comment">//bailian.openjudge.cn/practice/2386/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> M,N;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>s[x][y]=<span class="hljs-string">&#x27;.&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> dx=<span class="hljs-number">-1</span>;dx&lt;=<span class="hljs-number">1</span>;dx++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> dy=<span class="hljs-number">-1</span>;dy&lt;=<span class="hljs-number">1</span>;dy++)<br>&#123;<br><span class="hljs-type">int</span> nx=x+dx,ny=y-dy;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>&lt;=nx&amp;&amp;nx&lt;N&amp;&amp;<span class="hljs-number">0</span>&lt;=ny&amp;&amp;ny&lt;M&amp;&amp;s[nx][ny]==<span class="hljs-string">&#x27;W&#x27;</span>)<br><span class="hljs-built_in">dfs</span>(nx,ny);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;N&gt;&gt;M;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>cin&gt;&gt;s[i][j];<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i][j]==<span class="hljs-string">&#x27;W&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">dfs</span>(i,j);<br>res++;<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;res;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> d,p,e,i,x;<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;p&gt;&gt;e&gt;&gt;i&gt;&gt;d&amp;&amp;p!=<span class="hljs-number">-1</span>&amp;&amp;i!=<span class="hljs-number">-1</span>&amp;&amp;e!=<span class="hljs-number">-1</span>&amp;&amp;d!=<span class="hljs-number">-1</span>)&#123;<br>count++;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-number">0</span>||e==<span class="hljs-number">0</span>||i==<span class="hljs-number">0</span>)&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Case &quot;</span>&lt;&lt;count&lt;&lt;<span class="hljs-string">&quot;: the next triple peak occurs in &quot;</span>&lt;&lt;<span class="hljs-number">21252</span>-d&lt;&lt;<span class="hljs-string">&quot; days.&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">for</span>(x=i;x&lt;<span class="hljs-number">21252</span>;x+=<span class="hljs-number">33</span>)&#123;<br><span class="hljs-keyword">if</span>(x%<span class="hljs-number">23</span>==p%<span class="hljs-number">23</span>&amp;&amp;x%<span class="hljs-number">28</span>==e%<span class="hljs-number">28</span>)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;Case &quot;</span>&lt;&lt;count&lt;&lt;<span class="hljs-string">&quot;: the next triple peak occurs in &quot;</span>&lt;&lt;x-d&lt;&lt;<span class="hljs-string">&quot; days.&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="practice"><a href="#practice" class="headerlink" title="practice"></a>practice</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//stack</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>cout&lt;&lt;s.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br>    <span class="hljs-type">int</span> u;<br>u=s.<span class="hljs-built_in">pop</span>();<br>cout&lt;&lt;u&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> OJ </tag>
            
            <tag> C++练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策用强化与系统性机器学习</title>
      <link href="/2019/12/01/%E5%86%B3%E7%AD%96%E7%94%A8%E5%BC%BA%E5%8C%96%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/12/01/%E5%86%B3%E7%AD%96%E7%94%A8%E5%BC%BA%E5%8C%96%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%80%A7%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="决策用强化与系统性机器学习总结"><a href="#决策用强化与系统性机器学习总结" class="headerlink" title="决策用强化与系统性机器学习总结"></a>决策用强化与系统性机器学习总结</h2><h4 id="系统的不同部分是有联系的。"><a href="#系统的不同部分是有联系的。" class="headerlink" title="系统的不同部分是有联系的。"></a>系统的不同部分是有联系的。</h4><h4 id="系统思维的基本准则就是在时间和空间上因果是可以分开的。"><a href="#系统思维的基本准则就是在时间和空间上因果是可以分开的。" class="headerlink" title="系统思维的基本准则就是在时间和空间上因果是可以分开的。"></a>系统思维的基本准则就是在时间和空间上因果是可以分开的。</h4><h4 id="孤立的学习时不完备的"><a href="#孤立的学习时不完备的" class="headerlink" title="孤立的学习时不完备的"></a>孤立的学习时不完备的</h4><h4 id="系统性机器学习的其它一方面是为了了解系统界限，决定系统的相互作用，同时也尝试显现系统和子系统的各种行为的影响。"><a href="#系统性机器学习的其它一方面是为了了解系统界限，决定系统的相互作用，同时也尝试显现系统和子系统的各种行为的影响。" class="headerlink" title="系统性机器学习的其它一方面是为了了解系统界限，决定系统的相互作用，同时也尝试显现系统和子系统的各种行为的影响。"></a>系统性机器学习的其它一方面是为了了解系统界限，决定系统的相互作用，同时也尝试显现系统和子系统的各种行为的影响。</h4><h4 id="系统性知识构建更多的是构建完整的知识。因此，这里不可能是一个孤立的决策者。"><a href="#系统性知识构建更多的是构建完整的知识。因此，这里不可能是一个孤立的决策者。" class="headerlink" title="系统性知识构建更多的是构建完整的知识。因此，这里不可能是一个孤立的决策者。"></a>系统性知识构建更多的是构建完整的知识。因此，这里不可能是一个孤立的决策者。</h4><h4 id="学习是一个连续的过程，新方案观察和新方案出现"><a href="#学习是一个连续的过程，新方案观察和新方案出现" class="headerlink" title="学习是一个连续的过程，新方案观察和新方案出现"></a>学习是一个连续的过程，新方案观察和新方案出现</h4><h4 id="通过观察来学习需要构建有意义的观察对象和情景的分类。"><a href="#通过观察来学习需要构建有意义的观察对象和情景的分类。" class="headerlink" title="通过观察来学习需要构建有意义的观察对象和情景的分类。"></a>通过观察来学习需要构建有意义的观察对象和情景的分类。</h4><h4 id="当人们做决策时所遇到的方案和对象时之前学习阶段没有遇到过的推理，迁移学习fds"><a href="#当人们做决策时所遇到的方案和对象时之前学习阶段没有遇到过的推理，迁移学习fds" class="headerlink" title="当人们做决策时所遇到的方案和对象时之前学习阶段没有遇到过的推理，迁移学习fds"></a>当人们做决策时所遇到的方案和对象时之前学习阶段没有遇到过的推理，迁移学习fds</h4><h4 id="三种仿生学习机制"><a href="#三种仿生学习机制" class="headerlink" title="三种仿生学习机制"></a>三种仿生学习机制</h4><ul><li>知觉学习<br>  学习新的对象，策略和关系</li><li>案例学习<br>  基于事件间的相关信息</li><li>过程学习解决<br>  基于行为和动作序列来完成的学习<br>  其本质为人类认知内的知识对机器智能水平的传授</li></ul><h4 id="对于人脑-人类的学习时选择性增强的，不需要大量的训练集。机器学习是计算机编程方法的研究。为了让机器智能化工作，可以像人一样学习经验。某些任务下替代人类，如自动化设备或者是在极少数动态环境下精度等级要求高的重复性任务"><a href="#对于人脑-人类的学习时选择性增强的，不需要大量的训练集。机器学习是计算机编程方法的研究。为了让机器智能化工作，可以像人一样学习经验。某些任务下替代人类，如自动化设备或者是在极少数动态环境下精度等级要求高的重复性任务" class="headerlink" title="对于人脑,人类的学习时选择性增强的，不需要大量的训练集。机器学习是计算机编程方法的研究。为了让机器智能化工作，可以像人一样学习经验。某些任务下替代人类，如自动化设备或者是在极少数动态环境下精度等级要求高的重复性任务"></a>对于人脑,人类的学习时选择性增强的，不需要大量的训练集。机器学习是计算机编程方法的研究。为了让机器智能化工作，可以像人一样学习经验。某些任务下替代人类，如自动化设备或者是在极少数动态环境下精度等级要求高的重复性任务</h4><h4 id="统计数据更多的是理解数据及其之间的模式，数据挖掘寻求决策和分析模式的相关数据"><a href="#统计数据更多的是理解数据及其之间的模式，数据挖掘寻求决策和分析模式的相关数据" class="headerlink" title="统计数据更多的是理解数据及其之间的模式，数据挖掘寻求决策和分析模式的相关数据"></a>统计数据更多的是理解数据及其之间的模式，数据挖掘寻求决策和分析模式的相关数据</h4><h4 id="通常情况下，学习和理解同时发生。"><a href="#通常情况下，学习和理解同时发生。" class="headerlink" title="通常情况下，学习和理解同时发生。"></a>通常情况下，学习和理解同时发生。</h4><h4 id="新的和已有的知识都是围绕学科主要概念和原理时促进学习发展的。在学习过程中，要么一些原理已经存在（计算机语言中用if-then），要么在工作过程中发展为学习指南。"><a href="#新的和已有的知识都是围绕学科主要概念和原理时促进学习发展的。在学习过程中，要么一些原理已经存在（计算机语言中用if-then），要么在工作过程中发展为学习指南。" class="headerlink" title="新的和已有的知识都是围绕学科主要概念和原理时促进学习发展的。在学习过程中，要么一些原理已经存在（计算机语言中用if then），要么在工作过程中发展为学习指南。"></a>新的和已有的知识都是围绕学科主要概念和原理时促进学习发展的。在学习过程中，要么一些原理已经存在（计算机语言中用if then），要么在工作过程中发展为学习指南。</h4><h4 id="学习也需要prior-knowledge。学习者使用他们已知来构造新的理解。此外，他们有不同的视角和元认知。学习是通过识别、监控和调节元认知策略的使用二促进发展的"><a href="#学习也需要prior-knowledge。学习者使用他们已知来构造新的理解。此外，他们有不同的视角和元认知。学习是通过识别、监控和调节元认知策略的使用二促进发展的" class="headerlink" title="学习也需要prior knowledge。学习者使用他们已知来构造新的理解。此外，他们有不同的视角和元认知。学习是通过识别、监控和调节元认知策略的使用二促进发展的"></a>学习也需要prior knowledge。学习者使用他们已知来构造新的理解。<strong>此外，他们有不同的视角和元认知。学习是通过识别、监控和调节元认知策略的使用二促进发展的</strong></h4><p>最后加一点机器学习的想法：</p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><h4 id="归纳induction，从特殊到一般，泛化generalization"><a href="#归纳induction，从特殊到一般，泛化generalization" class="headerlink" title="归纳induction，从特殊到一般，泛化generalization"></a>归纳induction，从特殊到一般，泛化generalization</h4><h4 id="演绎deduction，从一般到特殊，归纳学习inductive-learning"><a href="#演绎deduction，从一般到特殊，归纳学习inductive-learning" class="headerlink" title="演绎deduction，从一般到特殊，归纳学习inductive learning"></a>演绎deduction，从一般到特殊，归纳学习inductive learning</h4><h4 id="感知机-perceptron"><a href="#感知机-perceptron" class="headerlink" title="感知机 perceptron"></a>感知机 perceptron</h4><p><strong>“从样例中学习”的一大主流是符号主义学习</strong><br><strong>代表包括决策树和基于逻辑的学习</strong><br><strong>decision tree 以信息论为基础，以信息熵最小化为目标，直接模拟了人类对概念进行判定的树状流程基于逻辑的学习的代表为归纳逻辑程序设计（indective logic programming，ILP 使用一阶逻辑来进行知识表示，通过修改和扩充逻辑表达式来完成对数据的归纳</strong></p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> RL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> 脑洞 </tag>
            
            <tag> 整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP一些基本概念的摘抄</title>
      <link href="/2019/12/01/NLP%E9%83%A8%E5%88%86%E6%91%98%E6%8A%84/"/>
      <url>/2019/12/01/NLP%E9%83%A8%E5%88%86%E6%91%98%E6%8A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h1><ul><li>机器翻译</li><li>情感分析</li><li>智能问答</li><li>文摘生成</li><li>文本分类</li><li>舆论分析<br>  分析话题热度，分析传播路径以及发展趋势。对于不好的趋势进行宏观控制</li><li>知识图谱（KG）<br>  显示知识发展进程与结构关系的一系列不同图形。用可视化技术描述知识资源以及载体，挖掘、分析、构建、绘制和显示知识及其相互联系。</li></ul><h2 id="NLP基本术语"><a href="#NLP基本术语" class="headerlink" title="NLP基本术语"></a>NLP基本术语</h2><p>（1）分词（segment）<br>（2）词性标注（标n，adj。。。）<br>（3）命名实体识别（Named Entity Recognition）<br>（4）句法分析（syntax parsing，基于规则的专家系统解析句子中各个成分的依赖关系）<br>（5）指代消解（把代词还原为原来的意思）<br>（6）情感识别（现在流行的是词向量模型+RNN）<br>（7）纠错（correction）（基于N-gram，字典树，有限状态机等）<br>（8）问答系统（QA system）</p><h2 id="NLP的基本应用"><a href="#NLP的基本应用" class="headerlink" title="NLP的基本应用"></a>NLP的基本应用</h2><ol><li>句法语义分析</li><li>关键词抽取（如从一条新闻中抽取关键信息，设计实体识别，时间抽取，因果关系抽取等）</li><li>文本挖掘（文本局内、分类、信息抽取、摘要、情感分析以及对挖掘到的知识都信息可视化、交互式呈现）</li><li>机器翻译</li><li>信息检索（可简单对文档中的词汇赋不同权重来建立索引，查询时首先对输入比进行分析，然后在索引里查找匹配的候选文档。再排序打分）</li><li>问答系统（对查询语句进行语义分析，包括实体链接、关系识别、形成逻辑表达式，再到知识库查找可能对候选答案，打分排序）</li><li>对话系统</li></ol><h2 id="深度学习在NLP应用"><a href="#深度学习在NLP应用" class="headerlink" title="深度学习在NLP应用"></a>深度学习在NLP应用</h2><p>主要优势原因有以下两点：<br>####（1）海量的数据<br>很多应用积累了相当大量数据可以用于学习。当数据量增大，以SVM、CRF（条件随机场）为代表的传统浅层模型无法对数据的高维非线性映射建模。因此，以CNN、RNN为代表的深度模型可以随着模型复杂度增大而增强，更贴近数据本质映射。<br>####（2）DL算法的革新<br>一方面由于深度学习的word2vec的出现，可以降低输入层的维度；另一方面，深度学习让之前很多任务进行端到端的训练。如机器翻译等。避免了误差的传递。</p><h2 id="目前局限和未来发展"><a href="#目前局限和未来发展" class="headerlink" title="目前局限和未来发展"></a>目前局限和未来发展</h2><p>1、人在表达时，背景知识的存在会省略非常多的东西，使自然语言的表达更加简洁，文本携带的信息也具有很大的局限性。<br>2、样本数量有限情况下的训练<br>3、如何融合DL和其它知识信息，以提升整个系统的性能<br>4、如何实现自学习、自适应学习<br>5、如何利用强化学习提升系统的性能，如如何利用上下文增强对当前任务的决策能力。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 总结与摘抄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弗·恩格斯——《GC主义原理》</title>
      <link href="/2019/12/01/%E5%85%B1%E4%BA%A7%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/"/>
      <url>/2019/12/01/%E5%85%B1%E4%BA%A7%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>弗·恩格斯写于 1847年10月底—11月</strong> </p><img src="/2019/12/01/%E5%85%B1%E4%BA%A7%E4%B8%BB%E4%B9%89%E5%8E%9F%E7%90%86/mks.png" class="[class names]"><h4 id="第一个问题：什么是共产主义？"><a href="#第一个问题：什么是共产主义？" class="headerlink" title="第一个问题：什么是共产主义？"></a>第一个问题：什么是共产主义？</h4><p>　　答：共产主义是关于无产阶级解放的条件的学说。</p><h4 id="第二个问题：什么是无产阶级？"><a href="#第二个问题：什么是无产阶级？" class="headerlink" title="第二个问题：什么是无产阶级？"></a>第二个问题：什么是无产阶级？</h4><p>　　答：无产阶级是完全靠出卖自己的劳动而不是靠某一种资本的利润来获得生活资料的社会阶级。这一阶级的祸福、存亡和整个生存，都取决于对劳动的需求，即取决于生意的好坏，取决于不受限制的竞争的波动。一句话，无产阶级或无产者阶级是19世纪的劳动阶级。</p><h4 id="第三个问题：是不是说，无产者不是一向就有的？"><a href="#第三个问题：是不是说，无产者不是一向就有的？" class="headerlink" title="第三个问题：是不是说，无产者不是一向就有的？"></a>第三个问题：是不是说，无产者不是一向就有的？</h4><p>　　答：是的，不是一向就有的。穷人和劳动阶级一向就有；并且劳动阶级通常都是贫穷的。但是，生活在上述条件下的这种穷人、这种工人，即无产者，并不是一向就有的，正如竞争并不一向是自由和不受限制的一样。</p><h4 id="第四个问题：无产阶级是怎样产生的？"><a href="#第四个问题：无产阶级是怎样产生的？" class="headerlink" title="第四个问题：无产阶级是怎样产生的？"></a>第四个问题：无产阶级是怎样产生的？</h4><p>　　答：无产阶级是由于工业革命而产生的，这一革命在上个世纪下半叶发生于英国，后来，相继发生于世界各文明国家。工业革命是由蒸汽机、各种纺纱机、机械织布机和一系列其他机械装备的发明而引起的。这些价钱很贵、因而只有大资本家才买得起的机器，改变了以前的整个生产方式，挤掉了原来的工人。这是因为机器生产的商品要比工人用不完善的纺车和织布机生产的又便宜又好。这样一来，这些机器就使工业全部落到大资本家手里，并且使工人仅有的一点薄产(工具、织布机等)变得一钱不值，于是资本家很快就占有了一切，而工人却一无所有了。从此，在衣料生产方面就实行了工厂制度。机器和工厂制度一经采用，这一制度很快就推行到所有其他工业部门，特别是印花业、印书业、制陶业和金属品制造业等部门。工人之间的分工越来越细，于是，从前完成整件工作的工人，现在只做这件工作的一部分。这种分工可以使产品生产得更快，因而也更便宜。分工把每个工人的活动变成一种非常简单的、老一套的机械操作，这种操作利用机器不但能够做得同样出色，甚至还要好得多。因此，所有这些工业部门都像纺纱和织布业一样，一个跟著一个全都受到了蒸汽动力、机器和工厂制度的支配。这样一来，这些工业部门同时业就全都落到了大资本家的手里，工人也就失掉了最后的一点独立性。除了原来意义上的工场手工业，手工业也渐渐受到工厂制度的支配，因为这里的大资本家也在通过建立可以大量节省开支和实行细致分工的大作坊，不断挤掉小师傅。结果，我们现在可以看到，在文明国家里，几乎所有劳动部门都照工厂方式进行经营了，在所有劳动部门，手工业和工场手工业几乎都被工业挤掉了。于是从前的中间等级，特别是小手工业师傅日益破产，工人原来的状况发生了根本的变化，产生了两个逐渐并吞所有其他阶级的新阶级。这两个阶级就是：<br>　　一、大资本家阶级，他们在所有文明国家里现在已经几乎独占了一切生活资料和生产这些生活资料所必须的原料和工具(机器、工厂)。这就是资产者阶级或资产阶级。<br>　　二、完全没有财产的阶级，他们为了换得维持生存所必须的生活资料，不得不把自己的劳动出卖给资产者。这个阶级叫作无产者阶级或无产阶级。</p><h4 id="第五个问题：无产者是在怎样的条件下把劳动出卖给资产者的？"><a href="#第五个问题：无产者是在怎样的条件下把劳动出卖给资产者的？" class="headerlink" title="第五个问题：无产者是在怎样的条件下把劳动出卖给资产者的？"></a>第五个问题：无产者是在怎样的条件下把劳动出卖给资产者的？</h4><p>　　答：劳动和其他任何商品一样，也是一种商品，因此，它的价格和其他任何商品的价格一样，也是由同样的规律决定的。正像我们下面将看到的，在大工业或自由竞争的统治下，情形都一样，商品的价格平均总是和这种商品的生产费用相等的。因此，劳动的价格也是和劳动的生产费用相等的。而劳动的生产费用正好是使工人能够维持他们的劳动能力并使工人阶级不致灭绝所必需的生活资料的数量。工人的劳动所得不会比为了这一目的所必需的更多。因此，劳动的价格或工资将是维持生存所必需的最低额。但是，因为买卖有时清淡有时兴旺，工人的所得也就有多有少，正像厂主出卖商品所得有多有少一样。如果把旺季和淡季平均起来，厂主出卖商品所得既不多于他的生产费用，也不少于他的生产费用，同样，工人平均所得也是既不会多于这个最低额，也不会少于这个最低额。大工业越是在所有劳动部门占统治地位，工资的这一经济规律体现得就越充分。</p><h4 id="第六个问题：在工业革命前，有过什么样的劳动阶级？"><a href="#第六个问题：在工业革命前，有过什么样的劳动阶级？" class="headerlink" title="第六个问题：在工业革命前，有过什么样的劳动阶级？"></a>第六个问题：在工业革命前，有过什么样的劳动阶级？</h4><p>　　答：在不同的社会发展阶段上，劳动阶级的生活条件各不相同，劳动阶级在同有产阶级和统治阶级的关系中所处的地位也各不相同。在古代，劳动者是主人的奴隶。直到今天在许多落后国家甚至美国南部他们还是这种奴隶。在中世纪，劳动者是土地占有者贵族的农奴，直到今天在匈牙利、波兰和俄国他们还是这种农奴。此外，在中世纪，直到工业革命前，城市里还有在小资产阶级师傅那里做工的手工业帮工，随著工场手工业的发展，也渐渐出现了受较大的资本家雇用的工场手工业工人。</p><h4 id="第七个问题：无产者和奴隶有什么区别？"><a href="#第七个问题：无产者和奴隶有什么区别？" class="headerlink" title="第七个问题：无产者和奴隶有什么区别？"></a>第七个问题：无产者和奴隶有什么区别？</h4><p>　　答：奴隶一次就被完全卖掉了。无产者必须一天一天、一小时一小时地出卖自己。单个的奴隶是某一个主人的财产，由于他与主人利害攸关，他的生活不管怎样坏，总还是有保障的。单个的无产者可以说是整个资产者阶级的财产，他的劳动只有在有人需要的时候才能卖掉，因而他的生活是没有保障的。只有对整个无产者阶级来说，这种生活才是有保障的。奴隶处在竞争之外，无产者处在竞争之中，并且亲身感受到竞争的一切波动。奴隶被看作物，不被看作市民社会的成员。无产者被承认是人，是市民社会的成员。因此奴隶能够比无产者生活得好些，但无产者属于更高的社会发展阶段，他们本身处于比奴隶更高的阶段。在所有的私有制关系中，只要废除奴隶制关系，奴隶就能解放自己，并由此而成为无产者；无产者只有废除一切私有制才能解放自己。</p><h4 id="第八个问题：无产者和农奴有什么区别？"><a href="#第八个问题：无产者和农奴有什么区别？" class="headerlink" title="第八个问题：无产者和农奴有什么区别？"></a>第八个问题：无产者和农奴有什么区别？</h4><p>　　答：农奴占有并使用一种生产工具，即一块土地，为此他要交出自己的一部份收益或者服一定的劳役。无产者用别人的生产工具为这个别人做工，从而得到一部份收益。农奴是交出，无产者是得到。农奴生活有保障，无产者生活无保障。农奴处在竞争之外，无产者处在竞争之中。农奴可以通过各种道路获得解放：或者是逃到城市里去做手工业者；或者是交钱给地主代替劳役和产品，从而成为自由的佃农；或者是把他们的封建主赶走，自己变成财产所有者。总之，农奴可以通过不同的办法加入有产阶级的队伍并进入竞争领域而获得解放。无产者只有通过消灭竞争、私有制和一切阶级差别才能获得解放。</p><h4 id="第九个问题：无产者和手工业者有什么区别？"><a href="#第九个问题：无产者和手工业者有什么区别？" class="headerlink" title="第九个问题：无产者和手工业者有什么区别？"></a>第九个问题：无产者和手工业者有什么区别？</h4><h4 id="第十个问题：无产者和工场手工业工人有什么区别？"><a href="#第十个问题：无产者和工场手工业工人有什么区别？" class="headerlink" title="第十个问题：无产者和工场手工业工人有什么区别？"></a>第十个问题：无产者和工场手工业工人有什么区别？</h4><p>　　答：16至18世纪，几乎任何地方的工场手工业工人都占有生产工具，如织布机、家庭用的纺车和一小块在工余时间耕种的土地。这一切，无产者都没有。工场手工业工人几乎总是生活在农村，和地主或雇主维持著或多或少的宗法关系。无产者通常生活在大城市，和雇主只有金钱关系。大工业使工场手工业工人脱离了宗法关系，他们失去了仅有的一点财产，因此而变成无产者。</p><h4 id="第十一个问题：工业革命和社会划分为资产者与无产者首先产生了什么结果？"><a href="#第十一个问题：工业革命和社会划分为资产者与无产者首先产生了什么结果？" class="headerlink" title="第十一个问题：工业革命和社会划分为资产者与无产者首先产生了什么结果？"></a>第十一个问题：工业革命和社会划分为资产者与无产者首先产生了什么结果？</h4><p>　　答：第一，由于在世界各国机器劳动不断降低工业品的价格，旧的工场手工业制度或以手工劳动为基础的工业制度完全被摧毁。所有那些迄今或多或少置身于历史发展之外、工业迄今建立在工场手工业基础上的半野蛮国家，随之也就被迫脱离了它们的闭关自守状态。这些国家购买比较便宜的英国商品，把本国的工场手工业工人置于死地。因此，那些几千年来没有进步的国家，例如印度，都已经进行了完全的革命，甚至中国现在也正走向革命。事情已经发展到这样的地步：今天英国发明的新机器，一年之内就会夺去中国千百万工人的饭碗。这样，大工业便把世界各国人民互相联系起来，把所有地方性的小市场联合成为一个世界市场，到处为文明和进步作好了准备，使各文明国家里发生的一切必然影响到其余各国。因此，如果现在英国或法国的工人获得解放，这必然会引起其他一切国家的革命，这种革命迟早会使这些国家的工人也获得解放。<br>　　第二，凡是大工业代替了工场手工业的地方，工业革命都使资产阶级及其财富和势力最大限度地发展起来，使它成为国内的第一阶级。结果，凡是完成了这种过程的地方，资产阶级都取得了政治权力，并挤掉了以前的统治阶级——贵族、行会师傅和代表他们的专制王朝。资产阶级废除了长子继承权或出卖领地的禁令，取消了贵族的一切特权，这样便消灭了特权贵族、土地贵族的势力。资产阶级取消了所有行会，废除了手工业者的一切特权，这样便摧毁了行会师傅的势力。资产阶级用自由竞争来代替它们；在自由竞争这种社会状况下，每一个人都有权经营任何一个工业部门，而且，除非缺乏必要的资本，什么也不能妨碍他的经营。这样，实行自由竞争就是公开宣布：从今以后，只是由于社会各成员的资本多寡不等，所以他们之间才不平等，资本成为决定性的力量，从而资本家，资产者成为社会上的第一阶级。但是，自由竞争在大工业发展初期之所以必要是因为只有在这种社会状况下大工业才能成长起来。资产阶级这样消灭了贵族和行会师傅的社会势力以后，也就消灭了他们的政治权力。资产阶级在社会上上升为第一阶级以后，它也就在政治上宣布自己是第一阶级。它是通过实行代议制而做到这一点的。代议制是以资产阶级的在法律面前平等和法律承认自由竞争为基础的。这种制度在欧洲各国采取立宪君主制的形式。在这种立宪君主制的国家里，只有拥有一定资本的人即资产者，才有选举权。这些资产者选民选出议员，而这些资产者议员可以运用拒绝纳税的权利，选出资产者政府。<br>　　第三，工业革命到处都使无产阶级和资产阶级以同样的速度发展起来。资产者越发财，无产者的人数也就越多。因为只有资本才能使无产者找到工作，而资本只有在使用劳动的时候才能增加，所以无产阶级的增加和资本的增加是完全同步的。同时，工业革命使资产者和无产者都集中在最有利于发展工业的大城市里，广大群众聚集在一个地方，使无产者意识到自己的力量。其次，随著工业革命的发展，随著挤掉手工劳动的新机器的不断发明，大工业把工资压得越来越低，把它压到上面说过的最低额，因而无产阶级的处境也就越来越不堪忍受了。这样，一方面由于无产阶级不满情绪的增长，另一方面由于他们力量的壮大，工业革命便孕育著一个由无产阶级进行的社会革命。</p><h4 id="第十二个问题：工业革命进一步产生了什么结果？"><a href="#第十二个问题：工业革命进一步产生了什么结果？" class="headerlink" title="第十二个问题：工业革命进一步产生了什么结果？"></a>第十二个问题：工业革命进一步产生了什么结果？</h4><p>　　答：大工业创造了像蒸汽机和其他机器那样的手段，使工业生产在短时间内用不多的费用便能无限地增加起来。由于生产变得这样容易，这种大工业必然产生的自由竞争很快就达到十分剧烈的程度。大批资本家投身于工业，生产很快就超过了消费。结果，生产出来的商品卖不出去，所谓商业危机就到来了。工厂只好关门，厂主破产，工人挨饿。到处出现了极度贫困的现象。过了一段时间，过剩的产品卖光了，工厂重新开工，工资提高，生意也渐渐地比以往更好起来。但这是不会长久的，因为很快又会生产出过多的商品，新的危机又会到来，这种新危机的过程和前次危机完全相同。因此，从本世纪初以来，工业经常在繁荣时期和危机时期之间波动。这样的危机几乎定期地每五年到七年发生一次，每一次它都给工人带来极度的贫困，激起普遍的革命热情，给整个现存制度造成极大的危险。</p><h4 id="第十三个问题：这种定期重复的商业危机会产生什么后果？"><a href="#第十三个问题：这种定期重复的商业危机会产生什么后果？" class="headerlink" title="第十三个问题：这种定期重复的商业危机会产生什么后果？"></a>第十三个问题：这种定期重复的商业危机会产生什么后果？</h4><p>　　答：第一，虽然大工业在它的发展初期自己创造了自由竞争，但是现在它的发展已经超越了自由竞争的范围。竞争和个人经营工业生产已经变成大工业的枷锁，大工业必须粉碎它，而且一定会粉碎它。大工业只要还在现今的基础上进行经营，就只能通过每七年出现一次的普遍混乱来维持，每次混乱对全部文明都是一种威胁，它不但把无产者抛入贫困的深渊，而且也使许多资产者破产。因此，或者必须完全放弃大工业本身(这是绝对不可能的)，或者大工业使建立一个全新的社会组织成为绝对必要的，在这个新的社会组织里，工业生产将不是由相互竞争的单个的厂主来领导，而是由整个社会按照确定的计划和所有人的需要来领导。<br>　　第二，大工业及其所引起的生产无限扩大的可能性，使人们能够建立这样一种社会制度，在这种社会制度下，一切生活必需品都将生产得很多，使每一个社会成员都能够完全自由地发展和发挥他的全部力量和才能。由此可见，在现今社会中造成一切贫困和商业危机的大工业的那种特性，在另一种社会组织中正是消灭这种贫困和这些灾难性的波动的因素。<br>　　这就完全令人信服地证明：<br>　　(1)从现在起，可以把所有这些弊病完全归咎于已经不适应当前情况的社会制度；<br>　　(2)通过建立新的社会制度来彻底铲除这些弊病的手段已经具备。</p><h4 id="第十四个问题：这种新的社会制度应当是怎样的？"><a href="#第十四个问题：这种新的社会制度应当是怎样的？" class="headerlink" title="第十四个问题：这种新的社会制度应当是怎样的？"></a>第十四个问题：这种新的社会制度应当是怎样的？</h4><p>　　答：这种新的社会制度首先必须剥夺相互竞争的个人对工业和一切生产部门的经营权，而代之以所有这些生产部门由整个社会来经营，就是说，为了共同的利益、按照共同的计划、在社会全体成员的参加下来经营。这样，这种新的社会制度将消灭竞争，而代之以联合。因为个人经营工业的必然结果是私有制，竞争不过是单个私有者经营工业的一种方式，所以私有制同工业的个体经营和竞争是分不开的。因此私有制也必须废除，而代之以共同使用全部生产工具和按照共同的协议来分配全部产品，即所谓财产共有。废除私有制甚至是工业发展必然引起的改造整个社会制度的最简明扼要的概括。所以共产主义者完全正确地强调废除私有制是自己的主要要求。</p><h4 id="第十五个问题：这么说，过去废除私有制是不可能的？"><a href="#第十五个问题：这么说，过去废除私有制是不可能的？" class="headerlink" title="第十五个问题：这么说，过去废除私有制是不可能的？"></a>第十五个问题：这么说，过去废除私有制是不可能的？</h4><p>　　答：不可能。社会制度中的任何变化，所有制关系中的每一次变革，都是产生了同旧的所有制关系不再相适应的新的生产力的必然结果。私有制本身就是这样产生的。私有制不是一向就有的；在中世纪末期，产生了一种工场手工业那样的新的生产方式，这种新的生产方式超越了当时封建和行会所有制的范围，于是这种已经超越旧的所有制关系的工场手工业便产生了新的所有制形式——私有制。对于工场手工业和大工业发展的最初阶段来说，除了私有制，不可能有其他任何所有制形式，除了以私有制为基础的社会制度，不可能有其他任何社会制度。只要生产的规模还没有达到不仅可以满足所有人的需要，而且还有剩余产品去增加社会资本和进一步发展生产力，就总会有支配社会生产力的统治阶级和贫穷的被压迫阶级。至于这些阶级是什么样子，那要看生产的发展阶段。在依赖农业的中世纪，是领主和农奴；在中世纪后期的城市里，是行会师傅、帮工和短工；在17世纪是工场手工业主和工场手工业工人；在19世纪是大工厂主和无产者。非常明显，在这以前，生产力还没有发展到私有制成为这些生产力发展的桎梏和障碍。但是现在，由于大工业的发展，第一，产生了空前大规模的资本和生产力，并且具备了能在短时期内无限提高这些生产力的手段；第二，生产力集中在少数资产者手里，而广大人民群众越来越变成无产者，资产者的财富越增加，无产者的境遇就越悲惨和难以忍受；第三，这种强大的、容易增长的生产力，已经发展到私有制和资产者远远不能驾驭的程度，以致经常引起社会制度极其剧烈的震荡。只有这时废除私有制才不仅可能，甚至完全必要。</p><h4 id="第十六个问题：能不能用和平的办法废除私有制？"><a href="#第十六个问题：能不能用和平的办法废除私有制？" class="headerlink" title="第十六个问题：能不能用和平的办法废除私有制？"></a>第十六个问题：能不能用和平的办法废除私有制？</h4><p>　　答：但愿如此，共产主义者当然是最不反对这种办法的人。共产主义者很清楚，任何密谋都不但无益，甚至有害。他们很清楚，革命不能故意地、随心所欲地制造，革命在任何地方和任何时候都是完全不以单个政党和整个阶级的意志和领导为转移的各种情况的必然结果。但他们也看到，几乎所有文明国家的无产阶级的发展都受到暴力压制，因而是共产主义者的敌人用尽一切力量引起革命。如果被压迫的无产阶级因此最终被推向革命，那时，我们共产主义者将用行动来捍卫无产者的事业，正像现在用语言来捍卫它一样。</p><h4 id="第十七个问题：能不能一下子就把私有制废除？"><a href="#第十七个问题：能不能一下子就把私有制废除？" class="headerlink" title="第十七个问题：能不能一下子就把私有制废除？"></a>第十七个问题：能不能一下子就把私有制废除？</h4><p>　　答：不，不能，正像不能一下子就把现有的生产力扩大到为实行财产公有所必要的程度一样。因此，很可能就要来临的无产阶级革命，只能逐步改造现社会，只有创造了所必需的大量生产资料之后，才能废除私有制。</p><h4 id="第十八个问题：这个革命的发展过程将是怎样的？"><a href="#第十八个问题：这个革命的发展过程将是怎样的？" class="headerlink" title="第十八个问题：这个革命的发展过程将是怎样的？"></a>第十八个问题：这个革命的发展过程将是怎样的？</h4><p>　　答：首先无产阶级革命将建立民主的国家制度，从而直接或间接地建立无产阶级的政治统治。在英国可以直接建立，因为那里的无产者现在已占人民的大多数。在法国和德国可以间接建立，因为这两个国家的大多数人民不仅是无产者，而且还有小农和小资产者，小农和小资产者正处在转变为无产阶级的过渡阶段，他们的一切政治利益的实现都越来越依赖无产阶级，因而他们很快就会同意无产阶级的要求。这也许还需要第二次斗争，但是，这次斗争只能以无产阶级的胜利而告终。<br>　　如果不立即利用民主作为手段实行进一步、直接侵犯私有制和保障无产阶级生存的各种措施，那么，这种民主对于无产阶级就毫无用处。这些作为现存关系的必然结果现在已经产生出来的最主要的措施如下：<br>　　(1)用累进税、高额遗产税、取消旁系亲属(兄弟、侄甥等)继承权、强制公债等来限制私有制。<br>　　(2)一部分用国家工业竞争的办法，一部分直接用纸币赎买的办法，逐步剥夺土地所有者、工厂主、铁路所有者和船主的财产。<br>　　(3)没收一切反对大多数人民的流亡分子和叛乱分子的财产。<br>　　(4)在国家农场、工厂和作坊中组织劳动或者让无产者就业，这样就会消除工人之间的竞争，并迫使还存在的厂主支付同国家一样高的工资。<br>　　(5)对社会全体成员实行同样的劳动义务制，直到完全废除私有制为止。成立产业军，特别是在农业方面。<br>　　(6)通过拥有国家资本的国家银行，把信贷系统和金融业集中在国家手里。取消一切私人银行和银行家。<br>　　(7)随著国家拥有的资本和工人的增加，增加国家工厂、作坊、铁路和船舶，开垦一切荒地，改良已垦土地的土壤。<br>　　(8)所有的儿童，从能够离开母亲照顾的时候起，都由国家出钱在国家设施中受教育。把教育和生产结合起来。<br>　　(9)在国有土地上建筑大厦，作为公民公社的公共住宅。公民公社将从事工业生产和农业生产，将把城市和农村生活方式的优点结合起来，避免二者的片面性和缺点。<br>　　(10)拆毁一切不合卫生条件的、建筑得很坏的住宅和市区。<br>　　(11)婚生子女和非婚生子女享有同等的继承权。<br>　　(12)把全部运输业集中在国家手里。<br>　　自然，所有这一切措施不能一下子都实行起来，但是它们将一个跟著一个实行，只要向私有制一发起猛烈的进攻，无产阶级就要被迫继续向前迈进，把全部资本、全部农业、全部工业、全部运输业和全部交换都越来越多地集中在国家手里。上述一切措施都是为了这个目的。无产阶级的劳动将使国家的生产力大大增长，随著这种增长，这些措施实现的可能性和由此而来的集中化程度也将相应地增长。最后，当全部资本、全部生产和全部交换都集中在国家手里的时候，私有制将自行灭亡，金钱将变成无用之物，生产将大大增加，人将大大改变，以致连旧社会最后的各种交往形式也能够消失。</p><h4 id="第十九个问题：这种革命能不能单独在一个国家发生？"><a href="#第十九个问题：这种革命能不能单独在一个国家发生？" class="headerlink" title="第十九个问题：这种革命能不能单独在一个国家发生？"></a>第十九个问题：这种革命能不能单独在一个国家发生？</h4><p>　　答：不能。单是大工业建立了世界市场这一点，就把全球各国人民，尤其是各文明国家的人民，彼此紧紧地联系起来，以致每一国家的人民都受到另一国家发生的事情的影响。此外，大工业使所有文明国家的社会发展大致相同，以致在所有这些国家，资产阶级和无产阶级都成了社会上两个起决定作用的阶级，它们之间的斗争成了当前的主要斗争。因此，共产主义革命将不是仅仅一个国家的革命，而是将在一切文明国家里，至少在英国、美国、法国、德国同时发生的革命，在这些国家的每一个国家中，共产主义革命发展得较快或较慢，要看这个国家是否有较发达的工业，较多的财富和比较大量的生产力。因此，在德国实现共产主义革命最慢最困难，在英国最快最容易。共产主义革命也会大大影响世界上其他国家，会完全改变并大大加速它们原来的发展进程。它是世界性的革命，所以将有世界性的活动场所。</p><h4 id="第二十个问题：最终废除私有制将产生什么结果？"><a href="#第二十个问题：最终废除私有制将产生什么结果？" class="headerlink" title="第二十个问题：最终废除私有制将产生什么结果？"></a>第二十个问题：最终废除私有制将产生什么结果？</h4><p>　　答：由于社会将剥夺私人资本家对一切生产力和交换手段的支配权以及他们对产品的交换和分配权，由于社会将按照根据实有资源和整个社会需要而制定的计划来管理这一切，所以同现在的大工业管理制度相联系的一切有害的后果，将首先被消除。危机将终止。扩大的生产在现今的社会制度下引起生产过剩，并且是产生贫困的极重要的原因，到那个时候，这种生产就会显得十分不够，还必须大大扩大。超出社会当前需要的生产过剩不但不会引起贫困，而且将保证满足所有人的需要，将引起新的需要，同时将创造出满足这种新需要的手段。这种生产过剩将是新的进步的条件和刺激，它将实现这种进步，而不会像过去那样总是因此造成社会秩序的混乱。摆脱了私有制压迫的大工业的发展规模将十分宏伟，相形之下，目前的大工业状况将显得非常渺小，正像工场手工业和我们今天的大工业相比一样。工业的这种发展将给社会提供足够的产品以满足所有人的需要。现在由于私有制的压迫和土地的分散而难以利用现有改良成果和科学成就的农业，将来同样也会进入崭新的繁荣时期，并将给社会提供足够的产品。这样一来，社会将生产出足够的产品，可以组织分配以满足全体成员的需要。因此，社会划分为各个不同的相互敌对的阶级就是多余的了。这种划分不仅是多余的，甚至是和新的社会制度互不相容的。阶级的存在是由分工引起的，现在这种分工将完全消失，因为要把工业和农业生产提高到上面说过的水平，单靠机械和化学的辅助手段是不够的，还必须相应地发展使用这些手段的人的能力。当上个世纪的农民和工场手工业工人被卷入大工业的时候，他们改变了自己的整个生活方式而成为完全不同的人，同样，由整个社会共同经营生产和由此而引起的生产的新发展，也需要完全不同的人，并将创造出这种人来，共同经营生产不能由现在这种人来进行，因为他们每一个人都只隶属于某一个生产部门，受它束缚，听它剥削，在这里，每一个人都只能发展自己才能的一方面而偏废了其他各方面，只熟悉整个生产的某一个部门或某一个部门的一部分。就是现在的工业也越来越不能使用这样的人了。由整个社会共同地和有计划地来经营的工业，更加需要才能得到全面发展、能够通晓整个生产系统的人。因此，现在已被机器破坏了的分工，即把一个人变成农民、把另一个人变成鞋匠、把第三个人变成工厂工人、把第四个人变成交易所投机者，将完全消失。教育将使年轻人能够很快熟悉整个生产系统，将使他们能够根据社会需要或者他们自己的爱好，轮流从一个生产部门转到另一个生产部门。因此，教育将使他们摆脱现在这种分工给每个人造成的片面性。这样一来，根据共产主义原则组织起来的社会，将使自己的成员能够全面发挥他们的得到全面发展的才能。于是各个不同的阶级也必然消灭。因此，根据共产主义原则组织起来的社会一方面不容许阶级继续存在，另一方面这个社会的建立本身为消灭阶级差别提供了手段。<br>　　由此可见，城市和乡村之间的对立也将消失。从事农业和工业的将是同一些人，而不再是两个不同的阶级，单从纯粹物质方面的原因来看，这也是共产主义联合体的必要条件。乡村农业人口的分散和大城市工业人口的集中，仅仅适应于工农业发展水平还不够高的阶段，这种状态是一切进一步发展的障碍，这一点现在人们就已经深深地感觉到了。<br>　　由社会全体成员组成的共同联合体来共同地和有计划地利用生产力；把生产发展到能够满足所有人的需要的规模；结束牺牲一些人的利益来满足另一些人的需要的状况；彻底消灭阶级和阶级对立；通过消除旧的阶级，通过产业教育、变换工种、所有人共同享受大家创造出来的福利，通过城乡的融合，使社会全体成员的才能得到全面发展；——这就是废除私有制的主要结果。</p><h4 id="第二十一个问题：共产主义社会制度对家庭将产生什么影响？"><a href="#第二十一个问题：共产主义社会制度对家庭将产生什么影响？" class="headerlink" title="第二十一个问题：共产主义社会制度对家庭将产生什么影响？"></a>第二十一个问题：共产主义社会制度对家庭将产生什么影响？</h4><p>　　答：共产主义社会制度将使两性关系成为仅仅和当事人有关而社会无须干预的纯粹私人关系。共产主义社会制度之所以能实现这一点，是由于这种社会制度将废除私有制并将由社会教育儿童，从而将消灭现代婚姻的两种基础，即私有制所产生的妻子依赖丈夫、孩子依赖父母。这也是对道貌岸然的市侩关于共产主义公妻制的号叫的回答。公妻制完全是资产阶级社会的现象，现在的卖淫就是公妻制的充分表现。卖淫是以私有制为基础的，它将随著私有制的消失而消失。因此，共产主义组织并不实行公妻制，正好相反，它要消灭公妻制。</p><h4 id="第二十二个问题：共产主义组织将怎样对待现有的民族？"><a href="#第二十二个问题：共产主义组织将怎样对待现有的民族？" class="headerlink" title="第二十二个问题：共产主义组织将怎样对待现有的民族？"></a>第二十二个问题：共产主义组织将怎样对待现有的民族？</h4><p>　　——保留原案。[2]</p><h4 id="第二十三个问题：共产主义组织将怎样对待现有的宗教"><a href="#第二十三个问题：共产主义组织将怎样对待现有的宗教" class="headerlink" title="第二十三个问题：共产主义组织将怎样对待现有的宗教"></a>第二十三个问题：共产主义组织将怎样对待现有的宗教</h4><p>　　——保留原案。</p><h4 id="第二十四个问题：共产主义者和社会主义者有什么区别？"><a href="#第二十四个问题：共产主义者和社会主义者有什么区别？" class="headerlink" title="第二十四个问题：共产主义者和社会主义者有什么区别？"></a>第二十四个问题：共产主义者和社会主义者有什么区别？</h4><p>　　答：所谓社会主义者分为三类：<br>　　第一类是封建和宗法社会的拥护者，这种社会已被大工业、世界贸易和由它们造成的资产阶级社会所消灭，并且每天还在消灭。这一类社会主义者从现今社会的弊病中得出了这样的结论：应该恢复封建和宗法社会，因为它没有这种种弊病。他们的所有建议都是直接或间接地为了这一目的。共产主义者随时都要坚决同这类反动的社会主义者作斗争，尽管他们假惺惺地表示同情无产阶级的苦难并为此而洒出热泪。因为：<br>　　(1)他们追求一种根本不可能的事情；<br>　　(2)他们企图恢复贵族、行会师傅、工场手工业主以及和他们相联系的专制君主或封建君主、官吏、士兵和僧侣的统治，他们想恢复的这种社会固然没有现今社会的各种弊病，但至少会带来同样多的其他弊病，而且它根本不可能展现通过共产主义组织来解放被压迫工人的任何前景；<br>　　(3)当无产阶级成为革命的和共产主义的阶级的时候，这些社会主义者总要暴露出他们的真实意图。那时他们马上和资产阶级联合起来反对无产者。<br>　　第二类是现今社会的拥护者，现今社会必然产生的弊病，使他们为这个社会的存在担心。因此，他们力图保持现今社会，不过要消除和它联系在一起的弊病。为此，一些人提出了种种简单的慈善办法，另一些人则提出了规模庞大的改革计划，这些计划在改组社会的借口下企图保存现今社会的基础，从而保存现今社会本身。共产主义者也必须同这些资产阶级社会主义者作不懈的斗争，因为他们的活动有利于共产主义者的敌人，他们所维护的社会正是共产主义者所要推翻的社会。<br>　　最后，第三类是民主主义的社会主义者，他们和共产主义者同道，他们希望实现问题中所提出的部分措施，但他们不是把这些措施当作走向共产主义的过渡办法，而是当作足以消除贫困和现今社会的弊病的措施。这些民主主义的社会主义者，或者是还不够了解本阶级解放条件的无产者，或者是小资产阶级的代表，这个阶级直到争得民主和实行由此产生的社会主义措施为止，在许多方面都和无产者有共同的利益。因此，共产主义者在行动的时候，只要民主主义的社会主义者不为占统治地位的资产阶级效劳和不攻击共产主义者，就应当和这些社会主义者达成协议，这时尽可能和他们采取共同的政策。当然，共同行动并不排除讨论存在于他们和共产主义者间的分歧意见。</p><h4 id="第二十五个问题：共产主义者怎样对待现有的其他政党？"><a href="#第二十五个问题：共产主义者怎样对待现有的其他政党？" class="headerlink" title="第二十五个问题：共产主义者怎样对待现有的其他政党？"></a>第二十五个问题：共产主义者怎样对待现有的其他政党？</h4><p>　　答：在不同的国家采取不同的态度。在资产阶级占统治地位的英国、法国和比利时，共产主义者和各民主主义政党暂时还有共同的利益，并且民主主义者在他们现在到处坚持的社会主义措施中越接近共产主义者的目的，就是说，他们越明确地坚持无产阶级的利益和越依靠无产阶级，这种共同的利益就越多。例如在英国，由工人组成的宪章派就要比民主主义小资产者或所谓激进派在极大程度上更接近共产主义者。<br>　　在实行民主宪法的美国，共产主义者必须支持愿意用这个宪法去反对资产阶级、并利用它来为无产阶级谋利益的政党，即全国土地改革派。<br>　　在瑞士是激进派，虽然他们本身是个成分极其复杂的政党，但他们是共产主义者能够打交道的唯一政党，其中瓦特州和日内瓦州的激进派又是最进步的。<br>　　最后，在德国，资产阶级和专制君主制之间的决战还在后面。但是，共产主义者不能指望在资产阶级取得统治以前就和资产阶级进行决战，所以共产主义者为了本身的利益必须帮助资产阶级尽快地取得统治，以便尽快地再把它推翻。因此，在自由派资产阶级同政府的斗争中，共产主义者始终应当支持自由派资产阶级，只是应当注意，不要跟著资产者自我欺骗，不要听信他们关于资产阶级的胜利给无产阶级带来良好结果的花言巧语。共产主义者从资产阶级的胜利中得到的好处只能是：(1)得到各种让步，使共产主义者易于捍卫、讨论和传播自己的原则，从而使无产阶级易于联合成一个紧密团结的、准备战斗的和有组织的阶级；(2)使他们确信，从专制政府垮台的那一天起，就轮到资产者和无产者进行斗争了。从这一天起，共产主义者在这里所采取的党的政策，将和在资产阶级现在已占统治地位的那些国家里所采取的政策一样。</p><p>附录</p><h3 id="“南巡讲话”摘抄"><a href="#“南巡讲话”摘抄" class="headerlink" title="“南巡讲话”摘抄"></a>“南巡讲话”摘抄</h3><p>1984年我来过广东。当时，农村改革搞了几年，城市改革刚开始，经济特区才起步。八年过去了，这次来看，深圳、珠海特区和其他一些地方，发展得这么快，我没有想到。看了以后，信心增加了。</p><p>革命是解放生产力，改革也是解放生产力，推翻帝国主义、封建主义、官僚资本主义的反动统治，使中国人民的生产力获得解放，这是革命，所以革命是解放生产力。社会主义基本制度确立以后，还要从根本上改变束缚生产力发展的经济体制，建立起充满生机和活力的社会主义经济体制，促进生产力的发展，这是改革，所以改革也是解放生产力。过去，只讲在社会主义条件下发展生产力，没有讲还要通过改革解放生产力，不完全。应该把解放生产力和发展生产力两个讲全了。</p><p>要坚持党的十一届三中全会以来的路线方针政策，关键是坚持“一个中心、两个基本点”。不坚持社会主义，不改革开放，不发展经济，不改善人民生活，只能是死路一条。基本路线要管一百年，动摇不得。只有坚持这条路线，人民才会相信你，拥护你，谁要改变三中全会以来的路线方针政策，老百姓不答应，谁就会被打倒。这一点，我讲过几次。如果没有改革开放的成果，“六四”这个关我们闯不过，闯不过就乱，乱就打内战，“**”就是内战。为什么“六四”以后我们的国家能够很稳定？就是因为我们搞了改革开放，促进了经济发展，人民生活得到了改善。所以，军队、国家政权，都要维护这条道路、这个制度、这些政策。</p><p>在这短短的十几年内，我们国家发展得这么快，使人民高兴，世界瞩目，这就足以证明三中全会以来路线、方针、政策的正确性，谁想变也变不了。说过去说过来，就是一句话，坚持这个路线、方针、政策不变。改革开放以来，我们立的章程并不少，而且是全方位的。经济、政治、科技、教育、文化、军事、外交等各个方面都有明确的方针和政策，而且有准确的表述语言。这次十三届八中全会开得好，肯定农村家庭 联产承包责任制不变。一变就人心不安，人们就会说中央的政策变了。农村改革初期，安徽出了个“傻子瓜子”问题。 当时许多人不舒服，说他赚了一百万，主张动他。我说不能动，一动人们就会说政策变了，得不偿失。象这一类的问题还有不少，如果处理不当，就很容易动摇我们的方针，影响改革的全局。城乡改革的基本政策，一定要长期保持稳定。当然，随着实践的发展，该完善的完善，该修补的修补，但总的要坚定不移。即使没有新的主意也可以，就是不要变，不要使人们感到政策变了。有了这一条，中国就大有希望。</p><p>改革开放胆子要大一些，敢于试验，不能像小脚女人一 样。看准了的，就大胆地试，大胆地闯。深圳的重要经验就是敢闯。没有一点闯的精神，没有一点“冒”的精神，没有一股气呀、劲呀，就走不出一条好路，走不出一条新路，就干不出新的事业。不冒点风险，办什么事情都有百分之百的把握，万无一失，谁敢说这样的话？一开始就自以为是，认为百分之百正确，没那么回事，我就从来没有那么认为。每年领导层都要总结经验，对的就坚持，不对的赶快改，新问题出来抓紧解决。恐怕再有30年的时间，我们才会在各方面形成一整套更加成熟、更加定型的制度。在这个制度下的方针、政策，也将更加定型化。现在建设中国式的社会主义，经验一天比一天丰富。经验很多，从各省的报刊材料看，都有自己的特色。这样好嘛，就是要有创造性。</p><p>改革开放迈不开步子，不敢闯，说来说去就是怕资本主义的东西多了，走了资本主义道路。要害是姓“资”还是姓“社”的问题。判断的标准，应该主要看是否有利于发展社会主义社会的生产力，是否有利于增强社会主义国家的综合国力，是否有利于提高人民的生活水平。对办特区，从一开始就有不同意见，担心是不是搞资本主义。深圳的建设成就，明确回答了那些有这样那样担心的人。特区姓“社”不姓“资”。</p><p>从深圳的情况看，公有制是主体，外商投资只占四分之一，就是外资部分，我们还可以从税收、劳务等方面得到益处嘛！多搞点“三资”企业，不要怕。只要我们头脑清醒，就不怕。我们有优势，有国营大中型企业，有乡镇企业，更重要的是政权在我们手里。有的人认为，多一分外资，就多一分资本主义，“三资”企业多了，就是资本主义的东西多了，就是发展了资本主义，这些人连基本常识都没有。我国现阶段的“三资”企业，按照现行的法规政策，外商总是要赚一 些钱。但是，国家还要拿回税收，工人还要拿回工资，我们还可以学习技术和管理，还可以得到信息、打开市场。因此，“三资”企业受到我国整个政治、经济条件的制约，是社会主义经济的有益补充，归根到底是有利于社会主义的。</p><p>计划多一点还是市场多一点，不是社会主义与资本主义的本质区别。计划经济不等于社会主义，资本主义也有计划；市场经济不等于资本主义，社会主义也有市场，计划和市场都是经济手段。社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。就是要对大家讲这个道理。证券、股市，这些东西究竟好不好，有没有危险，是不是资本主义独有的东西，社会主义能不能用？</p><p>允许看，但要坚决地试。看对了，搞一两年对了，放开；错了，纠正，关了就是了。关，也可以快关，也可以慢关，也可以留一点尾巴。怕什么，坚持这种态度就不要紧，就不会犯大错误。总之，社会主义要赢得与资本主义相比较的优势，就必须大胆吸收和借鉴人类社会创造的一切文明成果，吸收和借鉴当今世界各国包括资本主义发达国家的一切反映**<a href="https://web.archive.org/web/20191106045521/http://car.auto.ifeng.com/brand/20046">现代</a>**社会化生产规律的先进经营方式、管理方法。</p><p>走社会主义道路，就是要逐步实现共同富裕。共同富裕的构想是这样提出的：一部分地区有条件先发展起来，一部分地区发展慢点，先发展起来的地区带动后发展的地区，最终达到共同富裕。如果富的愈来愈富，穷的愈来愈穷，两极分化就会产生，而社会主义制度就应该而且能够避免两极分化。解决的办法之一，就是先富起来的地区多交点利税，支持贫困地区的发展。当然，太早这样办也不行，现在不能削弱发达地区的活力，也不能鼓励吃“大锅饭”。什么时候突出地提出和解决这个问题，在什么基础上提出和解决这个问题，要研究。可以设想，在本世纪末达到小康水平的时候，就要突出地提出和解决这个问题。到那个时候，发达地区要继续发展，并通过多交利税和技术转让等方式大力支持不发达地区。不发达地区又大都是拥有丰富资源的地区，发展潜力是很大的。总之，就全国范围来说，我们一定能够逐步顺利解决沿海同内地贫富差距的问题。</p><p>对改革开放，一开始就有不同意见，这是正常的。不只是经济特区问题，更大的问题是农村改革，搞农村家庭联产承包，废除人民公社制度。开始的时候只有三分之一的省干起来，第二年超过三分之二，第三年才差不多全部跟上，这是就全国范围讲的，开始搞并不踊跃呀，好多人在看。我们的政策就是允许看。允许看，比强制好得多。我们推行三中全会以来的路线、方针、政策，不搞强迫，不搞运动，愿意干就干， 干多少是多少，这样慢慢就跟上来了。不搞争论，是我的一个发明。不争论，是为了争取时间干。一争论就复杂了，把时间都争掉了，什么也干不成，不争论，大胆地试，大胆地闯。农村改革是如此，城市改革也应如此。</p><p>现在，有右的东西影响我们，也有“左”的东西影响我们，但根深蒂固的还是“左”的东西。有些理论家、政治家，拿大帽子吓唬人的，不是右，而是“左”。“左”带有革命的色彩，好像越“左”越革命，“左”的东西在我们党的历史上可怕呀！一个好好的东西，一下子被他搞掉了。右可以葬送社会主义，“左”也可以葬送社会主义。中国要警惕右，但主要是防止“左”。右的东西有，动乱就是右的！“左”的东西也有。把改革开放说成是引进和发展资本主义，认为和平演变的主要危险来自经济领域，这些就是“左”。我们必须保持清醒的头脑，这样就不会犯大错误，出现问题也容易纠正和改正。</p><p>抓住时机，发展自己，关键是发展经济。现在，周边一 些国家和地区经济发展比我们快，如果我们不发展或发展得太慢，老百姓一比较就有问题了。所以，能发展就不要阻挡，有条件的地方要尽可能搞快点，只要是讲效益，讲质量，搞外向型经济，就没有什么可以担心的。低速度就等于停步，甚至等于后退。要抓机会，现在就是好机会。我就担心丧失机会。不抓呀，看到的机会就丢掉了，时间一晃就过去了。</p><p>我国的经济发展，总要力争隔几年上一个台阶。当然，不是鼓励不切实际的高速度，还是要扎扎实实，讲求效益，稳步协调地发展。比如广东，要上几个台阶，力争用20年的时间赶上亚洲“四小龙”。比如江苏等发展比较好的地区，就应该比全国平均速度快。又比如上海，目前完全有条件搞得更快一点。上海在人才、技术和管理方面都有明显的优势，辐射面宽。回过头看，我的一个大失误就是搞四个经济特区时没有加上上海。要不然，现在长江三角洲，整个长江流域，乃至全国改革开放的局面，都会不一样。 从我们自己这些年的经验来看，经济发展隔几年上一个台阶，是能够办得到的。我们真正干起来是1980年。81、82、83这三年，改革主要在农村进行。84年重点转入城市改革。</p><p>经济发展比较快的是84年至88年。这5年，首先是农村改革带来许多新的变化，农作物大幅度增产，农民收入大幅度增加，乡镇企业异军突起。广大农民购买力增加了，不仅盖了大批新房子，而且自行车、缝纫机、收音机、手表“四大件”和一些高档消费品进入普通农民家庭。农副产品的增加，农村市场的扩大，农村剩余劳动力的转移，又强有力地推动了工业的发展。这五年，共创造工业总产值6万多亿元，平均每年增长21.7%。吃、穿、注行、用等各方面的工业品，包括彩电、冰箱、洗衣机，都大幅度增长。**<a href="https://web.archive.org/web/20191106045547/http://app.finance.ifeng.com/data/indu/jgzs.php?symbol=5">钢材</a>**、水泥等生产资料也大幅度增长。农业和工业，农村和城市，就是这样相互影响、相互促进。这是一个非常生动、非常有说服力的发展过程。可以说，这个期间我国财富有了巨额增加，整个国民经济上了一个新的台阶。89年开始治理整顿。治理整顿，我是赞成的，而且确实需要。经济“过热”，确实带来一些问题。比如，票子发得多了一点，物价波动大了一点，重复建设比较严重，造成了一些浪费。但是，怎样全面地来看那五 年的加速发展？那五年的加速发展，也可以称作一种飞跃，但与“大跃进”不同，没有伤害整个发展的机体、机制。那五年的加速发展功劳不小，这是我的评价。治理整顿有成绩，但评价功劳，只算稳的功劳，还是那五年加速发展也算一功？或者至少算是一方面的功？如果不是那几年跳跃一下，整个经济上了一个台阶，后来三年治理整顿不可能顺利进行。看起来我们的发展，总是要在某一个阶段，抓住时机，加速搞几年，发现问题及时加以治理，尔后继续前进。从根本上说，手头东西多了，我们在处理各种矛盾和问题时就立于主动地位。</p><p>对于我们这样发展中的大国来说，经济要发展得快一点，不可能总是那么平平静静、稳稳当当。要注意经济稳定、协调地发展，但稳定和协调也是相对的，不是绝对的。发展才是硬道理。这个问题要搞清楚。如果分析不当，造成误解，就会变得谨小慎微，不敢解放思想，不敢放开手脚，结果是丧失时机，犹如逆水行舟，不进则退。</p><p>从国际经验来看，一些国家在发展过程中，都曾经有过高速发展时期，或若干高速发展阶段。日本、南朝鲜、东南亚一些国家和地区，就是如此。现在，我们国内条件具备，国际环境有利，再加上发挥社会主义制度能够集中力量办大事的优势，在今后的**<a href="https://web.archive.org/web/20191106045547/http://car.auto.ifeng.com/brand/20046">现代</a>**化建设长过程中，出现若干个发展速度比较快、效益比较好的阶段，是必要的，也是能够办到的，我们就是要有这个雄心壮志！</p><p>经济发展得快一点，必须依靠科技和教育。我说科学技术是第一生产力。近一二十年来，世界科学技术发展得多快啊！高科技领域的一个突破，带动一批产业的发展。我们自己这几年，离开科学技术能增长得这么快吗？要提倡科学，靠科学才有希望。近十几年来我国科技进步不小，希望在九十 年代，进步得更快。每一行都树立一个明确的战略目标，一 定要打赢。高科技领域，中国也要在世界占有一席之地，我是个外行，但我要感谢科技工作者为国家作出的贡献和争得的荣誉。大家要记住那个年代，钱学森，李四光、钱三强那一批老科学家，在那么困难的条件下，把两弹一星和好多高科技搞起来。应该说，现在的科学家更幸福，因此对他们的要求会更多。我说过，知识分子是工人阶级的一部分。老科学家、中年科学家很重要，青年科学家也很重要。希望所有出国学习的人回来。不管他们过去的政治态度怎么样，都可以回来，回来后妥善安排。这个政策不能变。告诉他们，要做出贡献，还是回国好。希望大家通力合作，为加快发展我国科技和教育事业多做实事。搞科技，越高越好，越新越好，越高越新，我们也就越高兴。不只我们高兴，人民高兴，国家高兴。对我们的国家要爱，要让我们的国家发达起来。 (四)</p><p>要坚持两手抓，一手抓改革开放，一手抓打击各种犯罪活动。这两只手都要硬。打击各种犯罪活动，扫除各种丑恶现象，手软不得。广东二十年赶上亚洲“四小龙”，不仅经济要上去，社会秩序、社会风气也要搞好，两个文明建设都要超过他们，这才是有中国特色的社会主义。新加坡的社会秩序算是好的，他们管得严，我们应当借鉴他们的经验，而且比他们管得更好。开放以后，一些腐朽的东西也跟着进来了，中国的一些地方也出现了丑恶的现象，如吸毒、嫖娼、经济犯罪等。要注意很好地抓，坚决取缔和打击，决不能任其发展。新中国成立以后，只花了三年时间，这些东西就一扫而光。吸鸦片烟、吃白面，世界上谁能消灭得了？***办不到。资本主义办不到，事实证明，共产党能够消灭丑恶的东西。在整个改革开放过程中都要反对腐败。对干部和共产党员来说，廉政建设要作为大事来抓。还是要靠法制，搞法制靠得住些。总之，只要我们的生产力发展，保持一定的经济增长速度，坚持两手抓，社会主义精神文明建设就可以搞上去。</p><p>在整个改革开放的过程中，必须始终注意坚持四项基本原则。十二届六中全会我提出反对资产阶级自由化还要搞二 十年，现在看起来还不只二十年。资产阶级自由化泛滥，后果极其严重。特区搞建设，花了十几年时间才有这个样子，垮起来可是一夜之间啊，垮起来容易，建设就很难。在苗头出现时不注意，就会出事。</p><p>依靠无产阶级专政保卫社会主义制度，这是马克思主义的一个基本观点。马克思说过，阶级斗争学说不是他的发明，真正的发明是关于无产阶级专政的理论。历史经验证明，刚刚掌握政权的新兴阶级，一般来说，总是弱于敌对阶级的力量，因此要用专政的手段来巩固政权。对人民实行民主，对敌人实行专政，这就是人民民主专政。运用人民民主专政的力量，巩固人民的政权，是正义的事情，没有什么输理的地方。我们搞社会主义才几十年，还处在初级阶段。巩固和发展社会主义制度，还需要一个很长的历史阶段，需要我们几代人、十几代人，甚至几十代人坚持不懈地努力奋斗，决不能掉以轻心。</p><p>正确的政治路线要靠正确的组织路线来保证。中国的事情能不能办好，社会主义和改革开发能不能坚持，经济能不能快一点发展起来，国家能不能长治久安，从一定意义上说，关键在人。</p><p>帝国主义搞和平演变，把希望寄托在我们以后的几代人身上。江泽民同志他们这一代可以算是第三代，还有第四代、第五代。我们这些老一辈的人在，有分量，敌对势力知道变不了。但我们这些老人呜呼哀哉后，谁来保险？所以，要把我们的军队教育好，把我们的专政机构教育好，把共产党员教育好，把人民和青年教育好。中国要出问题，还是出在共产党内部。对这个问题要清醒，要注意培养人，要按照“革命化、年轻化、知识化、专业化”的标准，选拔德才兼备的人进班子。我们说党的基本路线要管一百年，要长治久安，就要靠这一条。真正关系到大局的是这个事。这是眼前的一个问题，并不是已经顺利解决了，希望解决得好。“**”结束，我出来后，就注意这个问题。我们发现靠我们这老一代解决不了长治久安的问题，于是我们推荐别的人，真正要找第三代。但是没有解决问题，两个人都失败了，而且不是在经济上出现问题，都是在反对资产阶级自由化的问题上栽跟头。这就不能让了。我在89年5月底还说过，现在就是要选人民公认是坚持改革开放路线并有政绩的人，大胆地放进新的领导机构里，使人民感到我们真心诚意搞改革开放。</p><p>人民，是看实践。人民一看，还是社会主义好，还是改革开放好，我们的事业就会万古长青！</p><p>要进一步找年轻人进班子。现在中央这个班子年龄还是大了点，60过一点的就算年轻的了。这些人过10年还可以，再过20年，就80多岁了，像我今天这样聊聊天还可以，做工作精力就不够了。现在中央的班子干得不错嘛！问题当然还有很多，什么时候问题都不会少。我们这些老人关键是不管事，让新上来的人放手干，看着现在的同志成熟起来。老年人自觉让位，在旁边可以帮助一下，但不要作障碍人的事。</p><p>对于办得不妥当的事，也要好心好意地帮，要注意下一代接班人的培养。我坚持退下来，就是不要在老年的时候犯错误。 老年人有长处，但也有很大的弱点，老年人容易固执，因此老年人也要有点自觉性。越老越不要最后犯错误，越老越要谦虚一点。现在还要继续选人，选更年轻的同志，帮助培养。</p><p>不要迷信，我二十几岁就做大官了，不比你们现在懂得多，不是也照样干？要选人，人选好了，帮助培养，让更多的年轻人成长起来。他们成长起来，我们就放心了，现在还不放心啊！说到底，关键是我们共产党内部要搞好，不出事，就可以放心睡大觉。十一届三中全会确立的这条中国的发展路线，是否能够坚持得住，要靠大家努力，特别是要教育后代。</p><p>现在有一个问题，就是形式主义多。电视一打开，尽是会议。会议多，文章太长，讲话也太长，而且内容重复，新的语言并不很多。重复的话要讲，但要精简。形式主义也是官僚主义。要腾出时间来多办实事，多做少说。毛主席不开长会，文章短而精，讲话也很精练。周总理四届人大的报告，毛主席指定我负责起草，要求不得超过5000字，我完成了任务。5000字，不是也很管用吗？我建议抓一下这个问题。</p><p>学马列要精，要管用的。长篇的东西是少数搞专业的人读的，群众怎么读？要求都读大本子，那是形式主义的，办不到。我的入门老师是《共产党宣言》和《共产主义ABC》。最近，有的外国人议论，马克思主义是打不倒的。打不倒，并不是因为大本子多，而是因为马克思主义的真理颠扑不破。实事求是是马克思主义的精髓。要提倡这个，不要提倡本本。我们改革开放的成功，不是靠本本，而是靠实践，靠实事求是。</p><p>农村搞家庭联产承包，这个发明权是农民的。农村改革中的好多东西，都是基层创造出来，我们把它拿来加工提高作为全国的指导。实践是检验真理的唯一标准。我读的书并不多，就是一条，相信毛主席讲的实事求是。过去我们打仗靠这个，现在搞建设、搞改革也靠这个。我们讲了一辈子马克思主义，其实马克思主义并不玄奥。马克思主义是很朴实的东西，很朴实的道理。</p><p>我坚信，世界上赞成马克思主义的人会多起来的，因为马克思主义是科学。它运用历史唯物主义揭示了人类社会发展的规律。封建社会代替奴隶社会，资本主义代替封建主义，社会主义经历一个长过程发展后必然代替资本主义。这是社会历史发展不可逆转的总趋势，但道路是曲折的。资本主义代替封建主义的几百年间，发生过多少次王朝复辟？所以，从一定意义上说，某种暂时复辟也是难以完全避免的规律性现象。一些国家出现严重曲折，社会主义好像被削弱了，但人民经受锻炼，从中吸收教训，将促使社会主义向着更加健康的方向发展。因此，不要惊慌失措，不要认为马克思主义就消失了，没用了，失败了。哪有这回事！</p><p>世界和平与发展这两大问题，至今一个也没有解决。社会主义中国应该用实践向世界表明，中国反对霸权主义、强权政治，永不称霸。中国是维护世界和平的坚定力量。我们要在建设有中国特色的社会主义道路上继续前进。资本主义发展几百年了，我们干社会主义才多长时间！何况我们自己还耽误了20年。如果从建国起，用100年时间把我国建设成中等水平的发达国家，那就很了不起！从现在起到下世纪中叶，将是很要紧的时期，我们要埋头苦干。我们肩膀上的担子重，责任大啊！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摘抄 </tag>
            
            <tag> 政治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python is For Fun</title>
      <link href="/2019/11/30/Python%20is%20For%20Fun/"/>
      <url>/2019/11/30/Python%20is%20For%20Fun/</url>
      
        <content type="html"><![CDATA[<h1 id="Read-after-me-Python-is-for-Fun"><a href="#Read-after-me-Python-is-for-Fun" class="headerlink" title="Read after me, Python is for Fun!   :)"></a>Read after me, Python is for Fun!   :)</h1><p><strong>简单的人名对话</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入姓名:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 同学，学好Python，前途无量！&quot;</span>%name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 大侠，学好Python，大展拳脚！&quot;</span>%name[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 哥哥，学好Python，人见人爱！&quot;</span>%name[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><p>输入长者后，依次回显示江大侠和民哥哥<br><img src="/2019/11/30/Python%20is%20For%20Fun/a.png"></p><p><strong>九九乘法表输出</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;*&#123;&#125;=&#123;:2&#125; &quot;</span>.<span class="hljs-built_in">format</span>(j,i,i*j), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>绘制太阳花</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> *<br>color(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>)<br>begin_fill()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    forward(<span class="hljs-number">200</span>)<br>    left(<span class="hljs-number">170</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(pos()) &lt; <span class="hljs-number">1</span>:<br>       <span class="hljs-keyword">break</span><br>end_fill()<br>done()<br></code></pre></td></tr></table></figure><p>结果为</p><p><img src="/2019/11/30/Python%20is%20For%20Fun/b.png"></p><p><strong>再来画个大蟒蛇吧:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#e2.2DrawPython.py</span><br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> *<br>setup(<span class="hljs-number">650</span>, <span class="hljs-number">350</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<br>penup()<br>fd(-<span class="hljs-number">250</span>)<br>pendown()<br>pensize(<span class="hljs-number">25</span>)<br>pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    circle(<span class="hljs-number">40</span>, <span class="hljs-number">80</span>)<br>    circle(-<span class="hljs-number">40</span>, <span class="hljs-number">80</span>)<br>circle(<span class="hljs-number">40</span>, <span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>fd(<span class="hljs-number">40</span>)<br>circle(<span class="hljs-number">16</span>, <span class="hljs-number">180</span>)<br>fd(<span class="hljs-number">40</span> * <span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br><br></code></pre></td></tr></table></figure><p>然后画出个大蟒蛇。。。。<br><img src="/2019/11/30/Python%20is%20For%20Fun/qq.png"></p><p>贴一段这样的代码：（表示华氏度和摄氏度的转换），很有参考意义</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#e1.1TempConvert.py</span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值: &quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    F = <span class="hljs-number">1.8</span>*<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>对于注释而言，</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#可以表示单行注释</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>))<span class="hljs-comment">#也可以这样注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">fneifi</span><br><span class="hljs-string">feisf</span><br><span class="hljs-string">fneisn</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>       这样中间就全是注释了<br></code></pre></td></tr></table></figure><p><strong>对于python的字符串而言</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">&gt;&gt;&gt; </span>aaa=<span class="hljs-string">&quot;110C&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[-<span class="hljs-number">1</span>])<br>C<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">1</span>])<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-number">110</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">0</span>])<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>aaa=<span class="hljs-string">&quot;123456789C&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">0</span>])<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">1</span>])<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">5</span>])<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[-<span class="hljs-number">1</span>])<br>C<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">9</span>])<br>C<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-number">123456789</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(aaa[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>])<br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>应该还是很容易看懂我是什么意思吧，[0：-1]表示从第一个字符到最后一个（不包括最后一个）</p><p><strong>对输入：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">TempStr=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br></code></pre></td></tr></table></figure><p>也是很有参考意义的</p><p><strong>对分支:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br></code></pre></td></tr></table></figure><p>查找最后一个字符</p><p><strong>另外，eval函数表示已python表达式的方式去解释并执行字符串</strong></p><p>最后，该程序还能转化为函数形式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#*******************************e1.3TempConvert.py***********************************************</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tempConvert</span>(<span class="hljs-params">ValueStr</span>):<br>    <span class="hljs-keyword">if</span> ValueStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br>        C = (<span class="hljs-built_in">eval</span>(ValueStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br>    <span class="hljs-keyword">elif</span> ValueStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>        F = <span class="hljs-number">1.8</span>*<span class="hljs-built_in">eval</span>(ValueStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值: &quot;</span>)<br>tempConvert(TempStr)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国是否愚弄了西方</title>
      <link href="/2019/11/29/%E4%B8%AD%E5%9B%BD%E6%98%AF%E5%90%A6%E6%84%9A%E5%BC%84%E4%BA%86%E8%A5%BF%E6%96%B9/"/>
      <url>/2019/11/29/%E4%B8%AD%E5%9B%BD%E6%98%AF%E5%90%A6%E6%84%9A%E5%BC%84%E4%BA%86%E8%A5%BF%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p>今天看见一个帖子，里面虽然说的是资本方面的问题，但是在相当程度上提出了舆论的作用，西方舆论的虚伪以及追求资本利益的本质。文字可能多一些，但是说的很透彻。</p><p>以下是原文：</p><p>一位教授语出惊人：中国真在愚弄欺骗全世界</p><p>摘要: 西方媒体的焦虑，正是中国年轻人的机会。中国能否坚持自己成功的道路，要看年青一代了 …</p><p>近日，BBC推出纪录片《中国是如何愚弄世界的》（How China Fooled the World），再次预测中国经济即将崩溃，引发读者热议。</p><p>观察者网就此专访先后在北京大学、复旦大学、美哥伦比亚大学、德克萨斯大学担任博导及高级研究员的陈平教授，就其数十年在海外生活的经验以及对中西之间的观察做出评论。陈平教授早年师从诺贝尔化学奖得主普里戈金。</p><p>观察者网：BBC近日推出了新拍摄的纪录片，翻译过来就是《中国如何愚弄世界》，里面主要是谈到自世界经济危机之后，中国经济这几年一直还保持旺盛增长，主要原因就是靠银行驱动的大批的贷款来通过基础建设类似的方式，从而还出现了很多的影子银行，导致经济蓬勃发展的假象，当时拍摄者主要考察了武汉，看到大批房产或者基建，最后得出结论：这不是一个健康的发展方式。同时他也采访到了美国前任财政部长等这些人，得到了佐证。</p><p>同时也有西方媒体反唇相讥，说西方媒体愚弄了世界，BBC讲的是假象，这个假象恰恰迎合了中国希望西方看到的中国，希望不要把中国当做一个真正的对手。</p><p>看到这两家之间的对峙，我想提的问题就是：第一，您怎样评价BBC这个纪录片，从它的技术层面还有它的问题层面；第二就是西方的言论焦灼意味着什么，您对此有何分析？</p><p>陈平：这个问题其实有好几个层面，第一个是最近金融危机以后，西方的舆论确实有一个很大的反思，这个反思是什么呢，认为西方上当了，怎么上当呢，在过去的30年里，西方以为可以把中国纳入西方主导的全球体系，为此轻视了中国的竞争潜力。</p><p>西方在向中国转移了大量的技术和实体经济以后发现，中国经济的实体能力实际上超过了西方，成为西方的最大竞争者和挑战者，但是西方目前想要扭转这个格局已经来不及了。西方的精英确实开始后悔他们的中国战略，但是他们没有想清楚，其原因不是中国成功地愚弄西方，而是西方素来自大，低估中国。</p><p>在中国开始对西方开放的很长一段时间，实际上西方主流和中国的多数理论家都认为，中国只要开放，结果就会和苏联东欧一样，全盘瓦解；至少是中国全盘接受西方的价值观念，接受西方的体制，变成拉丁美洲一样的依赖经济。你要明白，包括中国和西方的主流学者都是这样认为的。唯一的例外是邓小平。</p><p>我记得特别清楚，中国加入WTO之前，我问过中国的主流经济学家如何预测加入WTO 的前景。中国的主流经济学家无论左中右都说咱们对西方的让步太大了，中国当时是开放一个领域，就沦陷一个领域，例如家电和百货。</p><p>所以当时西方和中国的主流经济学家都预言，三个领域中国会全盘皆输，第一是汽车，第二是金融，第三是农业，这三个都输了中国怎么可能立国呢？但结果出乎所有人意料，不但中国没有瓦解，反而中国的出口大大增加，汽车产销量超过美国，金融比美欧日还稳定，农业比日本还能独立自主。</p><p>所以西方媒体才会有一个错误的反思，认为中国的领导人比诸葛亮还能神算，先是编造了一个中国不会赢的理论，然后让西方放心大胆的占领中国市场，结果呢是把自己掏空了。他们多数人不承认自己的西方中心论有问题。</p><p>我的观察很简单。第一，中国领导人和知识分子从上到下，在30年前甚至现在，都没有几个人敢想象中国有可能超越西方主导世界秩序。这样的雄心彼得大帝有，毛泽东有，邓小平可能有，我相信习主席私下会有但是不公开说，但是多数中国精英是没有的。所以认为中国有这么一个高瞻远瞩的战略集团去愚弄世界，这是过分高估了中国领导层的眼界，实际上是不存在的，这是第一条。</p><p>第二条，西方舆论有没有愚弄世界，我认为西方媒体就是用不同的方法愚弄世界，但是西方的利益是分裂的。在苏联瓦解以后，西方的主流媒体非常希望唱衰中国，然后证明历史终结论，西方价值观普遍胜利了，资本主义不但要征服中国，也要征服拉丁美洲、阿拉伯和全世界，所以西方主流媒体唱衰中国，是他们几十年以来不变的方针。但是我注意到一件非常奇怪的事情。</p><p>我在西方呆了30多年，发现金融媒体和主流媒体的调子是不一样的。为什么？因为金融界明白中国是最大的发展中市场。金融是要赚钱的，如果英美的金融媒体把中国唱衰，把在中国投资的机会让给日韩，金融（媒体）就会丢掉市场。所以，为了金融资本的利益，金融媒体也必须为外资进入中国引路。所以我就发现，西方金融媒体也是双轨制。</p><p>你看《华尔街日报》，《金融时报》，一定是装模作样地在头版头条唱衰中国，表示自己的政治立场“正确”，然后又在第二第三条详细报道中国的投资前景，使西方最有战略眼光的投资家，包括沃伦•巴菲特，乔治•索罗斯，还有其他的人，都大笔投资中国的战略产业，包括国有大企业，也包括新兴企业。所以，西方媒体，说一套，做一套。判断世界格局的变化，别只看媒体说什么，更要注意大资本干什么。资本家不做赔钱的买卖。中国只要坚定改革发展不动摇，成功之后，不怕西方资本不来入伙。</p><p>就此而言，中国领导和民众必须明白，西方媒体是为利益集团服务，不是客观中性甚至先进的。西方媒体愚弄听众，我认为有两个目的：第一是捍卫西方的主流价值，让各国心甘情愿听从西方的指挥棒。第二是西方资本的投机战略。你要明白国际金融市场是西方的跨国银行操纵的，我今天不举具体企业的名字，但我观察过中国在香港的红筹股市场，美国某个大投行先报道一个新闻，说中国经济前景非常悲观，举例的材料看起来都是有依据的，然后香港股市大跌，大跌以后西方投行进来抄底。</p><p>抄底以后投行分析师再发一条新闻，说中国的改革前景有望，然后港股应声暴涨，西方投行借机卖出大赚一笔。西方投行与西方媒体联手可以轻易影响香港股市的一涨一跌，西方投行在香港股市上一个月能赚到的钱，比在美国全年可能还要多。</p><p>操纵舆论和操纵股市，在西方是非法的，但在中国，主流媒体还纷纷邀请西方投行经济学家在电视上对中国经济政策评头评足，这在美国也是不允许的，因为投行分析师不是客观中性的。在这方面西方主流媒体的经验要比中国成熟的多，倒是中国的媒体监管部门应该向西方的同行学习学习，这是第二条。</p><p>第三条，为什么西方从主流经济学家到主流媒体都对中国经济成长的大势误判？道理很简单，因为经济发展有很大的不确定性。在不确定的情况下，你对中国前景做出预报有两种可能，一种就是对事实进行具体分析，双方力量消长，要知己知彼，不光要知道自己的长处，还要知道对方的短处，这很难。但还有另外一种判断方式，就是拍脑袋。多数人是凭自己过去的经验，过去的信仰直觉来判断，他们总是以为西方走过的道路是最好的，其他国家只要跟西方不一样肯定是输的。</p><p>然而中国领导人从建国开始就非常明白，中国如果不走和西方不同的道路是没有胜利的可能的。道理很简单，主要有两条：</p><p>第一点，中国人多资源少，西方人少但控制了世界上的大部分资源。中国即使想走西方的高消费的道路，就必须要控制世界上大部分的资源，你就得像德国日本一样发动侵略战争。中国现在是和平崛起，不想走这这条路。这是第一条。</p><p>第二点，中国从新中国建国时间起，西方就对中国进行技术封锁，也包括市场封锁，所以“自由市场”的神话对中国从来就不成立。</p><p>即使中国加入WTO已经十来年的今天，中国真正需要的高科技，西方仍然对中国是禁止出口的。在这种情况下，中国如果不依靠自己的力量投资在基础工业，要靠西方的办法，用股票市场融资来进行经济建设，你根本不可能有赶上西方国家的希望。</p><p>即使德国、日本战后的发展也是走着和英美不同的道路。在这种情况下，后来的创业者不可能有大的资本、大的信用在资本市场上融资的，只能依靠国家的政策引导，利用老百姓的储蓄，以银行资助为主，资本市场为辅，造成中国经济过去30年的高储蓄、高投资、高增长，这是中国对发展中国家创造的一条成功经验。中国即使在局部地区存在产能过剩，也可以靠打开国内外的新市场来化解，因为产能绝不是西方投机资本造成的资产泡沫，是有实体经济的基础的。</p><p>第四条，中国经济的改革还有很大空间。如果中国外贸想向全世界扩张，企业单靠银行贷款也有问题。因为中国的国有银行商业化以后也会注重短期利润，避免长远投资的风险。在这种情况下，如何政府引导，综合资本市场，民间储蓄和银行的力量来打造中国长期的发展基金，我认为复旦大学新政治经济学中心的史正富教授有很好的建议，写在他的新书《超常增长》里，你们可以读他的书，我就不用再讨论了。</p><p>最后，我们要警惕西方媒体对中国民意的副作用。虽然我认为西方对中国的判断是完全错误的，但如果中国的领导和老百姓信以为真，恰恰会有另一个危险，就是重复苏联瓦解的危险，我把它叫做自废武功。如果解放军仗打赢了，但是没有按照西方军官学校里的教育来打，国军抱怨说解放军的打法不正规，要求改变解放军的战略战术，按照西方的游戏规则来打。</p><p>你说这样的军队还有胜利的可能吗？中国的改革开放在经济上赢了，但是舆论上没有赢，还是西方世界观主导中国媒体和学术界。所以我们当前的重大任务应该是自主总结中国发展的经验，而不是用西方过时的经验来否定中国已经成功的经验，当然我们还要创造新的经验来应付中国未来的挑战。</p><p>简而言之，我回答你的第一个问题：中国是不是愚弄世界舆论，我认为中国并没有愚弄世界，反而是西方舆论企图愚弄世界，结果却是愚弄了自己，这是他们西方中心论者的悲哀。但是他们目前也不会改。西方媒体要改只有一个可能：就是世界格局的逆转连普通人也看到了，例如罗马帝国的衰落，西方学者的反省是在几百年之后！</p><p>你的第二个问题比较好答：西方媒体的焦虑，原因在西方媒体的多数人已经感到西方走下坡路，中国走上坡路，所以焦虑。但是他们还抱有希望：希望西方再出奇迹，起死回生，希望中国自废武功，误打误撞。所以，西方媒体的焦虑，正是中国年轻人的机会。中国能否坚持自己成功的道路，要看年青一代了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摘抄 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整合一下深度学习caffe基本环境的配置</title>
      <link href="/2019/11/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8BCaffe%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94Caffe%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/11/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8BCaffe%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94Caffe%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>本帖为一个回忆贴，最初写于2016年11月，大二上学期</strong><br>2016年11月，经历了数模校赛，培训，国赛等一系列折磨后，最终结果是拿到了个不好不坏的成绩：国二。虽然还是有些不甘心，但仔细想觉得数模也就那么回事，随缘就好，便申请负责了一个国创项目，间接进入导师实验室开始做科研训练。（这里还是要感谢电院较好的学术氛围和师资）</p><p>当时因为在院里实验班，自己成绩和竞赛也还不错，就找到了学校里一个挺不错的图像组的大佬当导师。那时候感觉DL没有现在那么火，自己也是第一次接触它当然，那时候第一次看这相关paper还是蛮难的，第一次接触“深度学习”这个词，但又被它各种玄幻但又挺符合常理的操作所折服。现在回忆起来，对本科生来说，多自学，早日将数学和英语水平提高到一定层次进组做科研比一味做一些所谓加分的竞赛对个人实力提升要有用得多。</p><p>说回来，当时国创项目还是偏工程一些，主要关于衣物的目标检测与识别的内容。由于前期没有任何学长的帮助，一开始在配环境上就花了很长时间。那时候做目标检测还是Caffe的天下。（配过的同学应该知道这玩意有多恶心）不过后来问问基本都是这样过来的，格十几次系统不算大事。本blog主要记录的是配环境的总结。应该算是最后一种非常完善普适的方法了。（后期进实验室才发现，实验室框环境都配好的，从老的faster-RCNN到SSD、resnet等等都有学长给弄好的，需要做的只是安心看paper，带着数据去跑即可）</p><p>本来也参考了很多CSDN前辈的教程，也按照《深度学习——２１天实战caffe》这本书来配过，但是都不成功。Caffe不像现在TensorFlow，Pytorch这种兼容性那么强，它于各种电脑的配置、环境都极大相关，且修复较难，牵一发而动全身。加上后来配GPU版的时，才发现只能先装Cuda等驱动才能在在其基础上装Caffe-gpu，又得推翻重来。（可能也是因为自己菜，当时大二上也没怎么有很多Linux的基础）故仅凭一篇教程来配置caffe是欠妥当的。建议后面的朋友主要看看每篇教程有什么不同，配的时候多带着些思考，哪些依赖包是教程没有提及但自己电脑又确实没有的。<br>　　<br>Caffe依赖多且复杂，历来被人诟病，但是配置编译完成后caffe所带来的欣喜与便捷也足以回报先前的煞费苦心。相信自己的能力也会随配环境这个过程逐步提高，而慢慢入门。希望未来看到这篇博客的你不要灰心丧气、半途而废！</p><p>　　正文开始：<br>　　由于选择的是CPU训练，所以暂时没有配置Cuda和CuDNN两个环境。</p><p>　　计算机配置：<br>　　Ubuntu 16.04 LTS<br>　　i7-4720HQ<br>　　8G内存</p><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><p>　　在终端输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install libprotobuf-dev   <br>sudo apt-get install libleveldb-dev   <br>sudo apt-get install libsnappy-dev   <br>sudo apt-get install libopencv-dev   <br>sudo apt-get install libhdf5-serial-dev   <br>sudo apt-get install protobuf-compiler  <br>sudo apt-get install --no-install-recommends libboost-<span class="hljs-built_in">all</span>-dev<br></code></pre></td></tr></table></figure><p>　　接下来安装BALS(基本线性代数子库)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install libatlas-base-dev<br></code></pre></td></tr></table></figure><p>　　使用默认Python来建立pycaffe接口，需要安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install python-dev  <br><span class="hljs-comment">##另一些兼容依赖库</span><br>sudo apt-get install libgflags-dev  <br>sudo apt-get install libgoogle-glog-dev   <br>sudo apt-get install liblmdb-dev <br></code></pre></td></tr></table></figure><h2 id="下载Caffe源码"><a href="#下载Caffe源码" class="headerlink" title="下载Caffe源码"></a>下载Caffe源码</h2><p>安装git</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>下载caffe 源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git clone https://github.com/BVLC/caffe.git<br></code></pre></td></tr></table></figure><p>在终端下载可能会有些慢，而且容易掉线，还不支持断点续传，所以我们也可以访问上面的网站，在网站下载ｚｉｐ格式的文件，再解压到&#x2F;home 就可以了。</p><p>这里多说一句，在终端下载源文件时系统会自动在&#x2F;home 下生成一个名叫caffe 的文件夹，当遇到了下载不成功的情况时，我们需要找到这个文件夹，把它删除，当然里面什么也没有。这样下次再用命令行下载才不会报错。</p><p>如果需要Caffe的Python接口，切换到caffe下的python目录下，输入以下命令下载python依赖库（先安装pip）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /caffe/python<br>sudo apt-get install python-pip<br><span class="hljs-keyword">for</span> req <span class="hljs-keyword">in</span> (catrequirements.txt);dopipinstall(catrequirements.txt);dopipinstallreq; done<br></code></pre></td></tr></table></figure><h2 id="编译Caffe"><a href="#编译Caffe" class="headerlink" title="编译Caffe"></a>编译Caffe</h2><p>开始编译之前，建议输入以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">make clean<br></code></pre></td></tr></table></figure><p>我们来到caffe 文件夹中，将Makefile.config.example 文件复制一份，改名为Makefile.config，然后我们打开这个复本文件，做一些必要的修改。</p><p>将原文本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">＃CPU-only switch (uncomment to build without GPU support).<br><span class="hljs-comment"># cpu_only :=1</span><br></code></pre></td></tr></table></figure><p>改为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">＃CPU-only switch (uncomment to build without GPU support).<br>cpu_only :=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>将原文本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">＃Whatever <span class="hljs-keyword">else</span> you find you need goes here.<br>INCLUDE_DIRS :=(PYTHONINCLUDE)/usr/local/includeLIBRARYDIRS:=(PYTHONINCLUDE)/usr/local/includeLIBRARYDIRS:=(PYTHON_LIB) /usr/local/lib /usr/lib<br></code></pre></td></tr></table></figure><p>改为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">＃Whatever <span class="hljs-keyword">else</span> you find you need goes here.<br>INCLUDE_DIRS :=(PYTHONINCLUDE)/usr/local/include　/usr/include/hdf5/serialLIBRARYDIRS:=(PYTHONINCLUDE)/usr/local/include　/usr/include/hdf5/serialLIBRARYDIRS:=(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial<br></code></pre></td></tr></table></figure><p>将原文本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">＃NOTE: this <span class="hljs-keyword">is</span> required only <span class="hljs-keyword">if</span> you will <span class="hljs-built_in">compile</span> the python interface.<br><span class="hljs-comment">#</span><br>We need to be able to find Python.h <span class="hljs-keyword">and</span> numpy/arrayobject.h.<br>PYTHON_INCLUDE := /usr/include/python2<span class="hljs-number">.7</span> \<br>/usr/lib/python2<span class="hljs-number">.7</span>/dist-packages/numpy/core/include<br></code></pre></td></tr></table></figure><p>改为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">＃NOTE: this <span class="hljs-keyword">is</span> required only <span class="hljs-keyword">if</span> you will <span class="hljs-built_in">compile</span> the python interface.<br><span class="hljs-comment">#</span><br>We need to be able to find Python.h <span class="hljs-keyword">and</span> numpy/arrayobject.h.<br>PYTHON_INCLUDE := /usr/include/python2<span class="hljs-number">.7</span> \<br>/usr/local/lib/python2<span class="hljs-number">.7</span>/dist-packages/numpy/core/include<br></code></pre></td></tr></table></figure><p>接下来是编译。<br>这里需要注意四点：<br>１、这些命令要在caffe路径下执行；<br>２、若编译报错与numpy有关，往往需要安装numpy:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get install python-numpy<br></code></pre></td></tr></table></figure><p>若报错与matplotlib相关，则需要相应安装这个package;<br>３、若编译出现失败，需要执行make clean 命令，然后重新将四条编译命令再依次执行。<br>４、在每条编译命令后面加上 -j8 -j16 的命令对提高编译速度很有帮助，将会调用尽可能多的ＣＰＵ资源进行编译。<br>下面是编译命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">make pycaffe<br>make <span class="hljs-built_in">all</span><br>make test<br>make runtest<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试Caffe的Python接口，切换到caffe&#x2F;python文件目录下，记录下来当前路径，输入以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">export PYTHONPATH=/path/to/caffe/python:$PYTHONPATH<br></code></pre></td></tr></table></figure><p>进入Python环境，输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> caffe<br></code></pre></td></tr></table></figure><p>若没有出现异常，就说明编译成功了。<br>如果没有报错，证明安装成功。</p><p>上面的方法，一旦关闭终端或者打开新终端则失效，如果放到配置文件中，可以永久有效果，命令操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#A.把环境变量路径放到 ~/.bashrc文件中  </span><br>sudo echo export PYTHONPATH=<span class="hljs-string">&quot;~/caffe/python&quot;</span> &gt;&gt; ~/.bashrc  <br><span class="hljs-comment">#B.使环境变量生效  </span><br>source ~/.bashrc <br></code></pre></td></tr></table></figure><p>非常感谢这位前辈的博文对配置环境的帮助</p><p><a href="http://blog.csdn.net/muzilinxi90/article/details/53673184">http://blog.csdn.net/muzilinxi90/article/details/53673184</a></p><p>github也有一篇文档很好，篇幅原因不再翻译，感兴趣的朋友可以参考一下。</p><p><a href="https://github.com/BVLC/caffe/wiki/Ubuntu-16.04-or-15.10-Installation-Guide">https://github.com/BVLC/caffe/wiki/Ubuntu-16.04-or-15.10-Installation-Guide</a></p><p>import caffe 出现问题也可以参考这个网站：</p><p><a href="http://www.linuxdiyf.com/linux/23093.html">http://www.linuxdiyf.com/linux/23093.html</a></p><p>caffe官网给出的教程，第一手的资料，建议阅读：</p><p><a href="http://caffe.berkeleyvision.org/installation.html">http://caffe.berkeleyvision.org/installation.html</a></p><p>基本上完成CPU only的caffe配置后，并且在不断摸索中，对linux系统和基本依赖包就已经很熟了。之后开始真正做项目需要用cuda，GPU的配置其实也很容易上手。</p><p><strong>另外我们发现，其实与其去看那么多的博客，不如自己去读英文的官方文件，或者github下下来后的readme文件，那才是最权威的第一手资料</strong></p><p>下为cuda官方文件的翻译</p><p>##NVIDIA CUDA Installation Guide for Linux<br>###Linux 系统下的NVIDIA CUDA 安装指南</p><p><a href="http://blog.csdn.net/hhy_csdn/article/details/64440406">http://blog.csdn.net/hhy_csdn/article/details/64440406</a></p><p>到了这里基本就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
            <tag> DL </tag>
            
            <tag> 配环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部分功能摘抄</title>
      <link href="/2019/11/29/Hexo-%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E6%91%98%E6%8A%84/"/>
      <url>/2019/11/29/Hexo-%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E6%91%98%E6%8A%84/</url>
      
        <content type="html"><![CDATA[<h3 id="先放几个有用的博客："><a href="#先放几个有用的博客：" class="headerlink" title="先放几个有用的博客："></a>先放几个有用的博客：</h3><p><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a><br><a href="https://tengj.github.io/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/">https://tengj.github.io/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/</a><br><a href="https://tengj.github.io/2016/03/06/hexo4/">https://tengj.github.io/2016/03/06/hexo4/</a></p><h3 id="常用的Hexo-命令"><a href="#常用的Hexo-命令" class="headerlink" title="常用的Hexo 命令"></a>常用的Hexo 命令</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py">npm install hexo -g <span class="hljs-comment">#安装Hexo</span><br>npm update hexo -g <span class="hljs-comment">#升级</span><br>hexo init <span class="hljs-comment">#初始化博客</span><br><br>简写命令<br>hexo n <span class="hljs-string">&quot;我的博客&quot;</span> == hexo new <span class="hljs-string">&quot;我的博客&quot;</span> <span class="hljs-comment">#新建文章</span><br>hexo g == hexo generate <span class="hljs-comment">#生成</span><br>hexo s == hexo server <span class="hljs-comment">#启动服务预览</span><br>hexo d == hexo deploy <span class="hljs-comment">#部署</span><br><br>hexo server <span class="hljs-comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span><br>hexo server -s <span class="hljs-comment">#静态模式</span><br>hexo server -p <span class="hljs-number">5000</span> <span class="hljs-comment">#更改端口</span><br>hexo server -i <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-comment">#自定义 IP</span><br>hexo clean <span class="hljs-comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span><br></code></pre></td></tr></table></figure><p>这三个命令依次为新建一篇博客文章、生成网页、在本地预览的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摘抄 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World，Hexo</title>
      <link href="/2019/11/29/Hello%20World%EF%BC%8CHexo/"/>
      <url>/2019/11/29/Hello%20World%EF%BC%8CHexo/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello，World"><a href="#Hello，World" class="headerlink" title="Hello，World~"></a>Hello，World~</h2><p>总感觉原来用CSDN写博客太多人看到了，现在开始使用Hexo+GitHub托管的方式写博客。会加很多碎碎念~~<br>新心情，新头像，Hello World！</p><p><img src="/2019/11/29/Hello%20World%EF%BC%8CHexo/a.jpg"></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 心情&amp;日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>博士生，业余爱好摄影、音乐。<br><img src="/about/index/sheyin1.jpg"><br><img src="/about/index/sheyin2.jpg"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<p>Python is For Fun： Python</p><p>深度学习之Caffe入门——Caffe环境配置： DL</p>]]></content>
      
    </entry>
    
    
  
</search>
